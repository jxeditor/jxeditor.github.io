{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/chan/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/photoswipe-ui-default.js","path":"PhotoSwipe/photoswipe-ui-default.js","modified":1,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/photoswipe-ui-default.min.js","path":"PhotoSwipe/photoswipe-ui-default.min.js","modified":1,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.css","path":"PhotoSwipe/photoswipe.css","modified":1,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.min.js","path":"PhotoSwipe/photoswipe.min.js","modified":1,"renderable":1},{"_id":"themes/chan/source/scripts/main.js","path":"scripts/main.js","modified":1,"renderable":1},{"_id":"themes/chan/source/styles/archive.styl","path":"styles/archive.styl","modified":1,"renderable":1},{"_id":"themes/chan/source/styles/article.styl","path":"styles/article.styl","modified":1,"renderable":1},{"_id":"themes/chan/source/styles/footer.styl","path":"styles/footer.styl","modified":1,"renderable":1},{"_id":"themes/chan/source/styles/highlight.styl","path":"styles/highlight.styl","modified":1,"renderable":1},{"_id":"themes/chan/source/styles/layout.styl","path":"styles/layout.styl","modified":1,"renderable":1},{"_id":"themes/chan/source/styles/main.styl","path":"styles/main.styl","modified":1,"renderable":1},{"_id":"themes/chan/source/styles/mobile-header.styl","path":"styles/mobile-header.styl","modified":1,"renderable":1},{"_id":"themes/chan/source/styles/monochrome.styl","path":"styles/monochrome.styl","modified":1,"renderable":1},{"_id":"themes/chan/source/styles/pagination.styl","path":"styles/pagination.styl","modified":1,"renderable":1},{"_id":"themes/chan/source/styles/post-list.styl","path":"styles/post-list.styl","modified":1,"renderable":1},{"_id":"themes/chan/source/styles/third-party.styl","path":"styles/third-party.styl","modified":1,"renderable":1},{"_id":"themes/chan/source/styles/sidebar.styl","path":"styles/sidebar.styl","modified":1,"renderable":1},{"_id":"themes/chan/source/styles/variables.styl","path":"styles/variables.styl","modified":1,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.js","path":"PhotoSwipe/photoswipe.js","modified":1,"renderable":1},{"_id":"themes/chan/source/images/cc/by.png","path":"images/cc/by.png","modified":1,"renderable":1},{"_id":"themes/chan/source/images/cc/cc.png","path":"images/cc/cc.png","modified":1,"renderable":1},{"_id":"themes/chan/source/images/cc/nc.png","path":"images/cc/nc.png","modified":1,"renderable":1},{"_id":"themes/chan/source/images/cc/nd.png","path":"images/cc/nd.png","modified":1,"renderable":1},{"_id":"themes/chan/source/images/cc/sa.png","path":"images/cc/sa.png","modified":1,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/css/perfect-scrollbar.min.css","path":"perfect-scrollbar/css/perfect-scrollbar.min.css","modified":1,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/css/perfect-scrollbar.css","path":"perfect-scrollbar/css/perfect-scrollbar.css","modified":1,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.css","path":"PhotoSwipe/default-skin/default-skin.css","modified":1,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.png","path":"PhotoSwipe/default-skin/default-skin.png","modified":1,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.svg","path":"PhotoSwipe/default-skin/default-skin.svg","modified":1,"renderable":1},{"_id":"themes/chan/source/PhotoSwipe/default-skin/preloader.gif","path":"PhotoSwipe/default-skin/preloader.gif","modified":1,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/js/perfect-scrollbar.js","path":"perfect-scrollbar/js/perfect-scrollbar.js","modified":1,"renderable":1},{"_id":"themes/chan/source/styles/libs/normalize.styl","path":"styles/libs/normalize.styl","modified":1,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/js/perfect-scrollbar.jquery.js","path":"perfect-scrollbar/js/perfect-scrollbar.jquery.js","modified":1,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/js/min/perfect-scrollbar.jquery.min.js","path":"perfect-scrollbar/js/min/perfect-scrollbar.jquery.min.js","modified":1,"renderable":1},{"_id":"themes/chan/source/perfect-scrollbar/js/min/perfect-scrollbar.min.js","path":"perfect-scrollbar/js/min/perfect-scrollbar.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/chan/.gitignore","hash":"00dfdd5e482155434664f9eab001cdaa91f2c98c","modified":1559046020990},{"_id":"themes/chan/LICENSE","hash":"bc977785bc6b3b93a1545bddd5ad5cc248591f5f","modified":1559046020990},{"_id":"themes/chan/README.md","hash":"f3e0bd58b2c652788c1696037d72a6bb9f0e4aa2","modified":1559046020990},{"_id":"themes/chan/_config.yml","hash":"9764831002abe21f66b23414c20d4a598473d5fe","modified":1559298088784},{"_id":"themes/chan/cc.png","hash":"eb4f6de9697f43e2c59ae358c25b7a4c92a17798","modified":1559046020991},{"_id":"themes/chan/package.json","hash":"c8764ddddf27ba2851144ed363572d9714465e1f","modified":1559046021003},{"_id":"themes/chan/screenshot.png","hash":"d7de078723b6b2089949637a1ced3481e192d15a","modified":1559046021006},{"_id":"source/_posts/CDH5.15.1搭建与重装.md","hash":"a4df966517a4f8e835bf0c53dd3398871c7c791c","modified":1559309026304},{"_id":"source/_posts/Docker的简单入门.md","hash":"83628decbfd6e79b0f44b95d81eea50b6fae189f","modified":1559308508097},{"_id":"source/_posts/Hexo+Github搭建个人Blog.md","hash":"571aadb284a4d428505ee718e011c309899438ed","modified":1559298088782},{"_id":"source/_posts/Hexo设置Blog的分类与标签.md","hash":"d75df7fcd91a5fbb7258c4ac1627d62c0422fafd","modified":1559298088782},{"_id":"source/_posts/Linux防火墙限制.md","hash":"3df0de2021ee79fd823e5e52721a728ee242a3a3","modified":1559308728870},{"_id":"source/_posts/MVN命令.md","hash":"90d3371cb1512220d1ccecc373897b91c9ecbb24","modified":1559308523515},{"_id":"source/_posts/Shell总体归纳.md","hash":"ef8d189d6d6ea894c994a1f943b516b91e428993","modified":1559308755105},{"_id":"source/_posts/Spark[RDD-DataFrame-DataSet].md","hash":"836fce640bbd03e4ce766c397b31267ff5220d3c","modified":1559309513170},{"_id":"source/_posts/数据库存储过程及触发器.md","hash":"f260928d8c200c7904b2e62f2904e5a66aca7f6b","modified":1559308923247},{"_id":"source/about/index.md","hash":"c29b168ceb1bab504804f6caf4bd72982aac8a26","modified":1559051647185},{"_id":"themes/chan/languages/en.yml","hash":"d7a5002cf47fab3596e8a12267107053045bc09d","modified":1559046020992},{"_id":"themes/chan/languages/zh-CN.yml","hash":"62de7f845278ac679870a39e228117e218655e77","modified":1559046020992},{"_id":"themes/chan/languages/zh-TW.yml","hash":"4af62d6e23d0e475e3d15aaa4cefed576ac82476","modified":1559046020993},{"_id":"themes/chan/layout/archive.ejs","hash":"d1015a490c35be89f2d35c747b638d09b09d3918","modified":1559046021001},{"_id":"themes/chan/layout/category.ejs","hash":"1a7f5ef68a3b5319c6f165605d095ca4e2a5be7f","modified":1559046021001},{"_id":"themes/chan/layout/index.ejs","hash":"d1015a490c35be89f2d35c747b638d09b09d3918","modified":1559046021002},{"_id":"themes/chan/layout/post.ejs","hash":"82e7106ff6b66c50c01a58c316cb1c1b4c78215c","modified":1559046021002},{"_id":"themes/chan/layout/layout.ejs","hash":"a2f89332a1ebd5161dddfd51fa71edfa00dc6910","modified":1559046021002},{"_id":"themes/chan/layout/tag.ejs","hash":"4327317a454b1e025362c400be243c8e08967eb4","modified":1559046021003},{"_id":"themes/chan/screenshot.gif","hash":"fe433effcca8c245e7ea4c5da09521659fe15592","modified":1559046021005},{"_id":"themes/chan/scripts/photoswipe.js","hash":"33496124158cfec80f7a40d44cc69ff695429ba5","modified":1559046021006},{"_id":"themes/chan/layout/_partials/article.ejs","hash":"863d096dbac5835a42ab58e9da0b28111d645b09","modified":1559046020993},{"_id":"themes/chan/layout/_partials/footer.ejs","hash":"54dfecfc9ff00d19babba191aa528fe03b8e538a","modified":1559046020994},{"_id":"themes/chan/layout/_partials/baidu-statistics.ejs","hash":"233ae1839f1db1660f480acb5dc843f3f84d0c5f","modified":1559046020994},{"_id":"themes/chan/layout/_partials/google-analytics.ejs","hash":"e7e032a8e55fe0b5815b6986029f03192f807c66","modified":1559046020994},{"_id":"themes/chan/layout/_partials/head.ejs","hash":"8f8523ae6ac9ee996764eeff6050b857a7994991","modified":1559046020995},{"_id":"themes/chan/layout/_partials/mobile-header.ejs","hash":"d1522fbce6554b0f65f3b0d05e1e6c77ab2138de","modified":1559046020995},{"_id":"themes/chan/layout/_partials/photoswipe.ejs","hash":"f51d12bf0af36ab76d3ce569df54241c191903e0","modified":1559046020996},{"_id":"themes/chan/layout/_partials/pagination.ejs","hash":"fa59d2fd85608f27581d570d46f481423a717a4c","modified":1559046020996},{"_id":"themes/chan/layout/_partials/post-list.ejs","hash":"1363ec82c28a01d95ad045a4e78ff19b7a27f116","modified":1559046020996},{"_id":"themes/chan/layout/_partials/scripts.ejs","hash":"1eb7538763ab779ca70bdb0a0e75933662187c78","modified":1559046021000},{"_id":"themes/chan/layout/_partials/sidebar.ejs","hash":"41704f0f0ffd581c5436b2f185290e6baafad504","modified":1559046021001},{"_id":"themes/chan/source/images/favicon.ico","hash":"32819d4ce1e2012dbfe3fdf068c12dd1ca278780","modified":1559139731018},{"_id":"themes/chan/source/PhotoSwipe/photoswipe-ui-default.js","hash":"05fa305ec449deb59b04e2ae118a8e3ec5250e1b","modified":1559046021009},{"_id":"themes/chan/source/PhotoSwipe/photoswipe-ui-default.min.js","hash":"852a1fcdaacf66754090fc6d432013c5c657ab80","modified":1559046021009},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.css","hash":"344a1b84e0001becfb278de3fb6decc79616599e","modified":1559046021010},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.min.js","hash":"39806b9989eaecbc3e032da8de77f69e0c9ff779","modified":1559046021011},{"_id":"themes/chan/source/scripts/main.js","hash":"a8e055fd631aacc788325161a67d8a9f76e54736","modified":1559046021019},{"_id":"themes/chan/source/styles/archive.styl","hash":"b866d4a5f87e0f90891307559f979a0dfd57ff64","modified":1559046021019},{"_id":"themes/chan/source/styles/article.styl","hash":"23bc4bab2606aa72702d658c85baf24b8338bdeb","modified":1559046021019},{"_id":"themes/chan/source/styles/footer.styl","hash":"3b83acaf0f5f128d3826c66625584cd35527b203","modified":1559046021020},{"_id":"themes/chan/source/styles/highlight.styl","hash":"7f7fa3bd4db27e308632ee364216b0077d1e0827","modified":1559310574063},{"_id":"themes/chan/source/styles/layout.styl","hash":"3a40ba116ecceef31f992846c69757b485bcff45","modified":1559046021020},{"_id":"themes/chan/source/styles/main.styl","hash":"09291ccc7b13df3e6ddc24955ff52779051f11d9","modified":1559046021021},{"_id":"themes/chan/source/styles/mobile-header.styl","hash":"144f6eb775dc49a64a1a89065e26b765c0474cdb","modified":1559046021022},{"_id":"themes/chan/source/styles/monochrome.styl","hash":"893aaa52a227bdb93fbb40f699129d3320ca97e8","modified":1559046021022},{"_id":"themes/chan/source/styles/pagination.styl","hash":"a91fb3b04eb520a94622652ca9158f3c69c37d79","modified":1559046021022},{"_id":"themes/chan/source/styles/post-list.styl","hash":"ad498c67ba5d630f45b52ab104fa07bb9e38d22a","modified":1559046021023},{"_id":"themes/chan/source/styles/third-party.styl","hash":"659bae8c4b91617e38a4e3fff3d814272595489c","modified":1559046021023},{"_id":"themes/chan/source/styles/sidebar.styl","hash":"5340df59d184e47ce00a7f264fe5d378b782966e","modified":1559046021023},{"_id":"themes/chan/source/styles/variables.styl","hash":"217e2e6ae4ea79588a18c94ff7bdbf1da4a0f274","modified":1559046021023},{"_id":"themes/chan/source/PhotoSwipe/photoswipe.js","hash":"b616337e586eaa5afcf5bb77c927bd1b09a25524","modified":1559046021011},{"_id":"themes/chan/layout/_partials/post/category.ejs","hash":"7d785f990b469b98b8f851c25b3ded20b7f37c05","modified":1559046020997},{"_id":"themes/chan/layout/_partials/post/cc.ejs","hash":"04dbb435fd23ff3a1229877ecbb3fcc4465fb1bd","modified":1559046020997},{"_id":"themes/chan/layout/_partials/post/date.ejs","hash":"38283df1d351074b470f9eecfd673e3281adfa4c","modified":1559046020998},{"_id":"themes/chan/layout/_partials/post/disqus.ejs","hash":"a3dbd589bbbe3ebf63d09dc8121b9ac8ee4f4b62","modified":1559046020998},{"_id":"themes/chan/layout/_partials/post/duoshuo.ejs","hash":"1bac68d7979671d2ef8d8914f33aa887a1adc660","modified":1559046020998},{"_id":"themes/chan/layout/_partials/post/gallery.ejs","hash":"9e5609a6544db90f99c98855b4071c204cfc6253","modified":1559046020999},{"_id":"themes/chan/layout/_partials/post/jiathis.ejs","hash":"ef5f3fbfb6d807f1f22854ba4053b6845f21ec8d","modified":1559046020999},{"_id":"themes/chan/layout/_partials/post/tag.ejs","hash":"e4de4beeefd8b0b91551219cf649d2680deeb72e","modified":1559046021000},{"_id":"themes/chan/layout/_partials/post/title.ejs","hash":"a77ae3eb6dc0ae9987d15284d44dd35817585204","modified":1559046021000},{"_id":"themes/chan/source/images/cc/by.png","hash":"fefd720ccfcfbc2b7b15fa56b0ff7e347855aeef","modified":1559046021012},{"_id":"themes/chan/source/images/cc/cc.png","hash":"f7b3311d99cf99c94a8d4e7fdfe3708988fa20eb","modified":1559046021012},{"_id":"themes/chan/source/images/cc/nc.png","hash":"93e68e51a4416092c5b2a313da706caf68113c64","modified":1559046021013},{"_id":"themes/chan/source/images/cc/nd.png","hash":"255699dc771a311b4f3646b88f9c3089420429ca","modified":1559046021013},{"_id":"themes/chan/source/images/cc/sa.png","hash":"917c361ce9ee4b8d88c5b22c2b775eff7d25e92e","modified":1559046021014},{"_id":"themes/chan/source/perfect-scrollbar/css/perfect-scrollbar.min.css","hash":"ad0019d1525a6b68d8e36d9ce93956018e35bd9f","modified":1559046021015},{"_id":"themes/chan/source/perfect-scrollbar/css/perfect-scrollbar.css","hash":"53804e829a794b7780cd87c544001eb0a7be9593","modified":1559046021014},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.css","hash":"3f8f8062d24cce2158d3c02bdfc56c000f1a1f9b","modified":1559046021007},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1559046021008},{"_id":"themes/chan/source/PhotoSwipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1559046021008},{"_id":"themes/chan/source/PhotoSwipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1559046021008},{"_id":"themes/chan/source/perfect-scrollbar/js/perfect-scrollbar.js","hash":"2afa3d22514c3442979505b76f1b337650c97ad8","modified":1559046021018},{"_id":"themes/chan/source/styles/libs/normalize.styl","hash":"f466245d5ad990c1062481c0e1f8741fb4bfa00e","modified":1559046021021},{"_id":"themes/chan/source/perfect-scrollbar/js/perfect-scrollbar.jquery.js","hash":"beb6c76a1fbbb33888065b10213d81be3aef6b66","modified":1559046021017},{"_id":"themes/chan/source/perfect-scrollbar/js/min/perfect-scrollbar.jquery.min.js","hash":"b5aa5a930a6f720c5a8cbad2ced27dd986e8895e","modified":1559046021016},{"_id":"themes/chan/source/perfect-scrollbar/js/min/perfect-scrollbar.min.js","hash":"d611dd04c2f934950c3909626ebd519622dd9854","modified":1559046021017},{"_id":"public/about/index.html","hash":"86702749db6548820e5cd75b96bec47a821f0c4d","modified":1559310744004},{"_id":"public/2019/05/31/Spark[RDD-DataFrame-DataSet]/index.html","hash":"4f862e0ccb76cad2d24f502a9db52bb87f52e8f5","modified":1559310744004},{"_id":"public/2019/05/31/Linux防火墙限制/index.html","hash":"5262fd097ce9143e3bbb14cced7cd552c07b255d","modified":1559310744004},{"_id":"public/2019/05/31/MVN命令/index.html","hash":"5ad136b2a35875097bd7ae4b797a5b3bd02a7cb6","modified":1559310744004},{"_id":"public/2019/05/29/Hexo设置Blog的分类与标签/index.html","hash":"93cd8ea201ab0dd91b672e101d5fedf652b146b1","modified":1559310744004},{"_id":"public/categories/使用/index.html","hash":"ffd5dbd7f035157ef5c8984f30e6f607243cf18c","modified":1559310744005},{"_id":"public/categories/搭建/index.html","hash":"7b8f52d33baaa10cf8db8c45a3d25f2a72ea3ba3","modified":1559310744005},{"_id":"public/categories/命令/index.html","hash":"356b938274591ebd1cc678f2a4f5495524be2f38","modified":1559310744005},{"_id":"public/categories/运维/index.html","hash":"be85c7c8a00e927ce49718aa95bf5f988f1a424a","modified":1559310744005},{"_id":"public/categories/大数据/index.html","hash":"7920a9a2e6c3ea63a5f61154673f4bec1d04d037","modified":1559310744005},{"_id":"public/categories/教程/index.html","hash":"10c9cf58a23f8a48fbaae50d44d5481b0a648349","modified":1559310744006},{"_id":"public/categories/数据库/index.html","hash":"c66ecd0a86a78292d314cf7e5a8021716a7cfe65","modified":1559310744006},{"_id":"public/tags/docker/index.html","hash":"e946aa8dfa4a183f898fd5d73e407b904ccf7e1b","modified":1559310744006},{"_id":"public/tags/hexo/index.html","hash":"78defb2138e3e475fc70c9d1e94788d11d35184e","modified":1559310744006},{"_id":"public/tags/大数据/index.html","hash":"f25f4369036464101c414f8aecd7972c36804444","modified":1559310744006},{"_id":"public/tags/CDH/index.html","hash":"716d58277fd613d99c0e6df5ba701aa3c8ec60f2","modified":1559310744006},{"_id":"public/tags/git/index.html","hash":"0d6ecc641e173a9c8e908a8f6a857d24bc5e5bee","modified":1559310744006},{"_id":"public/tags/mvn/index.html","hash":"b7130ee5561b9602942f200cb5c334ddd684a61f","modified":1559310744006},{"_id":"public/tags/Linux/index.html","hash":"c957a485b330cf0f9303740e204fb07e541bb686","modified":1559310744006},{"_id":"public/tags/spark/index.html","hash":"f4f8610cf4b98cd975f8ff7b5831e7d0e3d113f4","modified":1559310744006},{"_id":"public/tags/shell/index.html","hash":"ce2e5f38afccb7992e69f87bde046bfe5b851191","modified":1559310744007},{"_id":"public/tags/mysql/index.html","hash":"1f0360a32e8820fe7a0abf6bac9b8d4731b6dd99","modified":1559310744007},{"_id":"public/2019/05/31/CDH5.15.1搭建与重装/index.html","hash":"bac58b10816a110c011802a59b155858204d625d","modified":1559310744007},{"_id":"public/2019/05/31/数据库存储过程及触发器/index.html","hash":"5dcbb4e0d7ab42249f5f5c3dadd6e99daefd711b","modified":1559310744007},{"_id":"public/2019/05/31/Shell总体归纳/index.html","hash":"76ad77221c384886e080d5cd8224dcee17219173","modified":1559310744007},{"_id":"public/2019/05/31/Docker的简单入门/index.html","hash":"7b0a4a48cd396331be6f7b8a09e623c869bf6830","modified":1559310744007},{"_id":"public/2019/05/29/Hexo+Github搭建个人Blog/index.html","hash":"e55baaaee7e18550831e57f8ad58392f82dcc93d","modified":1559310744007},{"_id":"public/archives/index.html","hash":"78e38ded20438a31ded14c63e24b6c1e5676154d","modified":1559310744007},{"_id":"public/archives/2019/index.html","hash":"79c5904bd69806f9027d4796789f7de6b2d781ec","modified":1559310744007},{"_id":"public/archives/2019/05/index.html","hash":"2831f25a07def9139af9160a7e90f5d59e7a1202","modified":1559310744008},{"_id":"public/index.html","hash":"ca48aa059194983211c1e644d410d36c158d343d","modified":1559310744008},{"_id":"public/images/favicon.ico","hash":"32819d4ce1e2012dbfe3fdf068c12dd1ca278780","modified":1559310744013},{"_id":"public/images/cc/by.png","hash":"fefd720ccfcfbc2b7b15fa56b0ff7e347855aeef","modified":1559310744013},{"_id":"public/images/cc/cc.png","hash":"f7b3311d99cf99c94a8d4e7fdfe3708988fa20eb","modified":1559310744013},{"_id":"public/images/cc/nc.png","hash":"93e68e51a4416092c5b2a313da706caf68113c64","modified":1559310744013},{"_id":"public/images/cc/nd.png","hash":"255699dc771a311b4f3646b88f9c3089420429ca","modified":1559310744013},{"_id":"public/images/cc/sa.png","hash":"917c361ce9ee4b8d88c5b22c2b775eff7d25e92e","modified":1559310744013},{"_id":"public/PhotoSwipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1559310744013},{"_id":"public/PhotoSwipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1559310744013},{"_id":"public/PhotoSwipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1559310744014},{"_id":"public/styles/highlight.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559310744458},{"_id":"public/PhotoSwipe/photoswipe.css","hash":"309be6861bc1384fbc016110bb083de648505fe4","modified":1559310744458},{"_id":"public/styles/archive.css","hash":"6d90bd0c59586ef63dd9e9e10bfa0144c0c442fa","modified":1559310744459},{"_id":"public/styles/layout.css","hash":"9728fea8ee073f20644febba5ba0c148ff150d33","modified":1559310744459},{"_id":"public/styles/article.css","hash":"20b574cc1e1359f1806d06aad2702835e059e0b2","modified":1559310744459},{"_id":"public/styles/footer.css","hash":"2d2c9f437c0578e213b5e51f084df0bbb84914f9","modified":1559310744459},{"_id":"public/styles/mobile-header.css","hash":"ff2b5e6dc153bc815d6093654a9deb2ac2133afa","modified":1559310744459},{"_id":"public/styles/monochrome.css","hash":"ae4f10d109c4cef388c0a830e9417a545e25b66c","modified":1559310744459},{"_id":"public/styles/pagination.css","hash":"3552f98652f229a6caec8d9fc4ba48c7ae06da64","modified":1559310744459},{"_id":"public/styles/post-list.css","hash":"021c1389e9b9d7870f09ef31afbed9b9ba3b99f9","modified":1559310744459},{"_id":"public/styles/third-party.css","hash":"3e8947eb8837416acaf18a1dc1c74279bf84a23b","modified":1559310744459},{"_id":"public/styles/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559310744459},{"_id":"public/styles/sidebar.css","hash":"15baefb48b657f37089018219402775f9131375e","modified":1559310744459},{"_id":"public/perfect-scrollbar/css/perfect-scrollbar.min.css","hash":"d27d8a642a0cf0377d9abdd08858fae9a0fed6e8","modified":1559310744459},{"_id":"public/perfect-scrollbar/css/perfect-scrollbar.css","hash":"3839383a67dbff2cf1efab60cc08b70517eda4fc","modified":1559310744460},{"_id":"public/styles/libs/normalize.css","hash":"d688e75d0b2127cb6529c6cd16a6fb28ffdd8ff0","modified":1559310744460},{"_id":"public/styles/main.css","hash":"15cd5269f8b12354c96e74a474f469aca4966780","modified":1559310744460},{"_id":"public/PhotoSwipe/photoswipe-ui-default.min.js","hash":"38557bef17c33e172bc8e1670cd302d91622dfad","modified":1559310744467},{"_id":"public/scripts/main.js","hash":"7bf49377a68ad7579e25e4b11edcfadef33c6f82","modified":1559310744467},{"_id":"public/PhotoSwipe/default-skin/default-skin.css","hash":"91f44576a5f5ccff4740ff5020656bd2f00ca13c","modified":1559310744468},{"_id":"public/PhotoSwipe/photoswipe-ui-default.js","hash":"724162c14e5722a2ce1f44cf086dcea7b6855b80","modified":1559310744472},{"_id":"public/PhotoSwipe/photoswipe.min.js","hash":"e3267f5ae23f00c1ae052d019f12787296e34afc","modified":1559310744474},{"_id":"public/perfect-scrollbar/js/min/perfect-scrollbar.jquery.min.js","hash":"de9735bbe28f4999e3e83698720b4989f80143a0","modified":1559310744474},{"_id":"public/perfect-scrollbar/js/min/perfect-scrollbar.min.js","hash":"9e33e23e57821cb4763c0cb4fb3b6870b3de11eb","modified":1559310744474},{"_id":"public/perfect-scrollbar/js/perfect-scrollbar.jquery.js","hash":"6c648a786548d8ec9f4879d23095ce501e850350","modified":1559310744482},{"_id":"public/perfect-scrollbar/js/perfect-scrollbar.js","hash":"18a4fd1e09cac9aa351131a38c59b4dba78be084","modified":1559310744482},{"_id":"public/PhotoSwipe/photoswipe.js","hash":"ff9e3cc58b44a61144a9e211503755b170c24e91","modified":1559310744497}],"Category":[{"name":"使用","_id":"cjwc5ctgx0004skw7i8ndrxq8"},{"name":"搭建","_id":"cjwc5cth7000askw7sxmdlujs"},{"name":"命令","_id":"cjwc5cthh000hskw7pbplsqlw"},{"name":"运维","_id":"cjwc5cthk000lskw7tmzjv9nx"},{"name":"大数据","_id":"cjwc5cthn000qskw7wyex80sa"},{"name":"教程","_id":"cjwc5cti70015skw71h0dgmow"},{"name":"数据库","_id":"cjwc5ctin001askw7zp1cnbi1"}],"Data":[],"Page":[{"title":"关于","date":"2019-05-28T12:58:17.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2019-05-28 20:58:17\n---\n","updated":"2019-05-28T13:54:07.185Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjwc5cti30013skw7q8qn2qib","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Docker的简单入门","date":"2019-05-31T07:20:25.000Z","categorys":"教程","_content":"## 1.组成\n- 镜像\n- 容器\n- 仓库\n\n<!-- more -->\n\n---\n\n## 2.命令\n```\n- 获取镜像 :\ndocker pull 仓库名:标记名(eg:docker pull ubuntu:12.04)\n\n- 使用镜像创建容器 :\ndocker run -t -i ubuntu:14.04 /bin/bash\n\n- 查看当前运行的容器(加上-a查看所有容器) :\ndocker container ls\n\n- 停止NAMES容器 :\ndocker container stop NAMES\n\n- 删除NAMES容器 :\ndocker container rm NAMES\n\n- 查看容器信息 :\ndocker container ps\n\n- 查看容器输出信息 :\ndocker container logs NAMES\n\n- 进入容器 :\ndocker attach NAMES\n\n- 查看镜像 :\ndocker image ls\n\n- 删除NAMES镜像 :\ndocker image rm NAMES\n\n- 查看镜像仓库 :\ndocker search centos\n```\n\n---\n\n## 3.创建镜像\n```\n- mkdir sinatra\n- cd sinatra\n- vi Dockerfile\n# This is a comment\nFROM ubuntu:14.04\nMAINTAINER Docker jkillers <980813351@qq.com>\nRUN apt-get -qq update\nRUN gem install sinatra\n\n- docker build -t=\"playcrab/sinatra:v1\" .\n -t标记来添加tag,指定新的镜像的用户信息\n \".\"是Dockerfile所在目录(当前目录)\n 一个镜像不能超过127层\n ADD命令复制本地文件到镜像\n EXPOSE命令向外部开放端口\n CMD描述容器启动后运行的程序\n\nADD myApp /var/www\nEXPOSE httpd port\nCMD [\"/usr/sbin/apachectl\",\"-D\",\"FOREGROUND\"]\n\n- docker run -t -i playcrab/sinatra:v1 /bin/bash\n```\n\n---\n\n## 4.导入导出上传移除镜像\n> 导入镜像\n\n```\n先下载一个镜像在本地\ndocker load --input ubuntu_14.04.tar\ndocker load < ubuntu_14.04.tar\n```\n> 导出镜像\n\n```\ndocker save -o ubuntu_14.04.tar ubuntu:14.04\n```\n> 上传镜像\n\n```\ndocker push playcrab/sinatra\n```\n> 移除镜像\n\n```\ndocker rmi playcrab/sinatra\n在删除镜像之前要先删除依赖于这个镜像的容器\n```\n\n---\n\n## 5.docker run容器的创建\n```\ndocker run -t -i ubuntu:14.04 /bin/bash\n -t让Docker分配一个伪终端并绑定到容器的标准输出上\n -i让容器的标准输入保持打开\n 交互模式下,用户可以通过所创建的终端来输入命令\n\ndocker run -d ubuntu:14.04 /bin/sh -c \"while true; do echo hello world; sleep 1; done\" \n -d让Docker容器在后台以守护态的形式运行\n - 返回一个唯一ID\n```\n---\n\n## 6.DockerFile\n> #### 基本结构\n\n- 基础镜像信息\n- 维护者信息\n- 镜像操作指令\n- 容器启动时执行指令\n\n> #### 指令\n\n```\nFROM:\n    第一条指令必须是FROM指令,如果在同一个DockerFile文件中创建多个镜像,可以使用多个FROM指令\nMAINTAINER:\n    指定维护者信息\nRUN:\n    每条RUN指令将在当前镜像基础上执行指定命令,并提交为新的镜像.命令较长时可以使用\\换行\nCMD:\n    指定启动容器时执行的命令,每个DockerFile只能有一条CMD命令.如果指定了多条,只有最后一条被执行\nEXPOSE:\n    Docker主机分配一个端口转发到指定的端口\nENV:\n    指定环境变量,会被后续RUN指令使用.并在容器运行时保持\nADD:\n    复制指定的<src>到容器的<dest>\nCOPY:\n    复制指定的<src>到容器的<dest>\nENTRYPOINT:\n    指定启动容器后执行的命令,每个DockerFile只能有一条ENTRYPOINT命令.如果指定了多条,只有最后一条被执行\nVOLUME:\n    创建可以从本地主机或其他容器挂载的挂载点,一般用来存放数据库和需要保持的数据等\nUSER:\n    指定运行容器时的用户名或UID,后续的RUN也会使用指定用户\nWORKDIR:\n    为后续的RUN,CMD,ENTRYPOINT指令配置工作目录.可以使用多个WORKDIR指令,后续命令如果参数是相对路径,则会基于之前命令指定的路径\nONBUILD:\n    配置当所创建的镜像作为其它新创建镜像的基础镜像时,所执行的操作指令\n```\n\n> #### 底层实现\n\n- 名字空间(NameSpaces)\n- 控制组(ControlGroups)\n- Union文件系统(UnionFileSystems)\n- 容器格式(ContainerFormat)\n\n","source":"_posts/Docker的简单入门.md","raw":"---\ntitle: Docker的简单入门\ndate: 2019-05-31 15:20:25\ncategorys: 教程\ntags: docker\n---\n## 1.组成\n- 镜像\n- 容器\n- 仓库\n\n<!-- more -->\n\n---\n\n## 2.命令\n```\n- 获取镜像 :\ndocker pull 仓库名:标记名(eg:docker pull ubuntu:12.04)\n\n- 使用镜像创建容器 :\ndocker run -t -i ubuntu:14.04 /bin/bash\n\n- 查看当前运行的容器(加上-a查看所有容器) :\ndocker container ls\n\n- 停止NAMES容器 :\ndocker container stop NAMES\n\n- 删除NAMES容器 :\ndocker container rm NAMES\n\n- 查看容器信息 :\ndocker container ps\n\n- 查看容器输出信息 :\ndocker container logs NAMES\n\n- 进入容器 :\ndocker attach NAMES\n\n- 查看镜像 :\ndocker image ls\n\n- 删除NAMES镜像 :\ndocker image rm NAMES\n\n- 查看镜像仓库 :\ndocker search centos\n```\n\n---\n\n## 3.创建镜像\n```\n- mkdir sinatra\n- cd sinatra\n- vi Dockerfile\n# This is a comment\nFROM ubuntu:14.04\nMAINTAINER Docker jkillers <980813351@qq.com>\nRUN apt-get -qq update\nRUN gem install sinatra\n\n- docker build -t=\"playcrab/sinatra:v1\" .\n -t标记来添加tag,指定新的镜像的用户信息\n \".\"是Dockerfile所在目录(当前目录)\n 一个镜像不能超过127层\n ADD命令复制本地文件到镜像\n EXPOSE命令向外部开放端口\n CMD描述容器启动后运行的程序\n\nADD myApp /var/www\nEXPOSE httpd port\nCMD [\"/usr/sbin/apachectl\",\"-D\",\"FOREGROUND\"]\n\n- docker run -t -i playcrab/sinatra:v1 /bin/bash\n```\n\n---\n\n## 4.导入导出上传移除镜像\n> 导入镜像\n\n```\n先下载一个镜像在本地\ndocker load --input ubuntu_14.04.tar\ndocker load < ubuntu_14.04.tar\n```\n> 导出镜像\n\n```\ndocker save -o ubuntu_14.04.tar ubuntu:14.04\n```\n> 上传镜像\n\n```\ndocker push playcrab/sinatra\n```\n> 移除镜像\n\n```\ndocker rmi playcrab/sinatra\n在删除镜像之前要先删除依赖于这个镜像的容器\n```\n\n---\n\n## 5.docker run容器的创建\n```\ndocker run -t -i ubuntu:14.04 /bin/bash\n -t让Docker分配一个伪终端并绑定到容器的标准输出上\n -i让容器的标准输入保持打开\n 交互模式下,用户可以通过所创建的终端来输入命令\n\ndocker run -d ubuntu:14.04 /bin/sh -c \"while true; do echo hello world; sleep 1; done\" \n -d让Docker容器在后台以守护态的形式运行\n - 返回一个唯一ID\n```\n---\n\n## 6.DockerFile\n> #### 基本结构\n\n- 基础镜像信息\n- 维护者信息\n- 镜像操作指令\n- 容器启动时执行指令\n\n> #### 指令\n\n```\nFROM:\n    第一条指令必须是FROM指令,如果在同一个DockerFile文件中创建多个镜像,可以使用多个FROM指令\nMAINTAINER:\n    指定维护者信息\nRUN:\n    每条RUN指令将在当前镜像基础上执行指定命令,并提交为新的镜像.命令较长时可以使用\\换行\nCMD:\n    指定启动容器时执行的命令,每个DockerFile只能有一条CMD命令.如果指定了多条,只有最后一条被执行\nEXPOSE:\n    Docker主机分配一个端口转发到指定的端口\nENV:\n    指定环境变量,会被后续RUN指令使用.并在容器运行时保持\nADD:\n    复制指定的<src>到容器的<dest>\nCOPY:\n    复制指定的<src>到容器的<dest>\nENTRYPOINT:\n    指定启动容器后执行的命令,每个DockerFile只能有一条ENTRYPOINT命令.如果指定了多条,只有最后一条被执行\nVOLUME:\n    创建可以从本地主机或其他容器挂载的挂载点,一般用来存放数据库和需要保持的数据等\nUSER:\n    指定运行容器时的用户名或UID,后续的RUN也会使用指定用户\nWORKDIR:\n    为后续的RUN,CMD,ENTRYPOINT指令配置工作目录.可以使用多个WORKDIR指令,后续命令如果参数是相对路径,则会基于之前命令指定的路径\nONBUILD:\n    配置当所创建的镜像作为其它新创建镜像的基础镜像时,所执行的操作指令\n```\n\n> #### 底层实现\n\n- 名字空间(NameSpaces)\n- 控制组(ControlGroups)\n- Union文件系统(UnionFileSystems)\n- 容器格式(ContainerFormat)\n\n","slug":"Docker的简单入门","published":1,"updated":"2019-05-31T13:15:08.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwc5ctgl0000skw755bzc4hg","content":"<h2 id=\"1-组成\"><a href=\"#1-组成\" class=\"headerlink\" title=\"1.组成\"></a>1.组成</h2><ul>\n<li>镜像</li>\n<li>容器</li>\n<li>仓库</li>\n</ul>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"2-命令\"><a href=\"#2-命令\" class=\"headerlink\" title=\"2.命令\"></a>2.命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 获取镜像 :</span><br><span class=\"line\">docker pull 仓库名:标记名(eg:docker pull ubuntu:12.04)</span><br><span class=\"line\"></span><br><span class=\"line\">- 使用镜像创建容器 :</span><br><span class=\"line\">docker run -t -i ubuntu:14.04 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">- 查看当前运行的容器(加上-a查看所有容器) :</span><br><span class=\"line\">docker container ls</span><br><span class=\"line\"></span><br><span class=\"line\">- 停止NAMES容器 :</span><br><span class=\"line\">docker container stop NAMES</span><br><span class=\"line\"></span><br><span class=\"line\">- 删除NAMES容器 :</span><br><span class=\"line\">docker container rm NAMES</span><br><span class=\"line\"></span><br><span class=\"line\">- 查看容器信息 :</span><br><span class=\"line\">docker container ps</span><br><span class=\"line\"></span><br><span class=\"line\">- 查看容器输出信息 :</span><br><span class=\"line\">docker container logs NAMES</span><br><span class=\"line\"></span><br><span class=\"line\">- 进入容器 :</span><br><span class=\"line\">docker attach NAMES</span><br><span class=\"line\"></span><br><span class=\"line\">- 查看镜像 :</span><br><span class=\"line\">docker image ls</span><br><span class=\"line\"></span><br><span class=\"line\">- 删除NAMES镜像 :</span><br><span class=\"line\">docker image rm NAMES</span><br><span class=\"line\"></span><br><span class=\"line\">- 查看镜像仓库 :</span><br><span class=\"line\">docker search centos</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"3-创建镜像\"><a href=\"#3-创建镜像\" class=\"headerlink\" title=\"3.创建镜像\"></a>3.创建镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- mkdir sinatra</span><br><span class=\"line\">- cd sinatra</span><br><span class=\"line\">- vi Dockerfile</span><br><span class=\"line\"># This is a comment</span><br><span class=\"line\">FROM ubuntu:14.04</span><br><span class=\"line\">MAINTAINER Docker jkillers &lt;980813351@qq.com&gt;</span><br><span class=\"line\">RUN apt-get -qq update</span><br><span class=\"line\">RUN gem install sinatra</span><br><span class=\"line\"></span><br><span class=\"line\">- docker build -t=&quot;playcrab/sinatra:v1&quot; .</span><br><span class=\"line\"> -t标记来添加tag,指定新的镜像的用户信息</span><br><span class=\"line\"> &quot;.&quot;是Dockerfile所在目录(当前目录)</span><br><span class=\"line\"> 一个镜像不能超过127层</span><br><span class=\"line\"> ADD命令复制本地文件到镜像</span><br><span class=\"line\"> EXPOSE命令向外部开放端口</span><br><span class=\"line\"> CMD描述容器启动后运行的程序</span><br><span class=\"line\"></span><br><span class=\"line\">ADD myApp /var/www</span><br><span class=\"line\">EXPOSE httpd port</span><br><span class=\"line\">CMD [&quot;/usr/sbin/apachectl&quot;,&quot;-D&quot;,&quot;FOREGROUND&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">- docker run -t -i playcrab/sinatra:v1 /bin/bash</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-导入导出上传移除镜像\"><a href=\"#4-导入导出上传移除镜像\" class=\"headerlink\" title=\"4.导入导出上传移除镜像\"></a>4.导入导出上传移除镜像</h2><blockquote>\n<p>导入镜像</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先下载一个镜像在本地</span><br><span class=\"line\">docker load --input ubuntu_14.04.tar</span><br><span class=\"line\">docker load &lt; ubuntu_14.04.tar</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>导出镜像</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o ubuntu_14.04.tar ubuntu:14.04</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上传镜像</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push playcrab/sinatra</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>移除镜像</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi playcrab/sinatra</span><br><span class=\"line\">在删除镜像之前要先删除依赖于这个镜像的容器</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"5-docker-run容器的创建\"><a href=\"#5-docker-run容器的创建\" class=\"headerlink\" title=\"5.docker run容器的创建\"></a>5.docker run容器的创建</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -i ubuntu:14.04 /bin/bash</span><br><span class=\"line\"> -t让Docker分配一个伪终端并绑定到容器的标准输出上</span><br><span class=\"line\"> -i让容器的标准输入保持打开</span><br><span class=\"line\"> 交互模式下,用户可以通过所创建的终端来输入命令</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d ubuntu:14.04 /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot; </span><br><span class=\"line\"> -d让Docker容器在后台以守护态的形式运行</span><br><span class=\"line\"> - 返回一个唯一ID</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"6-DockerFile\"><a href=\"#6-DockerFile\" class=\"headerlink\" title=\"6.DockerFile\"></a>6.DockerFile</h2><blockquote>\n<h4 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h4></blockquote>\n<ul>\n<li>基础镜像信息</li>\n<li>维护者信息</li>\n<li>镜像操作指令</li>\n<li>容器启动时执行指令</li>\n</ul>\n<blockquote>\n<h4 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h4></blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM:</span><br><span class=\"line\">    第一条指令必须是FROM指令,如果在同一个DockerFile文件中创建多个镜像,可以使用多个FROM指令</span><br><span class=\"line\">MAINTAINER:</span><br><span class=\"line\">    指定维护者信息</span><br><span class=\"line\">RUN:</span><br><span class=\"line\">    每条RUN指令将在当前镜像基础上执行指定命令,并提交为新的镜像.命令较长时可以使用\\换行</span><br><span class=\"line\">CMD:</span><br><span class=\"line\">    指定启动容器时执行的命令,每个DockerFile只能有一条CMD命令.如果指定了多条,只有最后一条被执行</span><br><span class=\"line\">EXPOSE:</span><br><span class=\"line\">    Docker主机分配一个端口转发到指定的端口</span><br><span class=\"line\">ENV:</span><br><span class=\"line\">    指定环境变量,会被后续RUN指令使用.并在容器运行时保持</span><br><span class=\"line\">ADD:</span><br><span class=\"line\">    复制指定的&lt;src&gt;到容器的&lt;dest&gt;</span><br><span class=\"line\">COPY:</span><br><span class=\"line\">    复制指定的&lt;src&gt;到容器的&lt;dest&gt;</span><br><span class=\"line\">ENTRYPOINT:</span><br><span class=\"line\">    指定启动容器后执行的命令,每个DockerFile只能有一条ENTRYPOINT命令.如果指定了多条,只有最后一条被执行</span><br><span class=\"line\">VOLUME:</span><br><span class=\"line\">    创建可以从本地主机或其他容器挂载的挂载点,一般用来存放数据库和需要保持的数据等</span><br><span class=\"line\">USER:</span><br><span class=\"line\">    指定运行容器时的用户名或UID,后续的RUN也会使用指定用户</span><br><span class=\"line\">WORKDIR:</span><br><span class=\"line\">    为后续的RUN,CMD,ENTRYPOINT指令配置工作目录.可以使用多个WORKDIR指令,后续命令如果参数是相对路径,则会基于之前命令指定的路径</span><br><span class=\"line\">ONBUILD:</span><br><span class=\"line\">    配置当所创建的镜像作为其它新创建镜像的基础镜像时,所执行的操作指令</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h4 id=\"底层实现\"><a href=\"#底层实现\" class=\"headerlink\" title=\"底层实现\"></a>底层实现</h4></blockquote>\n<ul>\n<li>名字空间(NameSpaces)</li>\n<li>控制组(ControlGroups)</li>\n<li>Union文件系统(UnionFileSystems)</li>\n<li>容器格式(ContainerFormat)</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-组成\"><a href=\"#1-组成\" class=\"headerlink\" title=\"1.组成\"></a>1.组成</h2><ul>\n<li>镜像</li>\n<li>容器</li>\n<li>仓库</li>\n</ul>","more":"<hr>\n<h2 id=\"2-命令\"><a href=\"#2-命令\" class=\"headerlink\" title=\"2.命令\"></a>2.命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 获取镜像 :</span><br><span class=\"line\">docker pull 仓库名:标记名(eg:docker pull ubuntu:12.04)</span><br><span class=\"line\"></span><br><span class=\"line\">- 使用镜像创建容器 :</span><br><span class=\"line\">docker run -t -i ubuntu:14.04 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">- 查看当前运行的容器(加上-a查看所有容器) :</span><br><span class=\"line\">docker container ls</span><br><span class=\"line\"></span><br><span class=\"line\">- 停止NAMES容器 :</span><br><span class=\"line\">docker container stop NAMES</span><br><span class=\"line\"></span><br><span class=\"line\">- 删除NAMES容器 :</span><br><span class=\"line\">docker container rm NAMES</span><br><span class=\"line\"></span><br><span class=\"line\">- 查看容器信息 :</span><br><span class=\"line\">docker container ps</span><br><span class=\"line\"></span><br><span class=\"line\">- 查看容器输出信息 :</span><br><span class=\"line\">docker container logs NAMES</span><br><span class=\"line\"></span><br><span class=\"line\">- 进入容器 :</span><br><span class=\"line\">docker attach NAMES</span><br><span class=\"line\"></span><br><span class=\"line\">- 查看镜像 :</span><br><span class=\"line\">docker image ls</span><br><span class=\"line\"></span><br><span class=\"line\">- 删除NAMES镜像 :</span><br><span class=\"line\">docker image rm NAMES</span><br><span class=\"line\"></span><br><span class=\"line\">- 查看镜像仓库 :</span><br><span class=\"line\">docker search centos</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"3-创建镜像\"><a href=\"#3-创建镜像\" class=\"headerlink\" title=\"3.创建镜像\"></a>3.创建镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- mkdir sinatra</span><br><span class=\"line\">- cd sinatra</span><br><span class=\"line\">- vi Dockerfile</span><br><span class=\"line\"># This is a comment</span><br><span class=\"line\">FROM ubuntu:14.04</span><br><span class=\"line\">MAINTAINER Docker jkillers &lt;980813351@qq.com&gt;</span><br><span class=\"line\">RUN apt-get -qq update</span><br><span class=\"line\">RUN gem install sinatra</span><br><span class=\"line\"></span><br><span class=\"line\">- docker build -t=&quot;playcrab/sinatra:v1&quot; .</span><br><span class=\"line\"> -t标记来添加tag,指定新的镜像的用户信息</span><br><span class=\"line\"> &quot;.&quot;是Dockerfile所在目录(当前目录)</span><br><span class=\"line\"> 一个镜像不能超过127层</span><br><span class=\"line\"> ADD命令复制本地文件到镜像</span><br><span class=\"line\"> EXPOSE命令向外部开放端口</span><br><span class=\"line\"> CMD描述容器启动后运行的程序</span><br><span class=\"line\"></span><br><span class=\"line\">ADD myApp /var/www</span><br><span class=\"line\">EXPOSE httpd port</span><br><span class=\"line\">CMD [&quot;/usr/sbin/apachectl&quot;,&quot;-D&quot;,&quot;FOREGROUND&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">- docker run -t -i playcrab/sinatra:v1 /bin/bash</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-导入导出上传移除镜像\"><a href=\"#4-导入导出上传移除镜像\" class=\"headerlink\" title=\"4.导入导出上传移除镜像\"></a>4.导入导出上传移除镜像</h2><blockquote>\n<p>导入镜像</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先下载一个镜像在本地</span><br><span class=\"line\">docker load --input ubuntu_14.04.tar</span><br><span class=\"line\">docker load &lt; ubuntu_14.04.tar</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>导出镜像</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o ubuntu_14.04.tar ubuntu:14.04</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上传镜像</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push playcrab/sinatra</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>移除镜像</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi playcrab/sinatra</span><br><span class=\"line\">在删除镜像之前要先删除依赖于这个镜像的容器</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"5-docker-run容器的创建\"><a href=\"#5-docker-run容器的创建\" class=\"headerlink\" title=\"5.docker run容器的创建\"></a>5.docker run容器的创建</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -i ubuntu:14.04 /bin/bash</span><br><span class=\"line\"> -t让Docker分配一个伪终端并绑定到容器的标准输出上</span><br><span class=\"line\"> -i让容器的标准输入保持打开</span><br><span class=\"line\"> 交互模式下,用户可以通过所创建的终端来输入命令</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d ubuntu:14.04 /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot; </span><br><span class=\"line\"> -d让Docker容器在后台以守护态的形式运行</span><br><span class=\"line\"> - 返回一个唯一ID</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"6-DockerFile\"><a href=\"#6-DockerFile\" class=\"headerlink\" title=\"6.DockerFile\"></a>6.DockerFile</h2><blockquote>\n<h4 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h4></blockquote>\n<ul>\n<li>基础镜像信息</li>\n<li>维护者信息</li>\n<li>镜像操作指令</li>\n<li>容器启动时执行指令</li>\n</ul>\n<blockquote>\n<h4 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h4></blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM:</span><br><span class=\"line\">    第一条指令必须是FROM指令,如果在同一个DockerFile文件中创建多个镜像,可以使用多个FROM指令</span><br><span class=\"line\">MAINTAINER:</span><br><span class=\"line\">    指定维护者信息</span><br><span class=\"line\">RUN:</span><br><span class=\"line\">    每条RUN指令将在当前镜像基础上执行指定命令,并提交为新的镜像.命令较长时可以使用\\换行</span><br><span class=\"line\">CMD:</span><br><span class=\"line\">    指定启动容器时执行的命令,每个DockerFile只能有一条CMD命令.如果指定了多条,只有最后一条被执行</span><br><span class=\"line\">EXPOSE:</span><br><span class=\"line\">    Docker主机分配一个端口转发到指定的端口</span><br><span class=\"line\">ENV:</span><br><span class=\"line\">    指定环境变量,会被后续RUN指令使用.并在容器运行时保持</span><br><span class=\"line\">ADD:</span><br><span class=\"line\">    复制指定的&lt;src&gt;到容器的&lt;dest&gt;</span><br><span class=\"line\">COPY:</span><br><span class=\"line\">    复制指定的&lt;src&gt;到容器的&lt;dest&gt;</span><br><span class=\"line\">ENTRYPOINT:</span><br><span class=\"line\">    指定启动容器后执行的命令,每个DockerFile只能有一条ENTRYPOINT命令.如果指定了多条,只有最后一条被执行</span><br><span class=\"line\">VOLUME:</span><br><span class=\"line\">    创建可以从本地主机或其他容器挂载的挂载点,一般用来存放数据库和需要保持的数据等</span><br><span class=\"line\">USER:</span><br><span class=\"line\">    指定运行容器时的用户名或UID,后续的RUN也会使用指定用户</span><br><span class=\"line\">WORKDIR:</span><br><span class=\"line\">    为后续的RUN,CMD,ENTRYPOINT指令配置工作目录.可以使用多个WORKDIR指令,后续命令如果参数是相对路径,则会基于之前命令指定的路径</span><br><span class=\"line\">ONBUILD:</span><br><span class=\"line\">    配置当所创建的镜像作为其它新创建镜像的基础镜像时,所执行的操作指令</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h4 id=\"底层实现\"><a href=\"#底层实现\" class=\"headerlink\" title=\"底层实现\"></a>底层实现</h4></blockquote>\n<ul>\n<li>名字空间(NameSpaces)</li>\n<li>控制组(ControlGroups)</li>\n<li>Union文件系统(UnionFileSystems)</li>\n<li>容器格式(ContainerFormat)</li>\n</ul>"},{"title":"Hexo设置Blog的分类与标签","date":"2019-05-29T14:59:01.000Z","_content":"\n## 1.添加关于页面\n```\nhexo new page \"about\"\n# 修改themes/chan/_config.yml\nnav:\n    name: 关于\n    url: /about\n```\n<!-- more -->\n## 2.添加分类-标签页面\n```\n---\ntitle: 标题\ndate: 时间\ncategories: 分类\ntags: 标签\n---\n```\n\n## 3.设置阅读全文\n```\n# 将下面语句写在需要出现的位置，自定义预览长度\n<!-- more -->\n```","source":"_posts/Hexo设置Blog的分类与标签.md","raw":"---\ntitle: Hexo设置Blog的分类与标签\ndate: 2019-05-29 22:59:01\ncategories: 使用\ntags: hexo\n---\n\n## 1.添加关于页面\n```\nhexo new page \"about\"\n# 修改themes/chan/_config.yml\nnav:\n    name: 关于\n    url: /about\n```\n<!-- more -->\n## 2.添加分类-标签页面\n```\n---\ntitle: 标题\ndate: 时间\ncategories: 分类\ntags: 标签\n---\n```\n\n## 3.设置阅读全文\n```\n# 将下面语句写在需要出现的位置，自定义预览长度\n<!-- more -->\n```","slug":"Hexo设置Blog的分类与标签","published":1,"updated":"2019-05-31T10:21:28.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwc5ctgr0001skw7jyvymt17","content":"<h2 id=\"1-添加关于页面\"><a href=\"#1-添加关于页面\" class=\"headerlink\" title=\"1.添加关于页面\"></a>1.添加关于页面</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page &quot;about&quot;</span><br><span class=\"line\"># 修改themes/chan/_config.yml</span><br><span class=\"line\">nav:</span><br><span class=\"line\">    name: 关于</span><br><span class=\"line\">    url: /about</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"2-添加分类-标签页面\"><a href=\"#2-添加分类-标签页面\" class=\"headerlink\" title=\"2.添加分类-标签页面\"></a>2.添加分类-标签页面</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标题</span><br><span class=\"line\">date: 时间</span><br><span class=\"line\">categories: 分类</span><br><span class=\"line\">tags: 标签</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-设置阅读全文\"><a href=\"#3-设置阅读全文\" class=\"headerlink\" title=\"3.设置阅读全文\"></a>3.设置阅读全文</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将下面语句写在需要出现的位置，自定义预览长度</span><br><span class=\"line\">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"1-添加关于页面\"><a href=\"#1-添加关于页面\" class=\"headerlink\" title=\"1.添加关于页面\"></a>1.添加关于页面</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page &quot;about&quot;</span><br><span class=\"line\"># 修改themes/chan/_config.yml</span><br><span class=\"line\">nav:</span><br><span class=\"line\">    name: 关于</span><br><span class=\"line\">    url: /about</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"2-添加分类-标签页面\"><a href=\"#2-添加分类-标签页面\" class=\"headerlink\" title=\"2.添加分类-标签页面\"></a>2.添加分类-标签页面</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标题</span><br><span class=\"line\">date: 时间</span><br><span class=\"line\">categories: 分类</span><br><span class=\"line\">tags: 标签</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-设置阅读全文\"><a href=\"#3-设置阅读全文\" class=\"headerlink\" title=\"3.设置阅读全文\"></a>3.设置阅读全文</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将下面语句写在需要出现的位置，自定义预览长度</span><br><span class=\"line\">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>"},{"title":"CDH5.15.1搭建与重装","date":"2019-05-31T13:22:16.000Z","_content":"\n## 系统环境[64位]\n- 操作系统: Centos\n- Cloudera Manager: 5.15.1.4\n- CDH: 5.15.1\n\n--- \n\n<!-- more -->\n\n## 下载地址\n#### Clouder Manager下载地址\n- [Clouder Manager el6 5.15.1](http://archive.cloudera.com/cm5/cm/5/cloudera-manager-el6-cm5.15.1_x86_64.tar.gz)\n\n#### CDH安装包下载地址\n- [CDH el6 5.15.1 ](http://archive.cloudera.com/cdh5/parcels/5.15.1.4/CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel)\n- [CDH el6 5.15.1 sha1](http://archive.cloudera.com/cdh5/parcels/5.15.1.4/CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel.sha1)\n- [ManiFest.json](http://archive.cloudera.com/cdh5/parcels/5.15.1.4/manifest.json)\n\n#### JDK下载地址\n- 使用1.6,1.7以外版本会警告\n- [新版本下载](https://www.oracle.com/technetwork/java/javase/downloads/index.html)\n- [老版本下载](https://www.oracle.com/technetwork/java/javase/archive-139210.html)\n\n#### MySQL下载地址\n- [MySQL yum仓库地址](https://repo.mysql.com/yum/)\n- [MySQL连接器](https://dev.mysql.com/downloads/connector/j/)\n\n---\n## 环境配置\n#### 1.网络配置\n```\nvi /etc/hosts\n192.168.163.129\thadoop01\n192.168.163.130\thadoop02\n192.168.163.131\thadoop03\n```\n\n#### 2.免密配置\n```\nssh-keygen -t rsa\ncat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\nscp ~/.ssh/authorized_keys root@hadoop02:~/.ssh/\nscp ~/.ssh/authorized_keys root@hadoop03:~/.ssh/\n```\n\n#### 3.JDK配置\n```\nrpm -qa | grep java     // 查询\nrpm -e --nodeps 包名    // 卸载\nrpm -ivh 包名           // 安装\n\necho \"JAVA_HOME=/usr/java/latest/\" >> /etc/environment\n或者\necho \"export PATH=$PATH:/usr/java/latest/bin\" >> /etc/profile\nsource /etc/profile\n```\n\n#### 4.MySQL配置\n```\nyum install mysql-server\nchkconfig mysqld on\nservice mysqld start\nmysqladmin -u root password '123456'\nmysql -u root password '123456'\ncreate database hive DEFAULT CHARSET utf8 COLLATE utf8_general_ci;\ncreate database hue DEFAULT CHARSET utf8 COLLATE utf8_general_ci;\ncreate database oozie DEFAULT CHARSET utf8 COLLATE utf8_general_ci;\ngrant all privileges on *.* to 'root'@'hadoop01' identified by '123456' with grant option;\nflush privileges;\n```\n\n#### 5.防火墙和SELinux配置\n```\nservice iptables stop   // 临时关闭\nchkconfig iptables off  // 重启后永久生效\n\nsetenforce 0            // 临时关闭\nvi /etc/selinux/config  // 重启后永久生效\nSELINUX=disabled\n```\n\n#### 6.NTP时间同步\n```\nyum install ntp\nchkconfig ntpd on\nchkconfig --list        // ntpd其中2-5为on状态就代表成功\n\nntpdate cn.pool.ntp.org\nhwclock --systohc\n\nservice ntpd start\n```\n\n---\n\n## 开始安装\n#### 1.安装Cloudera Manager Server 和Agent\n```\ntar xzvf cloudera-manager*.tar.gz\nmv cloudera /opt/\nmv cm-5.15.1 /opt/\n\n// 添加数据库连接\ncp mysql-connector-java-5.1.47-bin.jar /opt/cm-5.15.1/share/cmf/lib/   \n\n// 主节点初始化CM数据库\n/opt/cm-5.15.1/share/cmf/schema/scm_prepare_database.sh mysql cm -hlocalhost -uroot -p123456 --scm-host localhost scm scm scm\n\n// 修改Agent配置,为主节点名\nvi /opt/cm-5.15.1/etc/cloudera-scm-agent/config.ini\nserver_host=hadoop01\n\n// 分发到其他节点\nscp -r /opt/cm-5.15.1 root@hadoop02:/opt/\nscp -r /opt/cm-5.15.1 root@hadoop03:/opt/\n\n// 所有节点创建cloudera-scm用户\nuseradd --system --home=/opt/cm-5.15.1/run/cloudera-scm-server/ --no-create-home --shell=/bin/false --comment \"Cloudera SCM User\" cloudera-scm\n```\n\n#### 2.安装CDH\n##### sha1要mv成sha,否则系统会重新下载\n- CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel\n- CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel.sha1\n- manifest.json.txt\n```\n// 主节点\n/opt/cm-5.15.1/etc/init.d/cloudera-scm-server start\n// 所有节点\n/opt/cm-5.15.1/etc/init.d/cloudera-scm-agent start\n```\n\n#### 3.配置CDH\n##### 访问[http://hadoop01:7180](http://hadoop01:7180)进行配置\n```\n用户名密码均为admin\n选择CM版本\n选择Agent节点\n选择Parcel包\n耐心等待分配\n检查主机正确性\necho 0 > /proc/sys/vm/swappiness\necho never > /sys/kernel/mm/transparent_hugepage/defrag\necho never > /sys/kernel/mm/transparent_hugepage/enabled\n选择所有服务\n服务配置一般默认<zk默认只有1个节点可以调整>\n进行数据库设置\ncp mysql-connector-java-5.1.47-bin.jar /opt/cloudera/parcels/CDH-5.15.1-1.cdh5.15.1.p0.4/lib/hive/lib/\ncp mysql-connector-java-5.1.47-bin.jar /var/lib/oozie/\nyum install libxml2-python krb5-devel cyrus-sasl-gssapi cyrus-sasl-deve libxml2-devel libxslt-devel mysql mysql-devel openldap-devel python-devel python-simplejson sqlite-devel\n测试连接\n耐心等待服务启动\n安装完毕\n```\n\n---\n\n## 测试与各端口\n```\nhdfs hadoop jar /opt/cloudera/parcels/CDH/lib/hadoop-mapreduce/hadoop-mapreduce-examples.jar pi 10 100\n\nCDH\nhttp://hadoop01:7180\n\nYarn\nhttp://hadoop01:8088\n\nHue\nhttp://hadoop01:8888\n\nHDFS\nhttp://hadoop01:50070\n\nJobHistory\nhttp://hadoop01:19888\n\nHBase\nhttp://hadoop01:60010\nhttp://hadoop01:60030\n\nSpark\nhttp://hadoop01:7077\nhttp://hadoop01:8080\nhttp://hadoop01:8081\nhttp://hadoop01:4040\n```\n\n---\n\n## 重装CDH\n```\n// 删除Agent的UUID\nrm -rf /opt/cm-5.15.1/lib/cloudera-scm-agent/*\n\n// 删除主节点CM数据库\ndrop database cm;\n\n// 删除Agent节点namenode和datanode节点信息\nrm -rf /dfs/nn/*\nrm -rf /dfs/dn/*\n\n// 重新初始化CM数据库\n/opt/cm-5.15.1/share/cmf/schema/scm_prepare_database.sh mysql cm -hlocalhost -uroot -p123456 --scm-host localhost scm scm scm\n\n// 执行Server和Agent脚本\n/opt/cm-5.15.1/etc/init.d/cloudera-scm-server start\n/opt/cm-5.15.1/etc/init.d/cloudera-scm-agent start\n\n// 重新安装\nhttp://hadoop01:7180\n```\n\n---\n\n## 可能出现的问题\n#### HDFS\n```\n1.Permission denied: user=root, access=WRITE, inode=\"/user\":hdfs:supergroup:drwxr-xr-x\n解决:\necho \"export HADOOP_USER_NAME=hdfs\" >> .bash_profile\nsource .bash_profile\n\n2.WARN hdfs.DFSClient: Caught exception\n解决:\n不影响结果,暂时未找到办法\n```\n#### Hue\n```\n1.Can't Open /opt/cm-5.15.1/run/cloudera-scm-agent/process/65-hue-HUE_LOAD_BALANCER/supervisor.conf权限不足\n解决:\nchown hue:hue supervisor.conf\nchmod 666 supervisor.conf\n\n2./usr/sbin/httpd没有这个命令\n解决:\nyum install httpd.x86_64\n\n3./usr/lib64/httpd/modules/mod_ssl.so没有这个文件\n解决:\nyum -y install mod_ssl\n\n4.Could not start SASL: Error in sasl_client_start (-4) SASL(-4): no mechanism available: No worthy mechs found\n解决:\nyum install cyrus-sasl-plain cyrus-sasl-devel cyrus-sasl-gssapi\n重启Hue\n```","source":"_posts/CDH5.15.1搭建与重装.md","raw":"---\ntitle: CDH5.15.1搭建与重装\ndate: 2019-05-31 21:22:16\ncategories: 搭建\ntags: \n    - CDH\n    - 大数据\n---\n\n## 系统环境[64位]\n- 操作系统: Centos\n- Cloudera Manager: 5.15.1.4\n- CDH: 5.15.1\n\n--- \n\n<!-- more -->\n\n## 下载地址\n#### Clouder Manager下载地址\n- [Clouder Manager el6 5.15.1](http://archive.cloudera.com/cm5/cm/5/cloudera-manager-el6-cm5.15.1_x86_64.tar.gz)\n\n#### CDH安装包下载地址\n- [CDH el6 5.15.1 ](http://archive.cloudera.com/cdh5/parcels/5.15.1.4/CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel)\n- [CDH el6 5.15.1 sha1](http://archive.cloudera.com/cdh5/parcels/5.15.1.4/CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel.sha1)\n- [ManiFest.json](http://archive.cloudera.com/cdh5/parcels/5.15.1.4/manifest.json)\n\n#### JDK下载地址\n- 使用1.6,1.7以外版本会警告\n- [新版本下载](https://www.oracle.com/technetwork/java/javase/downloads/index.html)\n- [老版本下载](https://www.oracle.com/technetwork/java/javase/archive-139210.html)\n\n#### MySQL下载地址\n- [MySQL yum仓库地址](https://repo.mysql.com/yum/)\n- [MySQL连接器](https://dev.mysql.com/downloads/connector/j/)\n\n---\n## 环境配置\n#### 1.网络配置\n```\nvi /etc/hosts\n192.168.163.129\thadoop01\n192.168.163.130\thadoop02\n192.168.163.131\thadoop03\n```\n\n#### 2.免密配置\n```\nssh-keygen -t rsa\ncat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\nscp ~/.ssh/authorized_keys root@hadoop02:~/.ssh/\nscp ~/.ssh/authorized_keys root@hadoop03:~/.ssh/\n```\n\n#### 3.JDK配置\n```\nrpm -qa | grep java     // 查询\nrpm -e --nodeps 包名    // 卸载\nrpm -ivh 包名           // 安装\n\necho \"JAVA_HOME=/usr/java/latest/\" >> /etc/environment\n或者\necho \"export PATH=$PATH:/usr/java/latest/bin\" >> /etc/profile\nsource /etc/profile\n```\n\n#### 4.MySQL配置\n```\nyum install mysql-server\nchkconfig mysqld on\nservice mysqld start\nmysqladmin -u root password '123456'\nmysql -u root password '123456'\ncreate database hive DEFAULT CHARSET utf8 COLLATE utf8_general_ci;\ncreate database hue DEFAULT CHARSET utf8 COLLATE utf8_general_ci;\ncreate database oozie DEFAULT CHARSET utf8 COLLATE utf8_general_ci;\ngrant all privileges on *.* to 'root'@'hadoop01' identified by '123456' with grant option;\nflush privileges;\n```\n\n#### 5.防火墙和SELinux配置\n```\nservice iptables stop   // 临时关闭\nchkconfig iptables off  // 重启后永久生效\n\nsetenforce 0            // 临时关闭\nvi /etc/selinux/config  // 重启后永久生效\nSELINUX=disabled\n```\n\n#### 6.NTP时间同步\n```\nyum install ntp\nchkconfig ntpd on\nchkconfig --list        // ntpd其中2-5为on状态就代表成功\n\nntpdate cn.pool.ntp.org\nhwclock --systohc\n\nservice ntpd start\n```\n\n---\n\n## 开始安装\n#### 1.安装Cloudera Manager Server 和Agent\n```\ntar xzvf cloudera-manager*.tar.gz\nmv cloudera /opt/\nmv cm-5.15.1 /opt/\n\n// 添加数据库连接\ncp mysql-connector-java-5.1.47-bin.jar /opt/cm-5.15.1/share/cmf/lib/   \n\n// 主节点初始化CM数据库\n/opt/cm-5.15.1/share/cmf/schema/scm_prepare_database.sh mysql cm -hlocalhost -uroot -p123456 --scm-host localhost scm scm scm\n\n// 修改Agent配置,为主节点名\nvi /opt/cm-5.15.1/etc/cloudera-scm-agent/config.ini\nserver_host=hadoop01\n\n// 分发到其他节点\nscp -r /opt/cm-5.15.1 root@hadoop02:/opt/\nscp -r /opt/cm-5.15.1 root@hadoop03:/opt/\n\n// 所有节点创建cloudera-scm用户\nuseradd --system --home=/opt/cm-5.15.1/run/cloudera-scm-server/ --no-create-home --shell=/bin/false --comment \"Cloudera SCM User\" cloudera-scm\n```\n\n#### 2.安装CDH\n##### sha1要mv成sha,否则系统会重新下载\n- CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel\n- CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel.sha1\n- manifest.json.txt\n```\n// 主节点\n/opt/cm-5.15.1/etc/init.d/cloudera-scm-server start\n// 所有节点\n/opt/cm-5.15.1/etc/init.d/cloudera-scm-agent start\n```\n\n#### 3.配置CDH\n##### 访问[http://hadoop01:7180](http://hadoop01:7180)进行配置\n```\n用户名密码均为admin\n选择CM版本\n选择Agent节点\n选择Parcel包\n耐心等待分配\n检查主机正确性\necho 0 > /proc/sys/vm/swappiness\necho never > /sys/kernel/mm/transparent_hugepage/defrag\necho never > /sys/kernel/mm/transparent_hugepage/enabled\n选择所有服务\n服务配置一般默认<zk默认只有1个节点可以调整>\n进行数据库设置\ncp mysql-connector-java-5.1.47-bin.jar /opt/cloudera/parcels/CDH-5.15.1-1.cdh5.15.1.p0.4/lib/hive/lib/\ncp mysql-connector-java-5.1.47-bin.jar /var/lib/oozie/\nyum install libxml2-python krb5-devel cyrus-sasl-gssapi cyrus-sasl-deve libxml2-devel libxslt-devel mysql mysql-devel openldap-devel python-devel python-simplejson sqlite-devel\n测试连接\n耐心等待服务启动\n安装完毕\n```\n\n---\n\n## 测试与各端口\n```\nhdfs hadoop jar /opt/cloudera/parcels/CDH/lib/hadoop-mapreduce/hadoop-mapreduce-examples.jar pi 10 100\n\nCDH\nhttp://hadoop01:7180\n\nYarn\nhttp://hadoop01:8088\n\nHue\nhttp://hadoop01:8888\n\nHDFS\nhttp://hadoop01:50070\n\nJobHistory\nhttp://hadoop01:19888\n\nHBase\nhttp://hadoop01:60010\nhttp://hadoop01:60030\n\nSpark\nhttp://hadoop01:7077\nhttp://hadoop01:8080\nhttp://hadoop01:8081\nhttp://hadoop01:4040\n```\n\n---\n\n## 重装CDH\n```\n// 删除Agent的UUID\nrm -rf /opt/cm-5.15.1/lib/cloudera-scm-agent/*\n\n// 删除主节点CM数据库\ndrop database cm;\n\n// 删除Agent节点namenode和datanode节点信息\nrm -rf /dfs/nn/*\nrm -rf /dfs/dn/*\n\n// 重新初始化CM数据库\n/opt/cm-5.15.1/share/cmf/schema/scm_prepare_database.sh mysql cm -hlocalhost -uroot -p123456 --scm-host localhost scm scm scm\n\n// 执行Server和Agent脚本\n/opt/cm-5.15.1/etc/init.d/cloudera-scm-server start\n/opt/cm-5.15.1/etc/init.d/cloudera-scm-agent start\n\n// 重新安装\nhttp://hadoop01:7180\n```\n\n---\n\n## 可能出现的问题\n#### HDFS\n```\n1.Permission denied: user=root, access=WRITE, inode=\"/user\":hdfs:supergroup:drwxr-xr-x\n解决:\necho \"export HADOOP_USER_NAME=hdfs\" >> .bash_profile\nsource .bash_profile\n\n2.WARN hdfs.DFSClient: Caught exception\n解决:\n不影响结果,暂时未找到办法\n```\n#### Hue\n```\n1.Can't Open /opt/cm-5.15.1/run/cloudera-scm-agent/process/65-hue-HUE_LOAD_BALANCER/supervisor.conf权限不足\n解决:\nchown hue:hue supervisor.conf\nchmod 666 supervisor.conf\n\n2./usr/sbin/httpd没有这个命令\n解决:\nyum install httpd.x86_64\n\n3./usr/lib64/httpd/modules/mod_ssl.so没有这个文件\n解决:\nyum -y install mod_ssl\n\n4.Could not start SASL: Error in sasl_client_start (-4) SASL(-4): no mechanism available: No worthy mechs found\n解决:\nyum install cyrus-sasl-plain cyrus-sasl-devel cyrus-sasl-gssapi\n重启Hue\n```","slug":"CDH5.15.1搭建与重装","published":1,"updated":"2019-05-31T13:23:46.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwc5ctgv0003skw7gibimd55","content":"<h2 id=\"系统环境-64位\"><a href=\"#系统环境-64位\" class=\"headerlink\" title=\"系统环境[64位]\"></a>系统环境[64位]</h2><ul>\n<li>操作系统: Centos</li>\n<li>Cloudera Manager: 5.15.1.4</li>\n<li>CDH: 5.15.1</li>\n</ul>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h2><h4 id=\"Clouder-Manager下载地址\"><a href=\"#Clouder-Manager下载地址\" class=\"headerlink\" title=\"Clouder Manager下载地址\"></a>Clouder Manager下载地址</h4><ul>\n<li><a href=\"http://archive.cloudera.com/cm5/cm/5/cloudera-manager-el6-cm5.15.1_x86_64.tar.gz\" target=\"_blank\" rel=\"noopener\">Clouder Manager el6 5.15.1</a></li>\n</ul>\n<h4 id=\"CDH安装包下载地址\"><a href=\"#CDH安装包下载地址\" class=\"headerlink\" title=\"CDH安装包下载地址\"></a>CDH安装包下载地址</h4><ul>\n<li><a href=\"http://archive.cloudera.com/cdh5/parcels/5.15.1.4/CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel\" target=\"_blank\" rel=\"noopener\">CDH el6 5.15.1 </a></li>\n<li><a href=\"http://archive.cloudera.com/cdh5/parcels/5.15.1.4/CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel.sha1\" target=\"_blank\" rel=\"noopener\">CDH el6 5.15.1 sha1</a></li>\n<li><a href=\"http://archive.cloudera.com/cdh5/parcels/5.15.1.4/manifest.json\" target=\"_blank\" rel=\"noopener\">ManiFest.json</a></li>\n</ul>\n<h4 id=\"JDK下载地址\"><a href=\"#JDK下载地址\" class=\"headerlink\" title=\"JDK下载地址\"></a>JDK下载地址</h4><ul>\n<li>使用1.6,1.7以外版本会警告</li>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">新版本下载</a></li>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/archive-139210.html\" target=\"_blank\" rel=\"noopener\">老版本下载</a></li>\n</ul>\n<h4 id=\"MySQL下载地址\"><a href=\"#MySQL下载地址\" class=\"headerlink\" title=\"MySQL下载地址\"></a>MySQL下载地址</h4><ul>\n<li><a href=\"https://repo.mysql.com/yum/\" target=\"_blank\" rel=\"noopener\">MySQL yum仓库地址</a></li>\n<li><a href=\"https://dev.mysql.com/downloads/connector/j/\" target=\"_blank\" rel=\"noopener\">MySQL连接器</a></li>\n</ul>\n<hr>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><h4 id=\"1-网络配置\"><a href=\"#1-网络配置\" class=\"headerlink\" title=\"1.网络配置\"></a>1.网络配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/hosts</span><br><span class=\"line\">192.168.163.129\thadoop01</span><br><span class=\"line\">192.168.163.130\thadoop02</span><br><span class=\"line\">192.168.163.131\thadoop03</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-免密配置\"><a href=\"#2-免密配置\" class=\"headerlink\" title=\"2.免密配置\"></a>2.免密配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod 600 ~/.ssh/authorized_keys</span><br><span class=\"line\">scp ~/.ssh/authorized_keys root@hadoop02:~/.ssh/</span><br><span class=\"line\">scp ~/.ssh/authorized_keys root@hadoop03:~/.ssh/</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-JDK配置\"><a href=\"#3-JDK配置\" class=\"headerlink\" title=\"3.JDK配置\"></a>3.JDK配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep java     // 查询</span><br><span class=\"line\">rpm -e --nodeps 包名    // 卸载</span><br><span class=\"line\">rpm -ivh 包名           // 安装</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;JAVA_HOME=/usr/java/latest/&quot; &gt;&gt; /etc/environment</span><br><span class=\"line\">或者</span><br><span class=\"line\">echo &quot;export PATH=$PATH:/usr/java/latest/bin&quot; &gt;&gt; /etc/profile</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-MySQL配置\"><a href=\"#4-MySQL配置\" class=\"headerlink\" title=\"4.MySQL配置\"></a>4.MySQL配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql-server</span><br><span class=\"line\">chkconfig mysqld on</span><br><span class=\"line\">service mysqld start</span><br><span class=\"line\">mysqladmin -u root password &apos;123456&apos;</span><br><span class=\"line\">mysql -u root password &apos;123456&apos;</span><br><span class=\"line\">create database hive DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class=\"line\">create database hue DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class=\"line\">create database oozie DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class=\"line\">grant all privileges on *.* to &apos;root&apos;@&apos;hadoop01&apos; identified by &apos;123456&apos; with grant option;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-防火墙和SELinux配置\"><a href=\"#5-防火墙和SELinux配置\" class=\"headerlink\" title=\"5.防火墙和SELinux配置\"></a>5.防火墙和SELinux配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop   // 临时关闭</span><br><span class=\"line\">chkconfig iptables off  // 重启后永久生效</span><br><span class=\"line\"></span><br><span class=\"line\">setenforce 0            // 临时关闭</span><br><span class=\"line\">vi /etc/selinux/config  // 重启后永久生效</span><br><span class=\"line\">SELINUX=disabled</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-NTP时间同步\"><a href=\"#6-NTP时间同步\" class=\"headerlink\" title=\"6.NTP时间同步\"></a>6.NTP时间同步</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ntp</span><br><span class=\"line\">chkconfig ntpd on</span><br><span class=\"line\">chkconfig --list        // ntpd其中2-5为on状态就代表成功</span><br><span class=\"line\"></span><br><span class=\"line\">ntpdate cn.pool.ntp.org</span><br><span class=\"line\">hwclock --systohc</span><br><span class=\"line\"></span><br><span class=\"line\">service ntpd start</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h2><h4 id=\"1-安装Cloudera-Manager-Server-和Agent\"><a href=\"#1-安装Cloudera-Manager-Server-和Agent\" class=\"headerlink\" title=\"1.安装Cloudera Manager Server 和Agent\"></a>1.安装Cloudera Manager Server 和Agent</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzvf cloudera-manager*.tar.gz</span><br><span class=\"line\">mv cloudera /opt/</span><br><span class=\"line\">mv cm-5.15.1 /opt/</span><br><span class=\"line\"></span><br><span class=\"line\">// 添加数据库连接</span><br><span class=\"line\">cp mysql-connector-java-5.1.47-bin.jar /opt/cm-5.15.1/share/cmf/lib/   </span><br><span class=\"line\"></span><br><span class=\"line\">// 主节点初始化CM数据库</span><br><span class=\"line\">/opt/cm-5.15.1/share/cmf/schema/scm_prepare_database.sh mysql cm -hlocalhost -uroot -p123456 --scm-host localhost scm scm scm</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改Agent配置,为主节点名</span><br><span class=\"line\">vi /opt/cm-5.15.1/etc/cloudera-scm-agent/config.ini</span><br><span class=\"line\">server_host=hadoop01</span><br><span class=\"line\"></span><br><span class=\"line\">// 分发到其他节点</span><br><span class=\"line\">scp -r /opt/cm-5.15.1 root@hadoop02:/opt/</span><br><span class=\"line\">scp -r /opt/cm-5.15.1 root@hadoop03:/opt/</span><br><span class=\"line\"></span><br><span class=\"line\">// 所有节点创建cloudera-scm用户</span><br><span class=\"line\">useradd --system --home=/opt/cm-5.15.1/run/cloudera-scm-server/ --no-create-home --shell=/bin/false --comment &quot;Cloudera SCM User&quot; cloudera-scm</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-安装CDH\"><a href=\"#2-安装CDH\" class=\"headerlink\" title=\"2.安装CDH\"></a>2.安装CDH</h4><h5 id=\"sha1要mv成sha-否则系统会重新下载\"><a href=\"#sha1要mv成sha-否则系统会重新下载\" class=\"headerlink\" title=\"sha1要mv成sha,否则系统会重新下载\"></a>sha1要mv成sha,否则系统会重新下载</h5><ul>\n<li>CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel</li>\n<li>CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel.sha1</li>\n<li>manifest.json.txt<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 主节点</span><br><span class=\"line\">/opt/cm-5.15.1/etc/init.d/cloudera-scm-server start</span><br><span class=\"line\">// 所有节点</span><br><span class=\"line\">/opt/cm-5.15.1/etc/init.d/cloudera-scm-agent start</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3-配置CDH\"><a href=\"#3-配置CDH\" class=\"headerlink\" title=\"3.配置CDH\"></a>3.配置CDH</h4><h5 id=\"访问http-hadoop01-7180进行配置\"><a href=\"#访问http-hadoop01-7180进行配置\" class=\"headerlink\" title=\"访问http://hadoop01:7180进行配置\"></a>访问<a href=\"http://hadoop01:7180\" target=\"_blank\" rel=\"noopener\">http://hadoop01:7180</a>进行配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户名密码均为admin</span><br><span class=\"line\">选择CM版本</span><br><span class=\"line\">选择Agent节点</span><br><span class=\"line\">选择Parcel包</span><br><span class=\"line\">耐心等待分配</span><br><span class=\"line\">检查主机正确性</span><br><span class=\"line\">echo 0 &gt; /proc/sys/vm/swappiness</span><br><span class=\"line\">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class=\"line\">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class=\"line\">选择所有服务</span><br><span class=\"line\">服务配置一般默认&lt;zk默认只有1个节点可以调整&gt;</span><br><span class=\"line\">进行数据库设置</span><br><span class=\"line\">cp mysql-connector-java-5.1.47-bin.jar /opt/cloudera/parcels/CDH-5.15.1-1.cdh5.15.1.p0.4/lib/hive/lib/</span><br><span class=\"line\">cp mysql-connector-java-5.1.47-bin.jar /var/lib/oozie/</span><br><span class=\"line\">yum install libxml2-python krb5-devel cyrus-sasl-gssapi cyrus-sasl-deve libxml2-devel libxslt-devel mysql mysql-devel openldap-devel python-devel python-simplejson sqlite-devel</span><br><span class=\"line\">测试连接</span><br><span class=\"line\">耐心等待服务启动</span><br><span class=\"line\">安装完毕</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"测试与各端口\"><a href=\"#测试与各端口\" class=\"headerlink\" title=\"测试与各端口\"></a>测试与各端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hdfs hadoop jar /opt/cloudera/parcels/CDH/lib/hadoop-mapreduce/hadoop-mapreduce-examples.jar pi 10 100</span><br><span class=\"line\"></span><br><span class=\"line\">CDH</span><br><span class=\"line\">http://hadoop01:7180</span><br><span class=\"line\"></span><br><span class=\"line\">Yarn</span><br><span class=\"line\">http://hadoop01:8088</span><br><span class=\"line\"></span><br><span class=\"line\">Hue</span><br><span class=\"line\">http://hadoop01:8888</span><br><span class=\"line\"></span><br><span class=\"line\">HDFS</span><br><span class=\"line\">http://hadoop01:50070</span><br><span class=\"line\"></span><br><span class=\"line\">JobHistory</span><br><span class=\"line\">http://hadoop01:19888</span><br><span class=\"line\"></span><br><span class=\"line\">HBase</span><br><span class=\"line\">http://hadoop01:60010</span><br><span class=\"line\">http://hadoop01:60030</span><br><span class=\"line\"></span><br><span class=\"line\">Spark</span><br><span class=\"line\">http://hadoop01:7077</span><br><span class=\"line\">http://hadoop01:8080</span><br><span class=\"line\">http://hadoop01:8081</span><br><span class=\"line\">http://hadoop01:4040</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"重装CDH\"><a href=\"#重装CDH\" class=\"headerlink\" title=\"重装CDH\"></a>重装CDH</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 删除Agent的UUID</span><br><span class=\"line\">rm -rf /opt/cm-5.15.1/lib/cloudera-scm-agent/*</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除主节点CM数据库</span><br><span class=\"line\">drop database cm;</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除Agent节点namenode和datanode节点信息</span><br><span class=\"line\">rm -rf /dfs/nn/*</span><br><span class=\"line\">rm -rf /dfs/dn/*</span><br><span class=\"line\"></span><br><span class=\"line\">// 重新初始化CM数据库</span><br><span class=\"line\">/opt/cm-5.15.1/share/cmf/schema/scm_prepare_database.sh mysql cm -hlocalhost -uroot -p123456 --scm-host localhost scm scm scm</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行Server和Agent脚本</span><br><span class=\"line\">/opt/cm-5.15.1/etc/init.d/cloudera-scm-server start</span><br><span class=\"line\">/opt/cm-5.15.1/etc/init.d/cloudera-scm-agent start</span><br><span class=\"line\"></span><br><span class=\"line\">// 重新安装</span><br><span class=\"line\">http://hadoop01:7180</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"可能出现的问题\"><a href=\"#可能出现的问题\" class=\"headerlink\" title=\"可能出现的问题\"></a>可能出现的问题</h2><h4 id=\"HDFS\"><a href=\"#HDFS\" class=\"headerlink\" title=\"HDFS\"></a>HDFS</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Permission denied: user=root, access=WRITE, inode=&quot;/user&quot;:hdfs:supergroup:drwxr-xr-x</span><br><span class=\"line\">解决:</span><br><span class=\"line\">echo &quot;export HADOOP_USER_NAME=hdfs&quot; &gt;&gt; .bash_profile</span><br><span class=\"line\">source .bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\">2.WARN hdfs.DFSClient: Caught exception</span><br><span class=\"line\">解决:</span><br><span class=\"line\">不影响结果,暂时未找到办法</span><br></pre></td></tr></table></figure>\n<h4 id=\"Hue\"><a href=\"#Hue\" class=\"headerlink\" title=\"Hue\"></a>Hue</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Can&apos;t Open /opt/cm-5.15.1/run/cloudera-scm-agent/process/65-hue-HUE_LOAD_BALANCER/supervisor.conf权限不足</span><br><span class=\"line\">解决:</span><br><span class=\"line\">chown hue:hue supervisor.conf</span><br><span class=\"line\">chmod 666 supervisor.conf</span><br><span class=\"line\"></span><br><span class=\"line\">2./usr/sbin/httpd没有这个命令</span><br><span class=\"line\">解决:</span><br><span class=\"line\">yum install httpd.x86_64</span><br><span class=\"line\"></span><br><span class=\"line\">3./usr/lib64/httpd/modules/mod_ssl.so没有这个文件</span><br><span class=\"line\">解决:</span><br><span class=\"line\">yum -y install mod_ssl</span><br><span class=\"line\"></span><br><span class=\"line\">4.Could not start SASL: Error in sasl_client_start (-4) SASL(-4): no mechanism available: No worthy mechs found</span><br><span class=\"line\">解决:</span><br><span class=\"line\">yum install cyrus-sasl-plain cyrus-sasl-devel cyrus-sasl-gssapi</span><br><span class=\"line\">重启Hue</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"系统环境-64位\"><a href=\"#系统环境-64位\" class=\"headerlink\" title=\"系统环境[64位]\"></a>系统环境[64位]</h2><ul>\n<li>操作系统: Centos</li>\n<li>Cloudera Manager: 5.15.1.4</li>\n<li>CDH: 5.15.1</li>\n</ul>\n<hr>","more":"<h2 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h2><h4 id=\"Clouder-Manager下载地址\"><a href=\"#Clouder-Manager下载地址\" class=\"headerlink\" title=\"Clouder Manager下载地址\"></a>Clouder Manager下载地址</h4><ul>\n<li><a href=\"http://archive.cloudera.com/cm5/cm/5/cloudera-manager-el6-cm5.15.1_x86_64.tar.gz\" target=\"_blank\" rel=\"noopener\">Clouder Manager el6 5.15.1</a></li>\n</ul>\n<h4 id=\"CDH安装包下载地址\"><a href=\"#CDH安装包下载地址\" class=\"headerlink\" title=\"CDH安装包下载地址\"></a>CDH安装包下载地址</h4><ul>\n<li><a href=\"http://archive.cloudera.com/cdh5/parcels/5.15.1.4/CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel\" target=\"_blank\" rel=\"noopener\">CDH el6 5.15.1 </a></li>\n<li><a href=\"http://archive.cloudera.com/cdh5/parcels/5.15.1.4/CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel.sha1\" target=\"_blank\" rel=\"noopener\">CDH el6 5.15.1 sha1</a></li>\n<li><a href=\"http://archive.cloudera.com/cdh5/parcels/5.15.1.4/manifest.json\" target=\"_blank\" rel=\"noopener\">ManiFest.json</a></li>\n</ul>\n<h4 id=\"JDK下载地址\"><a href=\"#JDK下载地址\" class=\"headerlink\" title=\"JDK下载地址\"></a>JDK下载地址</h4><ul>\n<li>使用1.6,1.7以外版本会警告</li>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">新版本下载</a></li>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/archive-139210.html\" target=\"_blank\" rel=\"noopener\">老版本下载</a></li>\n</ul>\n<h4 id=\"MySQL下载地址\"><a href=\"#MySQL下载地址\" class=\"headerlink\" title=\"MySQL下载地址\"></a>MySQL下载地址</h4><ul>\n<li><a href=\"https://repo.mysql.com/yum/\" target=\"_blank\" rel=\"noopener\">MySQL yum仓库地址</a></li>\n<li><a href=\"https://dev.mysql.com/downloads/connector/j/\" target=\"_blank\" rel=\"noopener\">MySQL连接器</a></li>\n</ul>\n<hr>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><h4 id=\"1-网络配置\"><a href=\"#1-网络配置\" class=\"headerlink\" title=\"1.网络配置\"></a>1.网络配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/hosts</span><br><span class=\"line\">192.168.163.129\thadoop01</span><br><span class=\"line\">192.168.163.130\thadoop02</span><br><span class=\"line\">192.168.163.131\thadoop03</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-免密配置\"><a href=\"#2-免密配置\" class=\"headerlink\" title=\"2.免密配置\"></a>2.免密配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class=\"line\">chmod 600 ~/.ssh/authorized_keys</span><br><span class=\"line\">scp ~/.ssh/authorized_keys root@hadoop02:~/.ssh/</span><br><span class=\"line\">scp ~/.ssh/authorized_keys root@hadoop03:~/.ssh/</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-JDK配置\"><a href=\"#3-JDK配置\" class=\"headerlink\" title=\"3.JDK配置\"></a>3.JDK配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep java     // 查询</span><br><span class=\"line\">rpm -e --nodeps 包名    // 卸载</span><br><span class=\"line\">rpm -ivh 包名           // 安装</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;JAVA_HOME=/usr/java/latest/&quot; &gt;&gt; /etc/environment</span><br><span class=\"line\">或者</span><br><span class=\"line\">echo &quot;export PATH=$PATH:/usr/java/latest/bin&quot; &gt;&gt; /etc/profile</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-MySQL配置\"><a href=\"#4-MySQL配置\" class=\"headerlink\" title=\"4.MySQL配置\"></a>4.MySQL配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql-server</span><br><span class=\"line\">chkconfig mysqld on</span><br><span class=\"line\">service mysqld start</span><br><span class=\"line\">mysqladmin -u root password &apos;123456&apos;</span><br><span class=\"line\">mysql -u root password &apos;123456&apos;</span><br><span class=\"line\">create database hive DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class=\"line\">create database hue DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class=\"line\">create database oozie DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class=\"line\">grant all privileges on *.* to &apos;root&apos;@&apos;hadoop01&apos; identified by &apos;123456&apos; with grant option;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-防火墙和SELinux配置\"><a href=\"#5-防火墙和SELinux配置\" class=\"headerlink\" title=\"5.防火墙和SELinux配置\"></a>5.防火墙和SELinux配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop   // 临时关闭</span><br><span class=\"line\">chkconfig iptables off  // 重启后永久生效</span><br><span class=\"line\"></span><br><span class=\"line\">setenforce 0            // 临时关闭</span><br><span class=\"line\">vi /etc/selinux/config  // 重启后永久生效</span><br><span class=\"line\">SELINUX=disabled</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-NTP时间同步\"><a href=\"#6-NTP时间同步\" class=\"headerlink\" title=\"6.NTP时间同步\"></a>6.NTP时间同步</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ntp</span><br><span class=\"line\">chkconfig ntpd on</span><br><span class=\"line\">chkconfig --list        // ntpd其中2-5为on状态就代表成功</span><br><span class=\"line\"></span><br><span class=\"line\">ntpdate cn.pool.ntp.org</span><br><span class=\"line\">hwclock --systohc</span><br><span class=\"line\"></span><br><span class=\"line\">service ntpd start</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h2><h4 id=\"1-安装Cloudera-Manager-Server-和Agent\"><a href=\"#1-安装Cloudera-Manager-Server-和Agent\" class=\"headerlink\" title=\"1.安装Cloudera Manager Server 和Agent\"></a>1.安装Cloudera Manager Server 和Agent</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzvf cloudera-manager*.tar.gz</span><br><span class=\"line\">mv cloudera /opt/</span><br><span class=\"line\">mv cm-5.15.1 /opt/</span><br><span class=\"line\"></span><br><span class=\"line\">// 添加数据库连接</span><br><span class=\"line\">cp mysql-connector-java-5.1.47-bin.jar /opt/cm-5.15.1/share/cmf/lib/   </span><br><span class=\"line\"></span><br><span class=\"line\">// 主节点初始化CM数据库</span><br><span class=\"line\">/opt/cm-5.15.1/share/cmf/schema/scm_prepare_database.sh mysql cm -hlocalhost -uroot -p123456 --scm-host localhost scm scm scm</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改Agent配置,为主节点名</span><br><span class=\"line\">vi /opt/cm-5.15.1/etc/cloudera-scm-agent/config.ini</span><br><span class=\"line\">server_host=hadoop01</span><br><span class=\"line\"></span><br><span class=\"line\">// 分发到其他节点</span><br><span class=\"line\">scp -r /opt/cm-5.15.1 root@hadoop02:/opt/</span><br><span class=\"line\">scp -r /opt/cm-5.15.1 root@hadoop03:/opt/</span><br><span class=\"line\"></span><br><span class=\"line\">// 所有节点创建cloudera-scm用户</span><br><span class=\"line\">useradd --system --home=/opt/cm-5.15.1/run/cloudera-scm-server/ --no-create-home --shell=/bin/false --comment &quot;Cloudera SCM User&quot; cloudera-scm</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-安装CDH\"><a href=\"#2-安装CDH\" class=\"headerlink\" title=\"2.安装CDH\"></a>2.安装CDH</h4><h5 id=\"sha1要mv成sha-否则系统会重新下载\"><a href=\"#sha1要mv成sha-否则系统会重新下载\" class=\"headerlink\" title=\"sha1要mv成sha,否则系统会重新下载\"></a>sha1要mv成sha,否则系统会重新下载</h5><ul>\n<li>CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel</li>\n<li>CDH-5.15.1-1.cdh5.15.1.p0.4-el6.parcel.sha1</li>\n<li>manifest.json.txt<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 主节点</span><br><span class=\"line\">/opt/cm-5.15.1/etc/init.d/cloudera-scm-server start</span><br><span class=\"line\">// 所有节点</span><br><span class=\"line\">/opt/cm-5.15.1/etc/init.d/cloudera-scm-agent start</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3-配置CDH\"><a href=\"#3-配置CDH\" class=\"headerlink\" title=\"3.配置CDH\"></a>3.配置CDH</h4><h5 id=\"访问http-hadoop01-7180进行配置\"><a href=\"#访问http-hadoop01-7180进行配置\" class=\"headerlink\" title=\"访问http://hadoop01:7180进行配置\"></a>访问<a href=\"http://hadoop01:7180\" target=\"_blank\" rel=\"noopener\">http://hadoop01:7180</a>进行配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户名密码均为admin</span><br><span class=\"line\">选择CM版本</span><br><span class=\"line\">选择Agent节点</span><br><span class=\"line\">选择Parcel包</span><br><span class=\"line\">耐心等待分配</span><br><span class=\"line\">检查主机正确性</span><br><span class=\"line\">echo 0 &gt; /proc/sys/vm/swappiness</span><br><span class=\"line\">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class=\"line\">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class=\"line\">选择所有服务</span><br><span class=\"line\">服务配置一般默认&lt;zk默认只有1个节点可以调整&gt;</span><br><span class=\"line\">进行数据库设置</span><br><span class=\"line\">cp mysql-connector-java-5.1.47-bin.jar /opt/cloudera/parcels/CDH-5.15.1-1.cdh5.15.1.p0.4/lib/hive/lib/</span><br><span class=\"line\">cp mysql-connector-java-5.1.47-bin.jar /var/lib/oozie/</span><br><span class=\"line\">yum install libxml2-python krb5-devel cyrus-sasl-gssapi cyrus-sasl-deve libxml2-devel libxslt-devel mysql mysql-devel openldap-devel python-devel python-simplejson sqlite-devel</span><br><span class=\"line\">测试连接</span><br><span class=\"line\">耐心等待服务启动</span><br><span class=\"line\">安装完毕</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"测试与各端口\"><a href=\"#测试与各端口\" class=\"headerlink\" title=\"测试与各端口\"></a>测试与各端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hdfs hadoop jar /opt/cloudera/parcels/CDH/lib/hadoop-mapreduce/hadoop-mapreduce-examples.jar pi 10 100</span><br><span class=\"line\"></span><br><span class=\"line\">CDH</span><br><span class=\"line\">http://hadoop01:7180</span><br><span class=\"line\"></span><br><span class=\"line\">Yarn</span><br><span class=\"line\">http://hadoop01:8088</span><br><span class=\"line\"></span><br><span class=\"line\">Hue</span><br><span class=\"line\">http://hadoop01:8888</span><br><span class=\"line\"></span><br><span class=\"line\">HDFS</span><br><span class=\"line\">http://hadoop01:50070</span><br><span class=\"line\"></span><br><span class=\"line\">JobHistory</span><br><span class=\"line\">http://hadoop01:19888</span><br><span class=\"line\"></span><br><span class=\"line\">HBase</span><br><span class=\"line\">http://hadoop01:60010</span><br><span class=\"line\">http://hadoop01:60030</span><br><span class=\"line\"></span><br><span class=\"line\">Spark</span><br><span class=\"line\">http://hadoop01:7077</span><br><span class=\"line\">http://hadoop01:8080</span><br><span class=\"line\">http://hadoop01:8081</span><br><span class=\"line\">http://hadoop01:4040</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"重装CDH\"><a href=\"#重装CDH\" class=\"headerlink\" title=\"重装CDH\"></a>重装CDH</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 删除Agent的UUID</span><br><span class=\"line\">rm -rf /opt/cm-5.15.1/lib/cloudera-scm-agent/*</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除主节点CM数据库</span><br><span class=\"line\">drop database cm;</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除Agent节点namenode和datanode节点信息</span><br><span class=\"line\">rm -rf /dfs/nn/*</span><br><span class=\"line\">rm -rf /dfs/dn/*</span><br><span class=\"line\"></span><br><span class=\"line\">// 重新初始化CM数据库</span><br><span class=\"line\">/opt/cm-5.15.1/share/cmf/schema/scm_prepare_database.sh mysql cm -hlocalhost -uroot -p123456 --scm-host localhost scm scm scm</span><br><span class=\"line\"></span><br><span class=\"line\">// 执行Server和Agent脚本</span><br><span class=\"line\">/opt/cm-5.15.1/etc/init.d/cloudera-scm-server start</span><br><span class=\"line\">/opt/cm-5.15.1/etc/init.d/cloudera-scm-agent start</span><br><span class=\"line\"></span><br><span class=\"line\">// 重新安装</span><br><span class=\"line\">http://hadoop01:7180</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"可能出现的问题\"><a href=\"#可能出现的问题\" class=\"headerlink\" title=\"可能出现的问题\"></a>可能出现的问题</h2><h4 id=\"HDFS\"><a href=\"#HDFS\" class=\"headerlink\" title=\"HDFS\"></a>HDFS</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Permission denied: user=root, access=WRITE, inode=&quot;/user&quot;:hdfs:supergroup:drwxr-xr-x</span><br><span class=\"line\">解决:</span><br><span class=\"line\">echo &quot;export HADOOP_USER_NAME=hdfs&quot; &gt;&gt; .bash_profile</span><br><span class=\"line\">source .bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\">2.WARN hdfs.DFSClient: Caught exception</span><br><span class=\"line\">解决:</span><br><span class=\"line\">不影响结果,暂时未找到办法</span><br></pre></td></tr></table></figure>\n<h4 id=\"Hue\"><a href=\"#Hue\" class=\"headerlink\" title=\"Hue\"></a>Hue</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Can&apos;t Open /opt/cm-5.15.1/run/cloudera-scm-agent/process/65-hue-HUE_LOAD_BALANCER/supervisor.conf权限不足</span><br><span class=\"line\">解决:</span><br><span class=\"line\">chown hue:hue supervisor.conf</span><br><span class=\"line\">chmod 666 supervisor.conf</span><br><span class=\"line\"></span><br><span class=\"line\">2./usr/sbin/httpd没有这个命令</span><br><span class=\"line\">解决:</span><br><span class=\"line\">yum install httpd.x86_64</span><br><span class=\"line\"></span><br><span class=\"line\">3./usr/lib64/httpd/modules/mod_ssl.so没有这个文件</span><br><span class=\"line\">解决:</span><br><span class=\"line\">yum -y install mod_ssl</span><br><span class=\"line\"></span><br><span class=\"line\">4.Could not start SASL: Error in sasl_client_start (-4) SASL(-4): no mechanism available: No worthy mechs found</span><br><span class=\"line\">解决:</span><br><span class=\"line\">yum install cyrus-sasl-plain cyrus-sasl-devel cyrus-sasl-gssapi</span><br><span class=\"line\">重启Hue</span><br></pre></td></tr></table></figure>"},{"title":"Hexo+Github搭建个人Blog","date":"2019-05-29T13:59:01.000Z","_content":"## 1.环境安装\n- 下载Git\n- 下载Node.js\n- 下载HexoEditor\n- **注意：**Git，Node.js和HexoEditor都已经下载好在[Github](https://github.com/jxeditor/jxeditor.github.io)上\n\n<!-- more -->\n## 2.Hexo安装命令与免密配置\n- 进入blog的文件夹\n- 右键Git Bash Here\n- 执行下列命令\n\n```bash\n# 根据具体node的安装目录而定，设置全局module和缓存\nnpm config set prefix \"C:/Program Files/nodejs/npm_global\"\nnpm config set cache \"C:/Program Files/nodejs/npm_cache\"\n# 设置系统变量和用户变量（Windows）\n系统变量NODE_PATH=C:/Program Files/nodejs/npm_global/node_modules\n用户变量PATH=C:/Program Files/nodejs/npm_global\n\nnpm install -g hexo-cli\nnpm install hexo-deployer-git --save\n\nssh-keygen -t rsa -C \"账号\"\n# 复制~/.ssh/id_rsa.pub内容\n# 添加到GitHub的ssh key\n\n# 修改git remote的模式\ngit remote -v\n# 将https方式修改成主机:仓库的形式\ngit remote add origin https://github.com/jxeditor/jxeditor.github.io.git\ngit remote rm origin\ngit remote add origin git@github.com:jxeditor/jxeditor.github.io.git\n```\n\n## 3.启动Hexo\n```bash\n# 修改目录配置文件_config.yml的deploy\ndeploy:\n  type: git\n  repository: git@github.com:jxeditor/jxeditor.github.io.git\n  branch: master\nhexo g # 生成静态页面\nhexo s # 启动本地服务\nhexo d # 部署到远程\n```\n\n## 4.Git初始化并将项目推送到分支\n```bash\n# 将项目推送到GitHub的分支\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\ngit init\ngit remote add origin https://github.com/jxeditor/jxeditor.github.io.git\ngit pull origin 远程分支 # 远程分支没有可以不进行拉取\n# 进行一系列操作\ngit add *\ngit commit -m \"注释\"\ngit push origin 本地分支:远程分支\n```\n\n## 5.Git进行push时项目含有子项目\n```bash\n# 删除子项目的.git文件夹\ngit rm --cached file_path\ngit add file_path\ngit commit -m \"注释\"\ngit push origin 分支\n```\n\n## 6.Git新建切换分支\n```bash\ngit branch 分支\ngit checkout 分支\n```\n\n## 7.Git出现error:failed to push some refs ...\n```\n# 原因是远程分支有文件，但是本地进行文件操作时，并没有去拉去远程文件\ngit pull origin 分支\n# 进行一系列修改\ngit add *\ngit commit -m \"注释\"\ngit push origin 分支\n```\n\n## 8.Git大文件上传\n```bash\ngit lfs install\ngit lfs track \"*.psd\" # 追踪规则，后缀psd文件超过限制\ngit add .gitattributes\ngit add file.psd\ngit commit -m \"Add design file\"\ngit push origin 本地分支:远程分支\n```\n","source":"_posts/Hexo+Github搭建个人Blog.md","raw":"---\ntitle: Hexo+Github搭建个人Blog\ndate: 2019-05-29 21:59:01\ncategories: 搭建\ntags: \n    - hexo\n    - git\n---\n## 1.环境安装\n- 下载Git\n- 下载Node.js\n- 下载HexoEditor\n- **注意：**Git，Node.js和HexoEditor都已经下载好在[Github](https://github.com/jxeditor/jxeditor.github.io)上\n\n<!-- more -->\n## 2.Hexo安装命令与免密配置\n- 进入blog的文件夹\n- 右键Git Bash Here\n- 执行下列命令\n\n```bash\n# 根据具体node的安装目录而定，设置全局module和缓存\nnpm config set prefix \"C:/Program Files/nodejs/npm_global\"\nnpm config set cache \"C:/Program Files/nodejs/npm_cache\"\n# 设置系统变量和用户变量（Windows）\n系统变量NODE_PATH=C:/Program Files/nodejs/npm_global/node_modules\n用户变量PATH=C:/Program Files/nodejs/npm_global\n\nnpm install -g hexo-cli\nnpm install hexo-deployer-git --save\n\nssh-keygen -t rsa -C \"账号\"\n# 复制~/.ssh/id_rsa.pub内容\n# 添加到GitHub的ssh key\n\n# 修改git remote的模式\ngit remote -v\n# 将https方式修改成主机:仓库的形式\ngit remote add origin https://github.com/jxeditor/jxeditor.github.io.git\ngit remote rm origin\ngit remote add origin git@github.com:jxeditor/jxeditor.github.io.git\n```\n\n## 3.启动Hexo\n```bash\n# 修改目录配置文件_config.yml的deploy\ndeploy:\n  type: git\n  repository: git@github.com:jxeditor/jxeditor.github.io.git\n  branch: master\nhexo g # 生成静态页面\nhexo s # 启动本地服务\nhexo d # 部署到远程\n```\n\n## 4.Git初始化并将项目推送到分支\n```bash\n# 将项目推送到GitHub的分支\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\ngit init\ngit remote add origin https://github.com/jxeditor/jxeditor.github.io.git\ngit pull origin 远程分支 # 远程分支没有可以不进行拉取\n# 进行一系列操作\ngit add *\ngit commit -m \"注释\"\ngit push origin 本地分支:远程分支\n```\n\n## 5.Git进行push时项目含有子项目\n```bash\n# 删除子项目的.git文件夹\ngit rm --cached file_path\ngit add file_path\ngit commit -m \"注释\"\ngit push origin 分支\n```\n\n## 6.Git新建切换分支\n```bash\ngit branch 分支\ngit checkout 分支\n```\n\n## 7.Git出现error:failed to push some refs ...\n```\n# 原因是远程分支有文件，但是本地进行文件操作时，并没有去拉去远程文件\ngit pull origin 分支\n# 进行一系列修改\ngit add *\ngit commit -m \"注释\"\ngit push origin 分支\n```\n\n## 8.Git大文件上传\n```bash\ngit lfs install\ngit lfs track \"*.psd\" # 追踪规则，后缀psd文件超过限制\ngit add .gitattributes\ngit add file.psd\ngit commit -m \"Add design file\"\ngit push origin 本地分支:远程分支\n```\n","slug":"Hexo+Github搭建个人Blog","published":1,"updated":"2019-05-31T10:21:28.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwc5ctgy0005skw7w3cpkeyn","content":"<h2 id=\"1-环境安装\"><a href=\"#1-环境安装\" class=\"headerlink\" title=\"1.环境安装\"></a>1.环境安装</h2><ul>\n<li>下载Git</li>\n<li>下载Node.js</li>\n<li>下载HexoEditor</li>\n<li><strong>注意：</strong>Git，Node.js和HexoEditor都已经下载好在<a href=\"https://github.com/jxeditor/jxeditor.github.io\" target=\"_blank\" rel=\"noopener\">Github</a>上</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"2-Hexo安装命令与免密配置\"><a href=\"#2-Hexo安装命令与免密配置\" class=\"headerlink\" title=\"2.Hexo安装命令与免密配置\"></a>2.Hexo安装命令与免密配置</h2><ul>\n<li>进入blog的文件夹</li>\n<li>右键Git Bash Here</li>\n<li>执行下列命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 根据具体node的安装目录而定，设置全局module和缓存</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> prefix <span class=\"string\">\"C:/Program Files/nodejs/npm_global\"</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> cache <span class=\"string\">\"C:/Program Files/nodejs/npm_cache\"</span></span><br><span class=\"line\"><span class=\"comment\"># 设置系统变量和用户变量（Windows）</span></span><br><span class=\"line\">系统变量NODE_PATH=C:/Program Files/nodejs/npm_global/node_modules</span><br><span class=\"line\">用户变量PATH=C:/Program Files/nodejs/npm_global</span><br><span class=\"line\"></span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\"></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"账号\"</span></span><br><span class=\"line\"><span class=\"comment\"># 复制~/.ssh/id_rsa.pub内容</span></span><br><span class=\"line\"><span class=\"comment\"># 添加到GitHub的ssh key</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改git remote的模式</span></span><br><span class=\"line\">git remote -v</span><br><span class=\"line\"><span class=\"comment\"># 将https方式修改成主机:仓库的形式</span></span><br><span class=\"line\">git remote add origin https://github.com/jxeditor/jxeditor.github.io.git</span><br><span class=\"line\">git remote rm origin</span><br><span class=\"line\">git remote add origin git@github.com:jxeditor/jxeditor.github.io.git</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-启动Hexo\"><a href=\"#3-启动Hexo\" class=\"headerlink\" title=\"3.启动Hexo\"></a>3.启动Hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改目录配置文件_config.yml的deploy</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repository: git@github.com:jxeditor/jxeditor.github.io.git</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">hexo g <span class=\"comment\"># 生成静态页面</span></span><br><span class=\"line\">hexo s <span class=\"comment\"># 启动本地服务</span></span><br><span class=\"line\">hexo d <span class=\"comment\"># 部署到远程</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-Git初始化并将项目推送到分支\"><a href=\"#4-Git初始化并将项目推送到分支\" class=\"headerlink\" title=\"4.Git初始化并将项目推送到分支\"></a>4.Git初始化并将项目推送到分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将项目推送到GitHub的分支</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"you@example.com\"</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin https://github.com/jxeditor/jxeditor.github.io.git</span><br><span class=\"line\">git pull origin 远程分支 <span class=\"comment\"># 远程分支没有可以不进行拉取</span></span><br><span class=\"line\"><span class=\"comment\"># 进行一系列操作</span></span><br><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m <span class=\"string\">\"注释\"</span></span><br><span class=\"line\">git push origin 本地分支:远程分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-Git进行push时项目含有子项目\"><a href=\"#5-Git进行push时项目含有子项目\" class=\"headerlink\" title=\"5.Git进行push时项目含有子项目\"></a>5.Git进行push时项目含有子项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除子项目的.git文件夹</span></span><br><span class=\"line\">git rm --cached file_path</span><br><span class=\"line\">git add file_path</span><br><span class=\"line\">git commit -m <span class=\"string\">\"注释\"</span></span><br><span class=\"line\">git push origin 分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-Git新建切换分支\"><a href=\"#6-Git新建切换分支\" class=\"headerlink\" title=\"6.Git新建切换分支\"></a>6.Git新建切换分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 分支</span><br><span class=\"line\">git checkout 分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-Git出现error-failed-to-push-some-refs-…\"><a href=\"#7-Git出现error-failed-to-push-some-refs-…\" class=\"headerlink\" title=\"7.Git出现error:failed to push some refs …\"></a>7.Git出现error:failed to push some refs …</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 原因是远程分支有文件，但是本地进行文件操作时，并没有去拉去远程文件</span><br><span class=\"line\">git pull origin 分支</span><br><span class=\"line\"># 进行一系列修改</span><br><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m &quot;注释&quot;</span><br><span class=\"line\">git push origin 分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-Git大文件上传\"><a href=\"#8-Git大文件上传\" class=\"headerlink\" title=\"8.Git大文件上传\"></a>8.Git大文件上传</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs install</span><br><span class=\"line\">git lfs track <span class=\"string\">\"*.psd\"</span> <span class=\"comment\"># 追踪规则，后缀psd文件超过限制</span></span><br><span class=\"line\">git add .gitattributes</span><br><span class=\"line\">git add file.psd</span><br><span class=\"line\">git commit -m <span class=\"string\">\"Add design file\"</span></span><br><span class=\"line\">git push origin 本地分支:远程分支</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-环境安装\"><a href=\"#1-环境安装\" class=\"headerlink\" title=\"1.环境安装\"></a>1.环境安装</h2><ul>\n<li>下载Git</li>\n<li>下载Node.js</li>\n<li>下载HexoEditor</li>\n<li><strong>注意：</strong>Git，Node.js和HexoEditor都已经下载好在<a href=\"https://github.com/jxeditor/jxeditor.github.io\" target=\"_blank\" rel=\"noopener\">Github</a>上</li>\n</ul>","more":"<h2 id=\"2-Hexo安装命令与免密配置\"><a href=\"#2-Hexo安装命令与免密配置\" class=\"headerlink\" title=\"2.Hexo安装命令与免密配置\"></a>2.Hexo安装命令与免密配置</h2><ul>\n<li>进入blog的文件夹</li>\n<li>右键Git Bash Here</li>\n<li>执行下列命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 根据具体node的安装目录而定，设置全局module和缓存</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> prefix <span class=\"string\">\"C:/Program Files/nodejs/npm_global\"</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> cache <span class=\"string\">\"C:/Program Files/nodejs/npm_cache\"</span></span><br><span class=\"line\"><span class=\"comment\"># 设置系统变量和用户变量（Windows）</span></span><br><span class=\"line\">系统变量NODE_PATH=C:/Program Files/nodejs/npm_global/node_modules</span><br><span class=\"line\">用户变量PATH=C:/Program Files/nodejs/npm_global</span><br><span class=\"line\"></span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\"></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"账号\"</span></span><br><span class=\"line\"><span class=\"comment\"># 复制~/.ssh/id_rsa.pub内容</span></span><br><span class=\"line\"><span class=\"comment\"># 添加到GitHub的ssh key</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改git remote的模式</span></span><br><span class=\"line\">git remote -v</span><br><span class=\"line\"><span class=\"comment\"># 将https方式修改成主机:仓库的形式</span></span><br><span class=\"line\">git remote add origin https://github.com/jxeditor/jxeditor.github.io.git</span><br><span class=\"line\">git remote rm origin</span><br><span class=\"line\">git remote add origin git@github.com:jxeditor/jxeditor.github.io.git</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-启动Hexo\"><a href=\"#3-启动Hexo\" class=\"headerlink\" title=\"3.启动Hexo\"></a>3.启动Hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改目录配置文件_config.yml的deploy</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repository: git@github.com:jxeditor/jxeditor.github.io.git</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">hexo g <span class=\"comment\"># 生成静态页面</span></span><br><span class=\"line\">hexo s <span class=\"comment\"># 启动本地服务</span></span><br><span class=\"line\">hexo d <span class=\"comment\"># 部署到远程</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-Git初始化并将项目推送到分支\"><a href=\"#4-Git初始化并将项目推送到分支\" class=\"headerlink\" title=\"4.Git初始化并将项目推送到分支\"></a>4.Git初始化并将项目推送到分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将项目推送到GitHub的分支</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"you@example.com\"</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin https://github.com/jxeditor/jxeditor.github.io.git</span><br><span class=\"line\">git pull origin 远程分支 <span class=\"comment\"># 远程分支没有可以不进行拉取</span></span><br><span class=\"line\"><span class=\"comment\"># 进行一系列操作</span></span><br><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m <span class=\"string\">\"注释\"</span></span><br><span class=\"line\">git push origin 本地分支:远程分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-Git进行push时项目含有子项目\"><a href=\"#5-Git进行push时项目含有子项目\" class=\"headerlink\" title=\"5.Git进行push时项目含有子项目\"></a>5.Git进行push时项目含有子项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除子项目的.git文件夹</span></span><br><span class=\"line\">git rm --cached file_path</span><br><span class=\"line\">git add file_path</span><br><span class=\"line\">git commit -m <span class=\"string\">\"注释\"</span></span><br><span class=\"line\">git push origin 分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-Git新建切换分支\"><a href=\"#6-Git新建切换分支\" class=\"headerlink\" title=\"6.Git新建切换分支\"></a>6.Git新建切换分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch 分支</span><br><span class=\"line\">git checkout 分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-Git出现error-failed-to-push-some-refs-…\"><a href=\"#7-Git出现error-failed-to-push-some-refs-…\" class=\"headerlink\" title=\"7.Git出现error:failed to push some refs …\"></a>7.Git出现error:failed to push some refs …</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 原因是远程分支有文件，但是本地进行文件操作时，并没有去拉去远程文件</span><br><span class=\"line\">git pull origin 分支</span><br><span class=\"line\"># 进行一系列修改</span><br><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m &quot;注释&quot;</span><br><span class=\"line\">git push origin 分支</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-Git大文件上传\"><a href=\"#8-Git大文件上传\" class=\"headerlink\" title=\"8.Git大文件上传\"></a>8.Git大文件上传</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs install</span><br><span class=\"line\">git lfs track <span class=\"string\">\"*.psd\"</span> <span class=\"comment\"># 追踪规则，后缀psd文件超过限制</span></span><br><span class=\"line\">git add .gitattributes</span><br><span class=\"line\">git add file.psd</span><br><span class=\"line\">git commit -m <span class=\"string\">\"Add design file\"</span></span><br><span class=\"line\">git push origin 本地分支:远程分支</span><br></pre></td></tr></table></figure>"},{"title":"MVN命令","date":"2019-05-31T10:45:52.000Z","_content":"## 1.安装包\n```\n# 能够下载到jar包的情况\n1. 首先下载Maven无法加载的jar包\n2. 执行mvn命令\nmvn install:install-file\n-DgroupId=com.oracle    # groupId\n-DartifactId=ojdbc14 #artifactId\n-Dversion=10.2.0.4.0    # 版本号\n-Dpackaging=jar # 打包方式\n-Dfile=已下载的jar位置\n\n# 只能下载到工程文件的情况\n1. 首先下载源代码\n2. 进入工程目录<与src同级目录>\n3. 执行mvn命令\nmvn install -Dmaven.test.skip=true\n```\n\n<!-- more -->\n\n---\n\n## 2.项目打包\n```\nmvn clear package\n```\n","source":"_posts/MVN命令.md","raw":"---\ntitle: MVN命令\ndate: 2019-05-31 18:45:52\ncategories: 命令\ntags: mvn\n---\n## 1.安装包\n```\n# 能够下载到jar包的情况\n1. 首先下载Maven无法加载的jar包\n2. 执行mvn命令\nmvn install:install-file\n-DgroupId=com.oracle    # groupId\n-DartifactId=ojdbc14 #artifactId\n-Dversion=10.2.0.4.0    # 版本号\n-Dpackaging=jar # 打包方式\n-Dfile=已下载的jar位置\n\n# 只能下载到工程文件的情况\n1. 首先下载源代码\n2. 进入工程目录<与src同级目录>\n3. 执行mvn命令\nmvn install -Dmaven.test.skip=true\n```\n\n<!-- more -->\n\n---\n\n## 2.项目打包\n```\nmvn clear package\n```\n","slug":"MVN命令","published":1,"updated":"2019-05-31T13:15:23.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwc5cth10006skw72fkv7jtm","content":"<h2 id=\"1-安装包\"><a href=\"#1-安装包\" class=\"headerlink\" title=\"1.安装包\"></a>1.安装包</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 能够下载到jar包的情况</span><br><span class=\"line\">1. 首先下载Maven无法加载的jar包</span><br><span class=\"line\">2. 执行mvn命令</span><br><span class=\"line\">mvn install:install-file</span><br><span class=\"line\">-DgroupId=com.oracle    # groupId</span><br><span class=\"line\">-DartifactId=ojdbc14 #artifactId</span><br><span class=\"line\">-Dversion=10.2.0.4.0    # 版本号</span><br><span class=\"line\">-Dpackaging=jar # 打包方式</span><br><span class=\"line\">-Dfile=已下载的jar位置</span><br><span class=\"line\"></span><br><span class=\"line\"># 只能下载到工程文件的情况</span><br><span class=\"line\">1. 首先下载源代码</span><br><span class=\"line\">2. 进入工程目录&lt;与src同级目录&gt;</span><br><span class=\"line\">3. 执行mvn命令</span><br><span class=\"line\">mvn install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"2-项目打包\"><a href=\"#2-项目打包\" class=\"headerlink\" title=\"2.项目打包\"></a>2.项目打包</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clear package</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-安装包\"><a href=\"#1-安装包\" class=\"headerlink\" title=\"1.安装包\"></a>1.安装包</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 能够下载到jar包的情况</span><br><span class=\"line\">1. 首先下载Maven无法加载的jar包</span><br><span class=\"line\">2. 执行mvn命令</span><br><span class=\"line\">mvn install:install-file</span><br><span class=\"line\">-DgroupId=com.oracle    # groupId</span><br><span class=\"line\">-DartifactId=ojdbc14 #artifactId</span><br><span class=\"line\">-Dversion=10.2.0.4.0    # 版本号</span><br><span class=\"line\">-Dpackaging=jar # 打包方式</span><br><span class=\"line\">-Dfile=已下载的jar位置</span><br><span class=\"line\"></span><br><span class=\"line\"># 只能下载到工程文件的情况</span><br><span class=\"line\">1. 首先下载源代码</span><br><span class=\"line\">2. 进入工程目录&lt;与src同级目录&gt;</span><br><span class=\"line\">3. 执行mvn命令</span><br><span class=\"line\">mvn install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>","more":"<hr>\n<h2 id=\"2-项目打包\"><a href=\"#2-项目打包\" class=\"headerlink\" title=\"2.项目打包\"></a>2.项目打包</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clear package</span><br></pre></td></tr></table></figure>"},{"title":"Linux防火墙限制","date":"2019-05-31T13:16:39.000Z","_content":"## 防火墙的限制\n### 1. 限制只允许指定IP访问指定端口\n```\n-A INPUT -m state --state NEW -m tcp -p tcp -s 127.0.0.1 --dport 22,3306,8080 -j ACCEPT\n```\n\n<!-- more -->\n\n---\n\n### 2. 白名单设置\n```\n#定义白名单变量名\n-N whitelist\n#设置白名单ip段\n-A whitelist -s 120.25.122.0 -j ACCEPT\n-A whitelist -s 120.25.122.1 -j ACCEPT\n\n#系统远程连接及数据库端口规定白名单ip才可访问\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j whitelist\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 1521 -j whitelist\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j whitelist\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j whitelist\n```\n\n---\n\n### 3. 保存防火墙设置\n```\nservice iptables save\nservice iptables restart\n```","source":"_posts/Linux防火墙限制.md","raw":"---\ntitle: Linux防火墙限制\ndate: 2019-05-31 21:16:39\ncategories: 运维\ntags: Linux\n---\n## 防火墙的限制\n### 1. 限制只允许指定IP访问指定端口\n```\n-A INPUT -m state --state NEW -m tcp -p tcp -s 127.0.0.1 --dport 22,3306,8080 -j ACCEPT\n```\n\n<!-- more -->\n\n---\n\n### 2. 白名单设置\n```\n#定义白名单变量名\n-N whitelist\n#设置白名单ip段\n-A whitelist -s 120.25.122.0 -j ACCEPT\n-A whitelist -s 120.25.122.1 -j ACCEPT\n\n#系统远程连接及数据库端口规定白名单ip才可访问\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j whitelist\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 1521 -j whitelist\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j whitelist\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j whitelist\n```\n\n---\n\n### 3. 保存防火墙设置\n```\nservice iptables save\nservice iptables restart\n```","slug":"Linux防火墙限制","published":1,"updated":"2019-05-31T13:18:48.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwc5cth50009skw7m5ggnwri","content":"<h2 id=\"防火墙的限制\"><a href=\"#防火墙的限制\" class=\"headerlink\" title=\"防火墙的限制\"></a>防火墙的限制</h2><h3 id=\"1-限制只允许指定IP访问指定端口\"><a href=\"#1-限制只允许指定IP访问指定端口\" class=\"headerlink\" title=\"1. 限制只允许指定IP访问指定端口\"></a>1. 限制只允许指定IP访问指定端口</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp -s 127.0.0.1 --dport 22,3306,8080 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"2-白名单设置\"><a href=\"#2-白名单设置\" class=\"headerlink\" title=\"2. 白名单设置\"></a>2. 白名单设置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#定义白名单变量名</span><br><span class=\"line\">-N whitelist</span><br><span class=\"line\">#设置白名单ip段</span><br><span class=\"line\">-A whitelist -s 120.25.122.0 -j ACCEPT</span><br><span class=\"line\">-A whitelist -s 120.25.122.1 -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\">#系统远程连接及数据库端口规定白名单ip才可访问</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j whitelist</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 1521 -j whitelist</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j whitelist</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j whitelist</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"3-保存防火墙设置\"><a href=\"#3-保存防火墙设置\" class=\"headerlink\" title=\"3. 保存防火墙设置\"></a>3. 保存防火墙设置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables save</span><br><span class=\"line\">service iptables restart</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"防火墙的限制\"><a href=\"#防火墙的限制\" class=\"headerlink\" title=\"防火墙的限制\"></a>防火墙的限制</h2><h3 id=\"1-限制只允许指定IP访问指定端口\"><a href=\"#1-限制只允许指定IP访问指定端口\" class=\"headerlink\" title=\"1. 限制只允许指定IP访问指定端口\"></a>1. 限制只允许指定IP访问指定端口</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp -s 127.0.0.1 --dport 22,3306,8080 -j ACCEPT</span><br></pre></td></tr></table></figure>","more":"<hr>\n<h3 id=\"2-白名单设置\"><a href=\"#2-白名单设置\" class=\"headerlink\" title=\"2. 白名单设置\"></a>2. 白名单设置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#定义白名单变量名</span><br><span class=\"line\">-N whitelist</span><br><span class=\"line\">#设置白名单ip段</span><br><span class=\"line\">-A whitelist -s 120.25.122.0 -j ACCEPT</span><br><span class=\"line\">-A whitelist -s 120.25.122.1 -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\">#系统远程连接及数据库端口规定白名单ip才可访问</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j whitelist</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 1521 -j whitelist</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j whitelist</span><br><span class=\"line\">-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j whitelist</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"3-保存防火墙设置\"><a href=\"#3-保存防火墙设置\" class=\"headerlink\" title=\"3. 保存防火墙设置\"></a>3. 保存防火墙设置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables save</span><br><span class=\"line\">service iptables restart</span><br></pre></td></tr></table></figure>"},{"title":"Spark[RDD-DataFrame-DataSet]","date":"2019-05-31T13:29:45.000Z","_content":"### 一. Spark2.x创建Spark对象\n```\nval spark = SparkSession\n            .builder\n            .appName(\"\")\n            .enableHiveSupport()\n            .getOrCreate()\n```\n---\n<!-- more -->\n### 二. RDD,DataFrame和DataSet\n#### 1. RDD\n**优缺点**\n```\n优点:\n    编译时类型安全,编译时能检查出类型错误\n    面向对象的编程风格,直接通过类名点的方式来操作数据\n缺点:\n    序列化和反序列化的性能开销,无论是集群间的通信还是IO操作都需要对对象的结构和数据进行序列化和反序列化\n    GC的性能开销,频繁的创建和销毁对象,势必会增加GC\n```\n\n#### 2. DataFrame\n**核心特征**\n> **Schema:** \n    包含了以ROW为单位的每行数据的列的信息;Spark通过Schema就能够读懂数据,因此在通信和IO时只需要序列化和反序列化数据,不需要考虑结构部分\n\n> **off_heap:** \n    Spark能够以二进制的形式序列化数据(不包含结构)到off-heap中,当要操作数据时,就直接操作off-heap内存\n\n> **Tungsten:**\n    新的执行引擎\n\n> **Catalyst:** \n    新的语法解析框架\n\n**优缺点**\n```\n\n优点:\n    对外off-heap就像地盘,schema就像地图,spark有地图又有自己的地盘,就可以自己说了算,不再受jvm的限制,也就不再受GC的困扰,通过schema和off-heap,DataFrame解决了RDD的缺点\n    对比RDD提升了计算效率,减少数据读取,底层计算优化\n缺点:\n    DataFrame解决了RDD的缺点,但是丢失了RDD的优点\n    DataFrame不是类型安全的\n    API也不是面向对象风格\n总结:\n    在效率上得到了优化,但是在代码编写上需要仔细\n```\n\n#### 3. DataSet\n**核心特征(Encoder)**\n> 编译时的类型安全检查,性能极大的提升,内存使用极大降低,减少GC,极大的减少了网络数据的传输,极大的减少采用scala和java编程代码的差异性\n\n> DataFrame每一行对应一个Row,而DataSet的定义更加宽松,每一个record对应了一个任意的类型,DataFrame只是DataSet的一种特例\n\n> 不同于Row是一个泛化的无类型JVM object,DataSet是由一系列的强类型JVM object组成的,Scala的case class或者java class定义.因此DataSet可以在变异时进行类型检查\n\n> DataSet以Catalyst逻辑执行计划表示,并且数据以编码的二进制形式被存储,不需要反序列化就可以执行sorting,shuffle等操作\n\n> DataSet创立需要一个显式的Encoder,把对象序列化为二进制","source":"_posts/Spark[RDD-DataFrame-DataSet].md","raw":"---\ntitle: Spark[RDD-DataFrame-DataSet]\ndate: 2019-05-31 21:29:45\ncategories: 大数据\ntags: \n    - spark\n    - 大数据\n---\n### 一. Spark2.x创建Spark对象\n```\nval spark = SparkSession\n            .builder\n            .appName(\"\")\n            .enableHiveSupport()\n            .getOrCreate()\n```\n---\n<!-- more -->\n### 二. RDD,DataFrame和DataSet\n#### 1. RDD\n**优缺点**\n```\n优点:\n    编译时类型安全,编译时能检查出类型错误\n    面向对象的编程风格,直接通过类名点的方式来操作数据\n缺点:\n    序列化和反序列化的性能开销,无论是集群间的通信还是IO操作都需要对对象的结构和数据进行序列化和反序列化\n    GC的性能开销,频繁的创建和销毁对象,势必会增加GC\n```\n\n#### 2. DataFrame\n**核心特征**\n> **Schema:** \n    包含了以ROW为单位的每行数据的列的信息;Spark通过Schema就能够读懂数据,因此在通信和IO时只需要序列化和反序列化数据,不需要考虑结构部分\n\n> **off_heap:** \n    Spark能够以二进制的形式序列化数据(不包含结构)到off-heap中,当要操作数据时,就直接操作off-heap内存\n\n> **Tungsten:**\n    新的执行引擎\n\n> **Catalyst:** \n    新的语法解析框架\n\n**优缺点**\n```\n\n优点:\n    对外off-heap就像地盘,schema就像地图,spark有地图又有自己的地盘,就可以自己说了算,不再受jvm的限制,也就不再受GC的困扰,通过schema和off-heap,DataFrame解决了RDD的缺点\n    对比RDD提升了计算效率,减少数据读取,底层计算优化\n缺点:\n    DataFrame解决了RDD的缺点,但是丢失了RDD的优点\n    DataFrame不是类型安全的\n    API也不是面向对象风格\n总结:\n    在效率上得到了优化,但是在代码编写上需要仔细\n```\n\n#### 3. DataSet\n**核心特征(Encoder)**\n> 编译时的类型安全检查,性能极大的提升,内存使用极大降低,减少GC,极大的减少了网络数据的传输,极大的减少采用scala和java编程代码的差异性\n\n> DataFrame每一行对应一个Row,而DataSet的定义更加宽松,每一个record对应了一个任意的类型,DataFrame只是DataSet的一种特例\n\n> 不同于Row是一个泛化的无类型JVM object,DataSet是由一系列的强类型JVM object组成的,Scala的case class或者java class定义.因此DataSet可以在变异时进行类型检查\n\n> DataSet以Catalyst逻辑执行计划表示,并且数据以编码的二进制形式被存储,不需要反序列化就可以执行sorting,shuffle等操作\n\n> DataSet创立需要一个显式的Encoder,把对象序列化为二进制","slug":"Spark[RDD-DataFrame-DataSet]","published":1,"updated":"2019-05-31T13:31:53.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwc5cth8000bskw7woj86yuf","content":"<h3 id=\"一-Spark2-x创建Spark对象\"><a href=\"#一-Spark2-x创建Spark对象\" class=\"headerlink\" title=\"一. Spark2.x创建Spark对象\"></a>一. Spark2.x创建Spark对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val spark = SparkSession</span><br><span class=\"line\">            .builder</span><br><span class=\"line\">            .appName(&quot;&quot;)</span><br><span class=\"line\">            .enableHiveSupport()</span><br><span class=\"line\">            .getOrCreate()</span><br></pre></td></tr></table></figure>\n<hr>\n<a id=\"more\"></a>\n<h3 id=\"二-RDD-DataFrame和DataSet\"><a href=\"#二-RDD-DataFrame和DataSet\" class=\"headerlink\" title=\"二. RDD,DataFrame和DataSet\"></a>二. RDD,DataFrame和DataSet</h3><h4 id=\"1-RDD\"><a href=\"#1-RDD\" class=\"headerlink\" title=\"1. RDD\"></a>1. RDD</h4><p><strong>优缺点</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">优点:</span><br><span class=\"line\">    编译时类型安全,编译时能检查出类型错误</span><br><span class=\"line\">    面向对象的编程风格,直接通过类名点的方式来操作数据</span><br><span class=\"line\">缺点:</span><br><span class=\"line\">    序列化和反序列化的性能开销,无论是集群间的通信还是IO操作都需要对对象的结构和数据进行序列化和反序列化</span><br><span class=\"line\">    GC的性能开销,频繁的创建和销毁对象,势必会增加GC</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-DataFrame\"><a href=\"#2-DataFrame\" class=\"headerlink\" title=\"2. DataFrame\"></a>2. DataFrame</h4><p><strong>核心特征</strong></p>\n<blockquote>\n<p><strong>Schema:</strong><br>    包含了以ROW为单位的每行数据的列的信息;Spark通过Schema就能够读懂数据,因此在通信和IO时只需要序列化和反序列化数据,不需要考虑结构部分</p>\n</blockquote>\n<blockquote>\n<p><strong>off_heap:</strong><br>    Spark能够以二进制的形式序列化数据(不包含结构)到off-heap中,当要操作数据时,就直接操作off-heap内存</p>\n</blockquote>\n<blockquote>\n<p><strong>Tungsten:</strong><br>    新的执行引擎</p>\n</blockquote>\n<blockquote>\n<p><strong>Catalyst:</strong><br>    新的语法解析框架</p>\n</blockquote>\n<p><strong>优缺点</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">优点:</span><br><span class=\"line\">    对外off-heap就像地盘,schema就像地图,spark有地图又有自己的地盘,就可以自己说了算,不再受jvm的限制,也就不再受GC的困扰,通过schema和off-heap,DataFrame解决了RDD的缺点</span><br><span class=\"line\">    对比RDD提升了计算效率,减少数据读取,底层计算优化</span><br><span class=\"line\">缺点:</span><br><span class=\"line\">    DataFrame解决了RDD的缺点,但是丢失了RDD的优点</span><br><span class=\"line\">    DataFrame不是类型安全的</span><br><span class=\"line\">    API也不是面向对象风格</span><br><span class=\"line\">总结:</span><br><span class=\"line\">    在效率上得到了优化,但是在代码编写上需要仔细</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-DataSet\"><a href=\"#3-DataSet\" class=\"headerlink\" title=\"3. DataSet\"></a>3. DataSet</h4><p><strong>核心特征(Encoder)</strong></p>\n<blockquote>\n<p>编译时的类型安全检查,性能极大的提升,内存使用极大降低,减少GC,极大的减少了网络数据的传输,极大的减少采用scala和java编程代码的差异性</p>\n</blockquote>\n<blockquote>\n<p>DataFrame每一行对应一个Row,而DataSet的定义更加宽松,每一个record对应了一个任意的类型,DataFrame只是DataSet的一种特例</p>\n</blockquote>\n<blockquote>\n<p>不同于Row是一个泛化的无类型JVM object,DataSet是由一系列的强类型JVM object组成的,Scala的case class或者java class定义.因此DataSet可以在变异时进行类型检查</p>\n</blockquote>\n<blockquote>\n<p>DataSet以Catalyst逻辑执行计划表示,并且数据以编码的二进制形式被存储,不需要反序列化就可以执行sorting,shuffle等操作</p>\n</blockquote>\n<blockquote>\n<p>DataSet创立需要一个显式的Encoder,把对象序列化为二进制</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"一-Spark2-x创建Spark对象\"><a href=\"#一-Spark2-x创建Spark对象\" class=\"headerlink\" title=\"一. Spark2.x创建Spark对象\"></a>一. Spark2.x创建Spark对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val spark = SparkSession</span><br><span class=\"line\">            .builder</span><br><span class=\"line\">            .appName(&quot;&quot;)</span><br><span class=\"line\">            .enableHiveSupport()</span><br><span class=\"line\">            .getOrCreate()</span><br></pre></td></tr></table></figure>\n<hr>","more":"<h3 id=\"二-RDD-DataFrame和DataSet\"><a href=\"#二-RDD-DataFrame和DataSet\" class=\"headerlink\" title=\"二. RDD,DataFrame和DataSet\"></a>二. RDD,DataFrame和DataSet</h3><h4 id=\"1-RDD\"><a href=\"#1-RDD\" class=\"headerlink\" title=\"1. RDD\"></a>1. RDD</h4><p><strong>优缺点</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">优点:</span><br><span class=\"line\">    编译时类型安全,编译时能检查出类型错误</span><br><span class=\"line\">    面向对象的编程风格,直接通过类名点的方式来操作数据</span><br><span class=\"line\">缺点:</span><br><span class=\"line\">    序列化和反序列化的性能开销,无论是集群间的通信还是IO操作都需要对对象的结构和数据进行序列化和反序列化</span><br><span class=\"line\">    GC的性能开销,频繁的创建和销毁对象,势必会增加GC</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-DataFrame\"><a href=\"#2-DataFrame\" class=\"headerlink\" title=\"2. DataFrame\"></a>2. DataFrame</h4><p><strong>核心特征</strong></p>\n<blockquote>\n<p><strong>Schema:</strong><br>    包含了以ROW为单位的每行数据的列的信息;Spark通过Schema就能够读懂数据,因此在通信和IO时只需要序列化和反序列化数据,不需要考虑结构部分</p>\n</blockquote>\n<blockquote>\n<p><strong>off_heap:</strong><br>    Spark能够以二进制的形式序列化数据(不包含结构)到off-heap中,当要操作数据时,就直接操作off-heap内存</p>\n</blockquote>\n<blockquote>\n<p><strong>Tungsten:</strong><br>    新的执行引擎</p>\n</blockquote>\n<blockquote>\n<p><strong>Catalyst:</strong><br>    新的语法解析框架</p>\n</blockquote>\n<p><strong>优缺点</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">优点:</span><br><span class=\"line\">    对外off-heap就像地盘,schema就像地图,spark有地图又有自己的地盘,就可以自己说了算,不再受jvm的限制,也就不再受GC的困扰,通过schema和off-heap,DataFrame解决了RDD的缺点</span><br><span class=\"line\">    对比RDD提升了计算效率,减少数据读取,底层计算优化</span><br><span class=\"line\">缺点:</span><br><span class=\"line\">    DataFrame解决了RDD的缺点,但是丢失了RDD的优点</span><br><span class=\"line\">    DataFrame不是类型安全的</span><br><span class=\"line\">    API也不是面向对象风格</span><br><span class=\"line\">总结:</span><br><span class=\"line\">    在效率上得到了优化,但是在代码编写上需要仔细</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-DataSet\"><a href=\"#3-DataSet\" class=\"headerlink\" title=\"3. DataSet\"></a>3. DataSet</h4><p><strong>核心特征(Encoder)</strong></p>\n<blockquote>\n<p>编译时的类型安全检查,性能极大的提升,内存使用极大降低,减少GC,极大的减少了网络数据的传输,极大的减少采用scala和java编程代码的差异性</p>\n</blockquote>\n<blockquote>\n<p>DataFrame每一行对应一个Row,而DataSet的定义更加宽松,每一个record对应了一个任意的类型,DataFrame只是DataSet的一种特例</p>\n</blockquote>\n<blockquote>\n<p>不同于Row是一个泛化的无类型JVM object,DataSet是由一系列的强类型JVM object组成的,Scala的case class或者java class定义.因此DataSet可以在变异时进行类型检查</p>\n</blockquote>\n<blockquote>\n<p>DataSet以Catalyst逻辑执行计划表示,并且数据以编码的二进制形式被存储,不需要反序列化就可以执行sorting,shuffle等操作</p>\n</blockquote>\n<blockquote>\n<p>DataSet创立需要一个显式的Encoder,把对象序列化为二进制</p>\n</blockquote>"},{"title":"Shell总体归纳","date":"2019-05-31T13:15:39.000Z","_content":"### 一. 约定标记\n```\n#!/bin/bash\n```\n\n<!-- more -->\n\n---\n\n### 二. 变量\n#### 1. 定义变量\n- 变量名和等号之间**不能有空格**\n- 首个字符必须为字母(a-z,A-Z)\n- 中间不能有空格,可以使用下划线\n- 不能使用标点符号\n- 不能使用bash里的关键字\n```\ncountry=\"china\"\n```\n#### 2. 使用变量\n> 只需要在一个定义过的变量前面加上美元符号$就可以了,另外,对于变量的{}是可以选择的,它的目的为帮助解释器识别变量的边界\n\n```\necho $country\necho ${country}\necho \"I love my ${country}abcd!\"\n```\n\n#### 3. 重定义变量\n```\ncountry=\"China\"\ncountry=\"USA\"\n```\n\n#### 4. 只读变量\n```\nreadonly country=\"China\"\n或\ncountry=\"China\"\nreadonly country\n```\n\n#### 5. 删除变量\n```\nunset country\n```\n\n#### 6. 特殊变量\n\n**变量** | **含义**\n---|---\n$0 | 当前脚本的文件名\n$n | 传递给脚本或函数的参数.n是一个数字,表示第几个参数\n$# | 传递给脚本或函数的参数个数\n$* | 传递给脚本或函数的所有参数\n$@ | 传递给脚本或函数的所有参数\n$? | 上个命令的退出状态,或函数的返回值\n$$ | 当前Shell进程ID\n```\n$* 和 $@ 的区别为: \n    1. $* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(\" \")包含时，都以\"$1\" \"$2\" … \"$n\" 的形式输出所有参数。\n    2. 当它们被双引号(\" \")包含时，\"$*\" 会将所有的参数作为一个整体，以\"$1 $2 … $n\"的形式输出所有参数；\"$@\" 会将各个参数分开，以\"$1\" \"$2\" … \"$n\" 的形式输出所有参数。\n一般直接使用$@\n\n$? 可以获取上一个命令的退出状态。所谓退出状态，就是上一个命令执行后的返回结果。退出状态是一个数字，一般情况下，大部分命令执行成功会返回 0，失败返回 1。\n```\n\n---\n\n### 三. Shell的替换\n#### 1. 转义符\n\nheader 1 | header 2\n---|---\n\\a | 发出警告声； \n\\b | 删除前一个字符； \n\\c | 最后不加上换行符号； \n\\f | 换行但光标仍旧停留在原来的位置； \n\\n | 换行且光标移至行首； \n\\r | 光标移至行首，但不换行； \n\\t | 插入tab； \n\\v | 与\\f相同； \n\\ | 插入\\字符； \n\\nnn | 插入nnn（八进制）所代表的ASCII字符；\n\n> 使用 echo 命令的 –E 选项禁止转义，默认也是不转义的；\n\n> 使用 –n 选项可以禁止插入换行符；\n\n> 使用 echo 命令的 –e 选项可以对转义字符进行替换.\n\n```\necho \"\\\\\"           #得到 \\\necho -e \"\\\\\"        #得到 \\\n\necho \"\\\\\\\\\"         #得到 \\\\\necho -e \"\\\\\"        #得到 \\\n\n使用-e 如果存在其他转义字符,那么\\\\\\\\等于\\\necho -e \"aa\\\\\\\\aa\"  #得到 aa\\aa\necho -e \"aa\\\\aa\"    #得到 aaa\n```\n\n#### 2. 命令替换\n> 把一个命令的输出赋值给一个变量,方法为把命令用**反引号**(在Esc下方)引起来\n```\ndirectory=`pwd`\necho $directory\n```\n\n#### 3. 变量替换\n> 可以根据变量的状态（是否为空、是否定义等）来改变它的值\n\n形式 | 说明\n---|---\n${var} | 变量本来的值\n${var:-word} | 如果变量var为空或已被删除(unset),那么返回word,但不改变var的值\n${var:=word} | 如果变量var为空或已被删除(unset),那么返回word,并将var的值设置为word\n${var:?message} | 如果变量var为空或已被删除(unset),那么将消息message送到标准错误输出,可以用来检测变量var是否可以被正常赋值.**若此替换出现在Shell脚本中,那么脚本将停止运行**\n${var:+word} | 如果变量var被定义,那么返回word,但不改变var的值\n\n---\n\n### 四. Shell的运算符\n#### 1. 算数运算符\n运算符 | 说明 | 举例\n---|---|---\n+ | 加法 | `expr $a + $b`\n- | 减法 | `expr $a - $b`\n* | 乘法 | `expr $a \\* $b`\n/ | 除法 | `expr $a / $b`\n% | 取余 | `expr $a % $b`\n= | 赋值 | a=$b\n== | 相等 | [ $a == $b ]\n!= | 不相等 | [ $a != $b ]\n\n> 在expr中的乖号为：\\*\n\n> 在expr中的表达式与运算符之间要有空格，否则错误；\n\n> 在[ $a == $b ]与[ $a != $b ]中，要需要在方括号与变量以及变量与运算符之间也需要有括号， 否则为错误的。\n\n#### 2. 关系运算符\n> 只支持数字，不支持字符串，除非字符串的值是数字。\n\n运算符 | 说明 | 举例\n---|---|---\n-eq | 相等返回true | [ $a -eq $b ]\n-ne | 不相等返回true | [ $a -ne $b ]\n-gt | 大于返回true | [ $a -gt $b ]\n-lt | 小于返回true | [ $a -lt $b ]\n-ge | 大于等于返回true | [ $a -ge $b ]\n-le | 小于等于返回true | [ $a -le $b ]\n\n#### 3. 布尔运算符\n运算符 | 说明 | 举例\n---|---|---\n! | 非运算,表达式为true则返回false,否则返回true | [ !false ]返回true\n-o | 或运算,有true返回true | [ $a -lt 20 -o $b -gt 100 ]\n-a | 与运算,有false返回false | [ $a -lt 20 -a $b -gt 100 ]\n\n#### 4. 字符串运算符\n运算符 | 说明 | 举例\n---|---|---\n= | 相等返回true | [ $a = $b ]\n!= | 不相等返回true | [ $a != $b ]\n-z | 检测字符串长度是否为0,为0返回true | [ -z $a ]\n-n | 检测字符串长度是否为0,不为0返回true | [ -n $a ]\nstr | 检测字符串是否为空,不为空返回true | [ $a ]\n\n#### 5. 文件测试运算符\n运算符 | 说明 | 举例\n---|---|---\n-b file | 检测文件是否是块设备文件 | [ -b $file ]\n-c file | 检测文件是否是字符设备文件 | [ -c $file ]\n-d file | 检测文件是否是目录 | [ -d $file ]\n-f file | 检测文件是否是普通文件 | [ -f $file ]\n-g file | 检测文件是否设置了SGID位 | [ -g $file ]\n-k file | 检测文件是否设置了黏着位 | [ -k $file ]\n-p file | 检测文件是否是具名管道 | [ -p $file ]\n-u file | 检测文件是否设置了SUID位 | [ -u $file ]\n-r file | 检测文件是否可读 | [ -r $file ]\n-w file | 检测文件是否可写 | [ -w $file ]\n-x file | 检测文件是否可执行 | [ -x $file ]\n-s file | 检测文件是否为空(文件大小是否大于0) | [ -s $file ]\n-e file | 检测文件(目录)是否存在 | [ -e $file ]\n\n---\n\n### 五. Shell的字符串\n#### 1. 单引号\n> - 单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；\n\n> - 单引号字串中不能出现单引号（对单引号使用转义符后也不行）。\n\n#### 2. 双引号\n> - 双引号里可以有变量\n\n> - 双引号里可以出现转义字符\n\n#### 3. 拼接字符串\n```\ncountry=\"China\"\necho \"hello, $country\"\n或\necho \"hello, \"$country\" \"\n```\n\n#### 4. 获取字符串长度\n```\nstring=\"abcd\"\necho ${#string} #输出 4\n或\necho `expr length abcde` #输出 5\n```\n\n#### 5. 提取子字符串\n```\nstring=\"alibaba is a great company\"\necho ${string:1:4} #输出 liba\n或\necho `expr substr abcde 2 3` #输出 bcd\n```\n\n#### 6. 查找字符下标:\n```\nstring=\"alibaba is a great company\"\necho `expr index \"$string\" i` #输出 3\n```\n\n#### 7. 处理路径的字符串\n```\nbasename\nbasename /home/yin/1.txt #输出 1.txt\nbasename /home/yin/1.txt .txt #输出 1\n\ndirname\ndirname /usr/bin/ #输出 /usr\ndirname /usr/bin/sort #输出 /usr/bin\ndirname 1.txt #输出 .\n```\n\n---\n\n### 六. Shell的数组\n> bash支持一维数组,不支持多维数组,它的下标从0开始编号.用下标[n]获取数组元素；\n\n#### 1. 定义数组\n> 用括号来表示数组，数组元素用\"空格\"符号分割开。\n\n```\ndeclare -a array_name\n或\narray_name=(value0 value1 value2 value3)\n或\narray_name[0]=value0\narray_name[1]=value1\narray_name[2]=value2\n```\n\n#### 2. 读取数组\n```\n读取某个下标的元素\n${array_name[index]}\n\n读取数组的全部元素\n${array_name[*]}\n${array_name[@]}\n```\n\n#### 3. 获取数组信息\n```\narr_name=(1 2 3 4)\n\n取得数组元素的个数\nlength=${#array_name[@]}\n或\nlength=${#array_name[*]}\n#输出 4\n\n获取数组的下标\nlength=${!array_name[@]}\n或\nlength=${!array_name[*]}\n#输出 0 1 2 3\n\n取得数组单个元素的长度\nlengthn=${#array_name[n]}\n#输出 1\n```\n\n---\n\n### 七. printf函数\n> - printf 命令不用加括号\n> - format-string 可以没有引号，但最好加上，单引号双引号均可。\n> - 参数多于格式控制符(%)时，format-string 可以重用，可以将所有参数都转换。\n> - arguments 使用空格分隔，不用逗号。\n\n```\n# format-string为双引号\nprintf \"%d %s\\n\" 1 \"abc\"\n#输出 1 abc\n\n# 单引号与双引号效果一样 \nprintf '%d %s\\n' 1 \"abc\" \n#输出 1 abc\n\n# 没有引号也可以输出\nprintf %s abcdef\n#输出 abcdef\n\n# 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用\nprintf %s abc def\n#输出 abcdef\nprintf \"%s\\n\" abc def\n#输出\n# abc\n# def\nprintf \"%s %s %s\\n\" a b c d e f g h i j\n#输出\n# a b c\n# d e f\n# g h i\n# j\n\n# 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替\nprintf \"%s and %d \\n\" \n#输出 and 0\n\n# 如果以 %d 的格式来显示字符串，那么会有警告，提示无效的数字，此时默认置为 0\nprintf \"The first program always prints'%s,%d\\n'\" Hello Shell\n#输出\n# -bash: printf: Shell: invalid number\n# The first program always prints 'Hello,0'\n```\n\n---\n\n### 八. Shell中条件语句\n#### 1. if语句\n> - if [ 表达式 ] then  语句  fi\n> - if [ 表达式 ] then 语句 else 语句 fi\n> - if [ 表达式] then 语句  elif[ 表达式 ] then 语句 elif[ 表达式 ] then 语句   …… fi\n\n```\na=10\nb=20\nif [ $a == $b ]\nthen\n   echo \"a is equal to b\"\nelse\n   echo \"a is not equal to b\"\nfi\n或\nif test $[2*3] -eq $[1+5]; then echo 'The two numbers are equal!'; fi;\n```\n> test 命令用于检查某个条件是否成立，与方括号([ ])类似\n\n#### 2. case语句\n> - 取值后面必须为关键字**in**，每一模式必须以**右括号**结束。\n> - 取值可以为**变量**或**常数**。\n> - 匹配发现取值符合某一模式后，其间所有命令开始**执行至;;处**。\n> - **;;与其他语言中的break类似**，意思是跳到整个**case**语句的最后。\n> - 如果无一匹配模式，使用**星号\\*捕获**该值，再执行后面的命令。\n```\ncase 值 in\n模式1)\n    command1\n    command2\n    command3\n    ;;\n模式2）\n    command1\n    command2\n    command3\n    ;;\n*)\n    command1\n    command2\n    command3\n    ;;\nesac\n```\n\n---\n\n### 九. Shell中循环语句\n#### 1. for循环\n> - 列表是一组值（数字、字符串等）组成的序列，每个值通过空格分隔。\n> - 每循环一次，就将列表中的下一个值赋给变量。\n\n```\nfor 变量 in 列表\ndo\n    command1\n    command2\n    ...\n    commandN\ndone\n\nfor loop in 1 2 3 4 5\ndo\n    echo \"The value is: $loop\"\ndone\n\n#!/bin/bash\nfor FILE in $HOME/.bash*\ndo\n   echo $FILE\ndone\n```\n\n#### 2. while循环\n```\nwhile command\ndo\n   Statement(s) to be executed if command is true\ndone\n\nCOUNTER=0\nwhile [ $COUNTER -lt 5 ]\ndo\n    COUNTER='expr $COUNTER+1'\n    echo $COUNTER\ndone\n```\n\n#### 3. until循环\n> - until 循环执行一系列命令直至条件为 true 时停止。\n> - until 循环与 while 循环在处理方式上刚好相反。\n\n```\nuntil command\ndo\n   Statement(s) to be executed until command is true\ndone\n\ncommand 一般为条件表达式，如果返回值为false，则继续执行循环体内的语句，否则跳出循环。\n类似地，在循环中使用 break 与 continue 跳出循环。\n另外，break 命令后面还可以跟一个整数，表示跳出第几层循环。\n```\n\n---\n\n### 十. Shell的函数\n```\nShell函数必须先定义后使用\nfunction_name () {\n    list of commands\n    [ return value ]\n}\n\n也可以加上function关键字：\nfunction function_name () {\n    list of commands\n    [ return value ]\n}\n```\n\n>- 调用函数只需要给出函数名，不需要加括号。\n>- 函数返回值，可以显式增加return语句；如果不加，会将最后一条命令运行结果作为返回值。\n>- Shell 函数返回值只能是整数，一般用来表示函数执行成功与否，0表示成功，其他值表示失败。\n>- 函数的参数可以通过 $n\n\n```\nfunWithParam(){\n    echo \"The value of the first parameter is $1 !\"\n    echo \"The value of the second parameter is $2 !\"\n    echo \"The value of the tenth parameter is ${10} !\"\n    echo \"The value of the eleventh parameter is ${11} !\"\n    echo \"The amount of the parameters is $# !\"  # 参数个数\n    echo \"The string of the parameters is $* !\"  # 传递给函数的所有参数\n}\nfunWithParam 1 2 3 4 5 6 7 8 9 34 73\n```\n>- 像删除变量一样，删除函数也可以使用 unset 命令，不过要加上 .f 选项\n\n```\nunset .f function_name\n```\n\n---\n\n### 十一. Shell的文件包含\n>- 两种方式的效果相同，简单起见，一般使用点号(.)，但是注意点号(.)和文件名中间有一空格。\n>- 被包含脚本不需要有执行权限.\n\n```\n#脚本1 s1.sh\n#!/bin/bash\necho \"脚本1\"\n\n#脚本2 s2.sh\n#!/bin/bash\necho \"脚本2\"\necho \"调用脚本1\"\n. s1.sh\nsource s1.sh\n\n# 调用脚本2\n#输出\n# 脚本2\n# 调用脚本1\n# 脚本1\n# 脚本1\n```\n\n### 补充,内置命令,一些常用的命令\n#### 1.awk&&sed \n```\n# 将你找的字符串下一行,替换成指定字符串\nsed -i '/你找的字符串/ { N; s/\\n.*$/\\n你要写的字符串/}' 你的文件\n\n# 将文件大小大于0的打印出来\nll ./*.log| awk -F \" \" '{if($5>0){print $9}}'\n\n# 可以去除文本中多打的分割符\nawk -v OFS=\"\\t\" '{print $1,$2,$3,$4,$5,$6}' test.txt > test.bak\n\n# 输出第一行\nawk 'NR==1' test.txt\n\n# 输出奇数行\nawk 'NR%2' test.txt\nawk '++i%2' test.txt\nsed -n '1~2p' test1.txt\n\n# 输出偶数行\nawk '!(NR%2)' test.txt\nawk 'i++%2' test.txt\nsed -n '2~2p' test1.txt\n\n# 行数对3取余,余数为1的输出\nawk 'NR%3==1' test1.txt\n```\n\n#### 2. date\n> 如果带时分秒,指定时间应放在日期操作后面\n\n```\n# 将输入日期转换成时间戳\nSTART_DAY=$(date -d \"2018-10-27\" +%s)\n\n# 指定日期两个月前的日期\ndate -d \"2018-08-17 -2 month\" +\"%Y-%m-%d\"\n\n# 获取当前时间\ndate \"+%Y-%m-%d %H:%M:%S\"\n\n# 将时间戳转成字符串\ndate -d @1287331200  \"+%Y-%m-%d\"\n\n# 如果要得到指定日期的前后的日期\n# 1.得到时间戳\nseconds=`date -d \"2010-10-18 00:00:00\" +%s`       \n# 2.加上一天的秒数86400\nseconds_new=`expr $seconds + 86400`\n# 3.获得指定日前加上一天的日期\ndate_new=`date -d @$seconds_new \"+%Y-%m-%d\"`   \n\n# 获取前一秒时间\ndate -d \"1 seconds ago\" \"+%Y-%m-%d %H:%M:%S\"\ndate -d \"1 seconds ago 2010-01-11 13:24:59\" \"+%Y-%m-%d %H:%M:%S\"\n\n# 获取前一分钟时间\ndate -d \"1 minutes ago\" \"+%Y-%m-%d %H:%M:%S\"\ndate -d \"1 minutes ago 2010-01-11 13:24:59\" \"+%Y-%m-%d %H:%M:%S\"\n\n# 获取前一小时时间\ndate -d \"1 hours ago\" \"+%Y-%m-%d %H:%M:%S\"\ndate -d \"1 hours ago 2010-01-11 13:24:59\" \"+%Y-%m-%d %H:%M:%S\"\n\n# 获取前一天的日期\ndate -d \"1 days ago\" +%Y-%m-%d\ndate -d \"yesterday\" +%Y-%m-%d\ndate -d \"2018-12-17 -1 day\" +%Y-%m-%d\ndate -d \"-1 day 2018-12-17 13:24:59\" \"+%Y-%m-%d %H:%M:%S\"\n\n# 获取前一周的日期\ndate -d \"1 weeks ago\" +%Y-%m-%d\ndate -d \"2018-12-18 -1 week\" +%Y-%m-%d\n```\n\n#### 3. 截取字符串\n> 从0开始计算下标\n> 左边的第一个字符是用**0**表示，右边的第一个字符用**0-1**表示\n\n```\n# #号截取,删除左边字符,保留右边字符\n# var 是变量名,# 号是运算符,*// 表示从左边开始删除第一个 // 号及左边的所有字符\nvar=\"http://www.aaa.com/123.html\"\necho ${var#*//}\n#输出 www.aaa.com/123.html\n\n# ##号截取,删除左边字符,保留右边字符\n# ##*/ 表示从左边开始删除最后（最右边）一个 / 号及左边的所有字符\necho ${var##*/}\n#输出 123.html\n\n# %号截取,删除右边字符,保留左边字符\n# %/* 表示从右边开始,删除第一个 / 号及右边的字符\necho ${var%/*}\n#输出 http://www.aaa.com\n\n# %%号截取,删除右边字符,保留左边字符\n# %%/* 表示从右边开始,删除最后（最左边）一个 / 号及右边的字符\necho ${var%%/*}\n#输出 http:\n\n# 截取从左边第几个字符开始，及字符的个数\n# 其中的0表示左边第一个字符开始,5表示字符的总个数\necho ${var:0:5}\n#输出 http:\n\n# 从左边第几个字符开始,一直到结束\necho ${var:7}\n#输出 www.aaa.com/123.html\n\n# 从右边第几个字符开始,及字符的个数\n# 其中的 0-8 表示右边算起第八个字符开始,3 表示字符的个数\necho ${var:0-8:3}\n#输出 123\n\n# 从右边第几个字符开始,一直到结束\n# 表示从右边第八个字符开始,一直到结束\necho ${var:0-8}\n#输出 123.html\n```\n","source":"_posts/Shell总体归纳.md","raw":"---\ntitle: Shell总体归纳\ndate: 2019-05-31 21:15:39\ncategories: 教程\ntags: shell\n---\n### 一. 约定标记\n```\n#!/bin/bash\n```\n\n<!-- more -->\n\n---\n\n### 二. 变量\n#### 1. 定义变量\n- 变量名和等号之间**不能有空格**\n- 首个字符必须为字母(a-z,A-Z)\n- 中间不能有空格,可以使用下划线\n- 不能使用标点符号\n- 不能使用bash里的关键字\n```\ncountry=\"china\"\n```\n#### 2. 使用变量\n> 只需要在一个定义过的变量前面加上美元符号$就可以了,另外,对于变量的{}是可以选择的,它的目的为帮助解释器识别变量的边界\n\n```\necho $country\necho ${country}\necho \"I love my ${country}abcd!\"\n```\n\n#### 3. 重定义变量\n```\ncountry=\"China\"\ncountry=\"USA\"\n```\n\n#### 4. 只读变量\n```\nreadonly country=\"China\"\n或\ncountry=\"China\"\nreadonly country\n```\n\n#### 5. 删除变量\n```\nunset country\n```\n\n#### 6. 特殊变量\n\n**变量** | **含义**\n---|---\n$0 | 当前脚本的文件名\n$n | 传递给脚本或函数的参数.n是一个数字,表示第几个参数\n$# | 传递给脚本或函数的参数个数\n$* | 传递给脚本或函数的所有参数\n$@ | 传递给脚本或函数的所有参数\n$? | 上个命令的退出状态,或函数的返回值\n$$ | 当前Shell进程ID\n```\n$* 和 $@ 的区别为: \n    1. $* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(\" \")包含时，都以\"$1\" \"$2\" … \"$n\" 的形式输出所有参数。\n    2. 当它们被双引号(\" \")包含时，\"$*\" 会将所有的参数作为一个整体，以\"$1 $2 … $n\"的形式输出所有参数；\"$@\" 会将各个参数分开，以\"$1\" \"$2\" … \"$n\" 的形式输出所有参数。\n一般直接使用$@\n\n$? 可以获取上一个命令的退出状态。所谓退出状态，就是上一个命令执行后的返回结果。退出状态是一个数字，一般情况下，大部分命令执行成功会返回 0，失败返回 1。\n```\n\n---\n\n### 三. Shell的替换\n#### 1. 转义符\n\nheader 1 | header 2\n---|---\n\\a | 发出警告声； \n\\b | 删除前一个字符； \n\\c | 最后不加上换行符号； \n\\f | 换行但光标仍旧停留在原来的位置； \n\\n | 换行且光标移至行首； \n\\r | 光标移至行首，但不换行； \n\\t | 插入tab； \n\\v | 与\\f相同； \n\\ | 插入\\字符； \n\\nnn | 插入nnn（八进制）所代表的ASCII字符；\n\n> 使用 echo 命令的 –E 选项禁止转义，默认也是不转义的；\n\n> 使用 –n 选项可以禁止插入换行符；\n\n> 使用 echo 命令的 –e 选项可以对转义字符进行替换.\n\n```\necho \"\\\\\"           #得到 \\\necho -e \"\\\\\"        #得到 \\\n\necho \"\\\\\\\\\"         #得到 \\\\\necho -e \"\\\\\"        #得到 \\\n\n使用-e 如果存在其他转义字符,那么\\\\\\\\等于\\\necho -e \"aa\\\\\\\\aa\"  #得到 aa\\aa\necho -e \"aa\\\\aa\"    #得到 aaa\n```\n\n#### 2. 命令替换\n> 把一个命令的输出赋值给一个变量,方法为把命令用**反引号**(在Esc下方)引起来\n```\ndirectory=`pwd`\necho $directory\n```\n\n#### 3. 变量替换\n> 可以根据变量的状态（是否为空、是否定义等）来改变它的值\n\n形式 | 说明\n---|---\n${var} | 变量本来的值\n${var:-word} | 如果变量var为空或已被删除(unset),那么返回word,但不改变var的值\n${var:=word} | 如果变量var为空或已被删除(unset),那么返回word,并将var的值设置为word\n${var:?message} | 如果变量var为空或已被删除(unset),那么将消息message送到标准错误输出,可以用来检测变量var是否可以被正常赋值.**若此替换出现在Shell脚本中,那么脚本将停止运行**\n${var:+word} | 如果变量var被定义,那么返回word,但不改变var的值\n\n---\n\n### 四. Shell的运算符\n#### 1. 算数运算符\n运算符 | 说明 | 举例\n---|---|---\n+ | 加法 | `expr $a + $b`\n- | 减法 | `expr $a - $b`\n* | 乘法 | `expr $a \\* $b`\n/ | 除法 | `expr $a / $b`\n% | 取余 | `expr $a % $b`\n= | 赋值 | a=$b\n== | 相等 | [ $a == $b ]\n!= | 不相等 | [ $a != $b ]\n\n> 在expr中的乖号为：\\*\n\n> 在expr中的表达式与运算符之间要有空格，否则错误；\n\n> 在[ $a == $b ]与[ $a != $b ]中，要需要在方括号与变量以及变量与运算符之间也需要有括号， 否则为错误的。\n\n#### 2. 关系运算符\n> 只支持数字，不支持字符串，除非字符串的值是数字。\n\n运算符 | 说明 | 举例\n---|---|---\n-eq | 相等返回true | [ $a -eq $b ]\n-ne | 不相等返回true | [ $a -ne $b ]\n-gt | 大于返回true | [ $a -gt $b ]\n-lt | 小于返回true | [ $a -lt $b ]\n-ge | 大于等于返回true | [ $a -ge $b ]\n-le | 小于等于返回true | [ $a -le $b ]\n\n#### 3. 布尔运算符\n运算符 | 说明 | 举例\n---|---|---\n! | 非运算,表达式为true则返回false,否则返回true | [ !false ]返回true\n-o | 或运算,有true返回true | [ $a -lt 20 -o $b -gt 100 ]\n-a | 与运算,有false返回false | [ $a -lt 20 -a $b -gt 100 ]\n\n#### 4. 字符串运算符\n运算符 | 说明 | 举例\n---|---|---\n= | 相等返回true | [ $a = $b ]\n!= | 不相等返回true | [ $a != $b ]\n-z | 检测字符串长度是否为0,为0返回true | [ -z $a ]\n-n | 检测字符串长度是否为0,不为0返回true | [ -n $a ]\nstr | 检测字符串是否为空,不为空返回true | [ $a ]\n\n#### 5. 文件测试运算符\n运算符 | 说明 | 举例\n---|---|---\n-b file | 检测文件是否是块设备文件 | [ -b $file ]\n-c file | 检测文件是否是字符设备文件 | [ -c $file ]\n-d file | 检测文件是否是目录 | [ -d $file ]\n-f file | 检测文件是否是普通文件 | [ -f $file ]\n-g file | 检测文件是否设置了SGID位 | [ -g $file ]\n-k file | 检测文件是否设置了黏着位 | [ -k $file ]\n-p file | 检测文件是否是具名管道 | [ -p $file ]\n-u file | 检测文件是否设置了SUID位 | [ -u $file ]\n-r file | 检测文件是否可读 | [ -r $file ]\n-w file | 检测文件是否可写 | [ -w $file ]\n-x file | 检测文件是否可执行 | [ -x $file ]\n-s file | 检测文件是否为空(文件大小是否大于0) | [ -s $file ]\n-e file | 检测文件(目录)是否存在 | [ -e $file ]\n\n---\n\n### 五. Shell的字符串\n#### 1. 单引号\n> - 单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；\n\n> - 单引号字串中不能出现单引号（对单引号使用转义符后也不行）。\n\n#### 2. 双引号\n> - 双引号里可以有变量\n\n> - 双引号里可以出现转义字符\n\n#### 3. 拼接字符串\n```\ncountry=\"China\"\necho \"hello, $country\"\n或\necho \"hello, \"$country\" \"\n```\n\n#### 4. 获取字符串长度\n```\nstring=\"abcd\"\necho ${#string} #输出 4\n或\necho `expr length abcde` #输出 5\n```\n\n#### 5. 提取子字符串\n```\nstring=\"alibaba is a great company\"\necho ${string:1:4} #输出 liba\n或\necho `expr substr abcde 2 3` #输出 bcd\n```\n\n#### 6. 查找字符下标:\n```\nstring=\"alibaba is a great company\"\necho `expr index \"$string\" i` #输出 3\n```\n\n#### 7. 处理路径的字符串\n```\nbasename\nbasename /home/yin/1.txt #输出 1.txt\nbasename /home/yin/1.txt .txt #输出 1\n\ndirname\ndirname /usr/bin/ #输出 /usr\ndirname /usr/bin/sort #输出 /usr/bin\ndirname 1.txt #输出 .\n```\n\n---\n\n### 六. Shell的数组\n> bash支持一维数组,不支持多维数组,它的下标从0开始编号.用下标[n]获取数组元素；\n\n#### 1. 定义数组\n> 用括号来表示数组，数组元素用\"空格\"符号分割开。\n\n```\ndeclare -a array_name\n或\narray_name=(value0 value1 value2 value3)\n或\narray_name[0]=value0\narray_name[1]=value1\narray_name[2]=value2\n```\n\n#### 2. 读取数组\n```\n读取某个下标的元素\n${array_name[index]}\n\n读取数组的全部元素\n${array_name[*]}\n${array_name[@]}\n```\n\n#### 3. 获取数组信息\n```\narr_name=(1 2 3 4)\n\n取得数组元素的个数\nlength=${#array_name[@]}\n或\nlength=${#array_name[*]}\n#输出 4\n\n获取数组的下标\nlength=${!array_name[@]}\n或\nlength=${!array_name[*]}\n#输出 0 1 2 3\n\n取得数组单个元素的长度\nlengthn=${#array_name[n]}\n#输出 1\n```\n\n---\n\n### 七. printf函数\n> - printf 命令不用加括号\n> - format-string 可以没有引号，但最好加上，单引号双引号均可。\n> - 参数多于格式控制符(%)时，format-string 可以重用，可以将所有参数都转换。\n> - arguments 使用空格分隔，不用逗号。\n\n```\n# format-string为双引号\nprintf \"%d %s\\n\" 1 \"abc\"\n#输出 1 abc\n\n# 单引号与双引号效果一样 \nprintf '%d %s\\n' 1 \"abc\" \n#输出 1 abc\n\n# 没有引号也可以输出\nprintf %s abcdef\n#输出 abcdef\n\n# 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用\nprintf %s abc def\n#输出 abcdef\nprintf \"%s\\n\" abc def\n#输出\n# abc\n# def\nprintf \"%s %s %s\\n\" a b c d e f g h i j\n#输出\n# a b c\n# d e f\n# g h i\n# j\n\n# 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替\nprintf \"%s and %d \\n\" \n#输出 and 0\n\n# 如果以 %d 的格式来显示字符串，那么会有警告，提示无效的数字，此时默认置为 0\nprintf \"The first program always prints'%s,%d\\n'\" Hello Shell\n#输出\n# -bash: printf: Shell: invalid number\n# The first program always prints 'Hello,0'\n```\n\n---\n\n### 八. Shell中条件语句\n#### 1. if语句\n> - if [ 表达式 ] then  语句  fi\n> - if [ 表达式 ] then 语句 else 语句 fi\n> - if [ 表达式] then 语句  elif[ 表达式 ] then 语句 elif[ 表达式 ] then 语句   …… fi\n\n```\na=10\nb=20\nif [ $a == $b ]\nthen\n   echo \"a is equal to b\"\nelse\n   echo \"a is not equal to b\"\nfi\n或\nif test $[2*3] -eq $[1+5]; then echo 'The two numbers are equal!'; fi;\n```\n> test 命令用于检查某个条件是否成立，与方括号([ ])类似\n\n#### 2. case语句\n> - 取值后面必须为关键字**in**，每一模式必须以**右括号**结束。\n> - 取值可以为**变量**或**常数**。\n> - 匹配发现取值符合某一模式后，其间所有命令开始**执行至;;处**。\n> - **;;与其他语言中的break类似**，意思是跳到整个**case**语句的最后。\n> - 如果无一匹配模式，使用**星号\\*捕获**该值，再执行后面的命令。\n```\ncase 值 in\n模式1)\n    command1\n    command2\n    command3\n    ;;\n模式2）\n    command1\n    command2\n    command3\n    ;;\n*)\n    command1\n    command2\n    command3\n    ;;\nesac\n```\n\n---\n\n### 九. Shell中循环语句\n#### 1. for循环\n> - 列表是一组值（数字、字符串等）组成的序列，每个值通过空格分隔。\n> - 每循环一次，就将列表中的下一个值赋给变量。\n\n```\nfor 变量 in 列表\ndo\n    command1\n    command2\n    ...\n    commandN\ndone\n\nfor loop in 1 2 3 4 5\ndo\n    echo \"The value is: $loop\"\ndone\n\n#!/bin/bash\nfor FILE in $HOME/.bash*\ndo\n   echo $FILE\ndone\n```\n\n#### 2. while循环\n```\nwhile command\ndo\n   Statement(s) to be executed if command is true\ndone\n\nCOUNTER=0\nwhile [ $COUNTER -lt 5 ]\ndo\n    COUNTER='expr $COUNTER+1'\n    echo $COUNTER\ndone\n```\n\n#### 3. until循环\n> - until 循环执行一系列命令直至条件为 true 时停止。\n> - until 循环与 while 循环在处理方式上刚好相反。\n\n```\nuntil command\ndo\n   Statement(s) to be executed until command is true\ndone\n\ncommand 一般为条件表达式，如果返回值为false，则继续执行循环体内的语句，否则跳出循环。\n类似地，在循环中使用 break 与 continue 跳出循环。\n另外，break 命令后面还可以跟一个整数，表示跳出第几层循环。\n```\n\n---\n\n### 十. Shell的函数\n```\nShell函数必须先定义后使用\nfunction_name () {\n    list of commands\n    [ return value ]\n}\n\n也可以加上function关键字：\nfunction function_name () {\n    list of commands\n    [ return value ]\n}\n```\n\n>- 调用函数只需要给出函数名，不需要加括号。\n>- 函数返回值，可以显式增加return语句；如果不加，会将最后一条命令运行结果作为返回值。\n>- Shell 函数返回值只能是整数，一般用来表示函数执行成功与否，0表示成功，其他值表示失败。\n>- 函数的参数可以通过 $n\n\n```\nfunWithParam(){\n    echo \"The value of the first parameter is $1 !\"\n    echo \"The value of the second parameter is $2 !\"\n    echo \"The value of the tenth parameter is ${10} !\"\n    echo \"The value of the eleventh parameter is ${11} !\"\n    echo \"The amount of the parameters is $# !\"  # 参数个数\n    echo \"The string of the parameters is $* !\"  # 传递给函数的所有参数\n}\nfunWithParam 1 2 3 4 5 6 7 8 9 34 73\n```\n>- 像删除变量一样，删除函数也可以使用 unset 命令，不过要加上 .f 选项\n\n```\nunset .f function_name\n```\n\n---\n\n### 十一. Shell的文件包含\n>- 两种方式的效果相同，简单起见，一般使用点号(.)，但是注意点号(.)和文件名中间有一空格。\n>- 被包含脚本不需要有执行权限.\n\n```\n#脚本1 s1.sh\n#!/bin/bash\necho \"脚本1\"\n\n#脚本2 s2.sh\n#!/bin/bash\necho \"脚本2\"\necho \"调用脚本1\"\n. s1.sh\nsource s1.sh\n\n# 调用脚本2\n#输出\n# 脚本2\n# 调用脚本1\n# 脚本1\n# 脚本1\n```\n\n### 补充,内置命令,一些常用的命令\n#### 1.awk&&sed \n```\n# 将你找的字符串下一行,替换成指定字符串\nsed -i '/你找的字符串/ { N; s/\\n.*$/\\n你要写的字符串/}' 你的文件\n\n# 将文件大小大于0的打印出来\nll ./*.log| awk -F \" \" '{if($5>0){print $9}}'\n\n# 可以去除文本中多打的分割符\nawk -v OFS=\"\\t\" '{print $1,$2,$3,$4,$5,$6}' test.txt > test.bak\n\n# 输出第一行\nawk 'NR==1' test.txt\n\n# 输出奇数行\nawk 'NR%2' test.txt\nawk '++i%2' test.txt\nsed -n '1~2p' test1.txt\n\n# 输出偶数行\nawk '!(NR%2)' test.txt\nawk 'i++%2' test.txt\nsed -n '2~2p' test1.txt\n\n# 行数对3取余,余数为1的输出\nawk 'NR%3==1' test1.txt\n```\n\n#### 2. date\n> 如果带时分秒,指定时间应放在日期操作后面\n\n```\n# 将输入日期转换成时间戳\nSTART_DAY=$(date -d \"2018-10-27\" +%s)\n\n# 指定日期两个月前的日期\ndate -d \"2018-08-17 -2 month\" +\"%Y-%m-%d\"\n\n# 获取当前时间\ndate \"+%Y-%m-%d %H:%M:%S\"\n\n# 将时间戳转成字符串\ndate -d @1287331200  \"+%Y-%m-%d\"\n\n# 如果要得到指定日期的前后的日期\n# 1.得到时间戳\nseconds=`date -d \"2010-10-18 00:00:00\" +%s`       \n# 2.加上一天的秒数86400\nseconds_new=`expr $seconds + 86400`\n# 3.获得指定日前加上一天的日期\ndate_new=`date -d @$seconds_new \"+%Y-%m-%d\"`   \n\n# 获取前一秒时间\ndate -d \"1 seconds ago\" \"+%Y-%m-%d %H:%M:%S\"\ndate -d \"1 seconds ago 2010-01-11 13:24:59\" \"+%Y-%m-%d %H:%M:%S\"\n\n# 获取前一分钟时间\ndate -d \"1 minutes ago\" \"+%Y-%m-%d %H:%M:%S\"\ndate -d \"1 minutes ago 2010-01-11 13:24:59\" \"+%Y-%m-%d %H:%M:%S\"\n\n# 获取前一小时时间\ndate -d \"1 hours ago\" \"+%Y-%m-%d %H:%M:%S\"\ndate -d \"1 hours ago 2010-01-11 13:24:59\" \"+%Y-%m-%d %H:%M:%S\"\n\n# 获取前一天的日期\ndate -d \"1 days ago\" +%Y-%m-%d\ndate -d \"yesterday\" +%Y-%m-%d\ndate -d \"2018-12-17 -1 day\" +%Y-%m-%d\ndate -d \"-1 day 2018-12-17 13:24:59\" \"+%Y-%m-%d %H:%M:%S\"\n\n# 获取前一周的日期\ndate -d \"1 weeks ago\" +%Y-%m-%d\ndate -d \"2018-12-18 -1 week\" +%Y-%m-%d\n```\n\n#### 3. 截取字符串\n> 从0开始计算下标\n> 左边的第一个字符是用**0**表示，右边的第一个字符用**0-1**表示\n\n```\n# #号截取,删除左边字符,保留右边字符\n# var 是变量名,# 号是运算符,*// 表示从左边开始删除第一个 // 号及左边的所有字符\nvar=\"http://www.aaa.com/123.html\"\necho ${var#*//}\n#输出 www.aaa.com/123.html\n\n# ##号截取,删除左边字符,保留右边字符\n# ##*/ 表示从左边开始删除最后（最右边）一个 / 号及左边的所有字符\necho ${var##*/}\n#输出 123.html\n\n# %号截取,删除右边字符,保留左边字符\n# %/* 表示从右边开始,删除第一个 / 号及右边的字符\necho ${var%/*}\n#输出 http://www.aaa.com\n\n# %%号截取,删除右边字符,保留左边字符\n# %%/* 表示从右边开始,删除最后（最左边）一个 / 号及右边的字符\necho ${var%%/*}\n#输出 http:\n\n# 截取从左边第几个字符开始，及字符的个数\n# 其中的0表示左边第一个字符开始,5表示字符的总个数\necho ${var:0:5}\n#输出 http:\n\n# 从左边第几个字符开始,一直到结束\necho ${var:7}\n#输出 www.aaa.com/123.html\n\n# 从右边第几个字符开始,及字符的个数\n# 其中的 0-8 表示右边算起第八个字符开始,3 表示字符的个数\necho ${var:0-8:3}\n#输出 123\n\n# 从右边第几个字符开始,一直到结束\n# 表示从右边第八个字符开始,一直到结束\necho ${var:0-8}\n#输出 123.html\n```\n","slug":"Shell总体归纳","published":1,"updated":"2019-05-31T13:19:15.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwc5cti40014skw7ru48m9s6","content":"<h3 id=\"一-约定标记\"><a href=\"#一-约定标记\" class=\"headerlink\" title=\"一. 约定标记\"></a>一. 约定标记</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"二-变量\"><a href=\"#二-变量\" class=\"headerlink\" title=\"二. 变量\"></a>二. 变量</h3><h4 id=\"1-定义变量\"><a href=\"#1-定义变量\" class=\"headerlink\" title=\"1. 定义变量\"></a>1. 定义变量</h4><ul>\n<li>变量名和等号之间<strong>不能有空格</strong></li>\n<li>首个字符必须为字母(a-z,A-Z)</li>\n<li>中间不能有空格,可以使用下划线</li>\n<li>不能使用标点符号</li>\n<li>不能使用bash里的关键字<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">country=&quot;china&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2-使用变量\"><a href=\"#2-使用变量\" class=\"headerlink\" title=\"2. 使用变量\"></a>2. 使用变量</h4><blockquote>\n<p>只需要在一个定义过的变量前面加上美元符号$就可以了,另外,对于变量的{}是可以选择的,它的目的为帮助解释器识别变量的边界</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $country</span><br><span class=\"line\">echo $&#123;country&#125;</span><br><span class=\"line\">echo &quot;I love my $&#123;country&#125;abcd!&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-重定义变量\"><a href=\"#3-重定义变量\" class=\"headerlink\" title=\"3. 重定义变量\"></a>3. 重定义变量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">country=&quot;China&quot;</span><br><span class=\"line\">country=&quot;USA&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-只读变量\"><a href=\"#4-只读变量\" class=\"headerlink\" title=\"4. 只读变量\"></a>4. 只读变量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">readonly country=&quot;China&quot;</span><br><span class=\"line\">或</span><br><span class=\"line\">country=&quot;China&quot;</span><br><span class=\"line\">readonly country</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-删除变量\"><a href=\"#5-删除变量\" class=\"headerlink\" title=\"5. 删除变量\"></a>5. 删除变量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unset country</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-特殊变量\"><a href=\"#6-特殊变量\" class=\"headerlink\" title=\"6. 特殊变量\"></a>6. 特殊变量</h4><table>\n<thead>\n<tr>\n<th><strong>变量</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$0</td>\n<td>当前脚本的文件名</td>\n</tr>\n<tr>\n<td>$n</td>\n<td>传递给脚本或函数的参数.n是一个数字,表示第几个参数</td>\n</tr>\n<tr>\n<td>$#</td>\n<td>传递给脚本或函数的参数个数</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>传递给脚本或函数的所有参数</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>传递给脚本或函数的所有参数</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>上个命令的退出状态,或函数的返回值</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>当前Shell进程ID</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$* 和 $@ 的区别为: </span><br><span class=\"line\">    1. $* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(&quot; &quot;)包含时，都以&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot; 的形式输出所有参数。</span><br><span class=\"line\">    2. 当它们被双引号(&quot; &quot;)包含时，&quot;$*&quot; 会将所有的参数作为一个整体，以&quot;$1 $2 … $n&quot;的形式输出所有参数；&quot;$@&quot; 会将各个参数分开，以&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot; 的形式输出所有参数。</span><br><span class=\"line\">一般直接使用$@</span><br><span class=\"line\"></span><br><span class=\"line\">$? 可以获取上一个命令的退出状态。所谓退出状态，就是上一个命令执行后的返回结果。退出状态是一个数字，一般情况下，大部分命令执行成功会返回 0，失败返回 1。</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"三-Shell的替换\"><a href=\"#三-Shell的替换\" class=\"headerlink\" title=\"三. Shell的替换\"></a>三. Shell的替换</h3><h4 id=\"1-转义符\"><a href=\"#1-转义符\" class=\"headerlink\" title=\"1. 转义符\"></a>1. 转义符</h4><table>\n<thead>\n<tr>\n<th>header 1</th>\n<th>header 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>发出警告声； </td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>删除前一个字符； </td>\n</tr>\n<tr>\n<td>\\c</td>\n<td>最后不加上换行符号； </td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换行但光标仍旧停留在原来的位置； </td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行且光标移至行首； </td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>光标移至行首，但不换行； </td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>插入tab； </td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>与\\f相同； </td>\n</tr>\n<tr>\n<td>\\</td>\n<td>插入\\字符； </td>\n</tr>\n<tr>\n<td>\\nnn</td>\n<td>插入nnn（八进制）所代表的ASCII字符；</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>使用 echo 命令的 –E 选项禁止转义，默认也是不转义的；</p>\n</blockquote>\n<blockquote>\n<p>使用 –n 选项可以禁止插入换行符；</p>\n</blockquote>\n<blockquote>\n<p>使用 echo 命令的 –e 选项可以对转义字符进行替换.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;\\\\&quot;           #得到 \\</span><br><span class=\"line\">echo -e &quot;\\\\&quot;        #得到 \\</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;\\\\\\\\&quot;         #得到 \\\\</span><br><span class=\"line\">echo -e &quot;\\\\&quot;        #得到 \\</span><br><span class=\"line\"></span><br><span class=\"line\">使用-e 如果存在其他转义字符,那么\\\\\\\\等于\\</span><br><span class=\"line\">echo -e &quot;aa\\\\\\\\aa&quot;  #得到 aa\\aa</span><br><span class=\"line\">echo -e &quot;aa\\\\aa&quot;    #得到 aaa</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-命令替换\"><a href=\"#2-命令替换\" class=\"headerlink\" title=\"2. 命令替换\"></a>2. 命令替换</h4><blockquote>\n<p>把一个命令的输出赋值给一个变量,方法为把命令用<strong>反引号</strong>(在Esc下方)引起来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">directory=`pwd`</span><br><span class=\"line\">echo $directory</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"3-变量替换\"><a href=\"#3-变量替换\" class=\"headerlink\" title=\"3. 变量替换\"></a>3. 变量替换</h4><blockquote>\n<p>可以根据变量的状态（是否为空、是否定义等）来改变它的值</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>形式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>${var}</td>\n<td>变量本来的值</td>\n</tr>\n<tr>\n<td>${var:-word}</td>\n<td>如果变量var为空或已被删除(unset),那么返回word,但不改变var的值</td>\n</tr>\n<tr>\n<td>${var:=word}</td>\n<td>如果变量var为空或已被删除(unset),那么返回word,并将var的值设置为word</td>\n</tr>\n<tr>\n<td>${var:?message}</td>\n<td>如果变量var为空或已被删除(unset),那么将消息message送到标准错误输出,可以用来检测变量var是否可以被正常赋值.<strong>若此替换出现在Shell脚本中,那么脚本将停止运行</strong></td>\n</tr>\n<tr>\n<td>${var:+word}</td>\n<td>如果变量var被定义,那么返回word,但不改变var的值</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"四-Shell的运算符\"><a href=\"#四-Shell的运算符\" class=\"headerlink\" title=\"四. Shell的运算符\"></a>四. Shell的运算符</h3><h4 id=\"1-算数运算符\"><a href=\"#1-算数运算符\" class=\"headerlink\" title=\"1. 算数运算符\"></a>1. 算数运算符</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加法</td>\n<td><code>expr $a + $b</code></td>\n</tr>\n<tr>\n<td>-</td>\n<td>减法</td>\n<td><code>expr $a - $b</code></td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘法</td>\n<td><code>expr $a \\* $b</code></td>\n</tr>\n<tr>\n<td>/</td>\n<td>除法</td>\n<td><code>expr $a / $b</code></td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余</td>\n<td><code>expr $a % $b</code></td>\n</tr>\n<tr>\n<td>=</td>\n<td>赋值</td>\n<td>a=$b</td>\n</tr>\n<tr>\n<td>==</td>\n<td>相等</td>\n<td>[ $a == $b ]</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不相等</td>\n<td>[ $a != $b ]</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>在expr中的乖号为：*</p>\n</blockquote>\n<blockquote>\n<p>在expr中的表达式与运算符之间要有空格，否则错误；</p>\n</blockquote>\n<blockquote>\n<p>在[ $a == $b ]与[ $a != $b ]中，要需要在方括号与变量以及变量与运算符之间也需要有括号， 否则为错误的。</p>\n</blockquote>\n<h4 id=\"2-关系运算符\"><a href=\"#2-关系运算符\" class=\"headerlink\" title=\"2. 关系运算符\"></a>2. 关系运算符</h4><blockquote>\n<p>只支持数字，不支持字符串，除非字符串的值是数字。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-eq</td>\n<td>相等返回true</td>\n<td>[ $a -eq $b ]</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>不相等返回true</td>\n<td>[ $a -ne $b ]</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>大于返回true</td>\n<td>[ $a -gt $b ]</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>小于返回true</td>\n<td>[ $a -lt $b ]</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>大于等于返回true</td>\n<td>[ $a -ge $b ]</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>小于等于返回true</td>\n<td>[ $a -le $b ]</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-布尔运算符\"><a href=\"#3-布尔运算符\" class=\"headerlink\" title=\"3. 布尔运算符\"></a>3. 布尔运算符</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>!</td>\n<td>非运算,表达式为true则返回false,否则返回true</td>\n<td>[ !false ]返回true</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>或运算,有true返回true</td>\n<td>[ $a -lt 20 -o $b -gt 100 ]</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>与运算,有false返回false</td>\n<td>[ $a -lt 20 -a $b -gt 100 ]</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"4-字符串运算符\"><a href=\"#4-字符串运算符\" class=\"headerlink\" title=\"4. 字符串运算符\"></a>4. 字符串运算符</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>相等返回true</td>\n<td>[ $a = $b ]</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不相等返回true</td>\n<td>[ $a != $b ]</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>检测字符串长度是否为0,为0返回true</td>\n<td>[ -z $a ]</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>检测字符串长度是否为0,不为0返回true</td>\n<td>[ -n $a ]</td>\n</tr>\n<tr>\n<td>str</td>\n<td>检测字符串是否为空,不为空返回true</td>\n<td>[ $a ]</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"5-文件测试运算符\"><a href=\"#5-文件测试运算符\" class=\"headerlink\" title=\"5. 文件测试运算符\"></a>5. 文件测试运算符</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-b file</td>\n<td>检测文件是否是块设备文件</td>\n<td>[ -b $file ]</td>\n</tr>\n<tr>\n<td>-c file</td>\n<td>检测文件是否是字符设备文件</td>\n<td>[ -c $file ]</td>\n</tr>\n<tr>\n<td>-d file</td>\n<td>检测文件是否是目录</td>\n<td>[ -d $file ]</td>\n</tr>\n<tr>\n<td>-f file</td>\n<td>检测文件是否是普通文件</td>\n<td>[ -f $file ]</td>\n</tr>\n<tr>\n<td>-g file</td>\n<td>检测文件是否设置了SGID位</td>\n<td>[ -g $file ]</td>\n</tr>\n<tr>\n<td>-k file</td>\n<td>检测文件是否设置了黏着位</td>\n<td>[ -k $file ]</td>\n</tr>\n<tr>\n<td>-p file</td>\n<td>检测文件是否是具名管道</td>\n<td>[ -p $file ]</td>\n</tr>\n<tr>\n<td>-u file</td>\n<td>检测文件是否设置了SUID位</td>\n<td>[ -u $file ]</td>\n</tr>\n<tr>\n<td>-r file</td>\n<td>检测文件是否可读</td>\n<td>[ -r $file ]</td>\n</tr>\n<tr>\n<td>-w file</td>\n<td>检测文件是否可写</td>\n<td>[ -w $file ]</td>\n</tr>\n<tr>\n<td>-x file</td>\n<td>检测文件是否可执行</td>\n<td>[ -x $file ]</td>\n</tr>\n<tr>\n<td>-s file</td>\n<td>检测文件是否为空(文件大小是否大于0)</td>\n<td>[ -s $file ]</td>\n</tr>\n<tr>\n<td>-e file</td>\n<td>检测文件(目录)是否存在</td>\n<td>[ -e $file ]</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"五-Shell的字符串\"><a href=\"#五-Shell的字符串\" class=\"headerlink\" title=\"五. Shell的字符串\"></a>五. Shell的字符串</h3><h4 id=\"1-单引号\"><a href=\"#1-单引号\" class=\"headerlink\" title=\"1. 单引号\"></a>1. 单引号</h4><blockquote>\n<ul>\n<li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）。</li>\n</ul>\n</blockquote>\n<h4 id=\"2-双引号\"><a href=\"#2-双引号\" class=\"headerlink\" title=\"2. 双引号\"></a>2. 双引号</h4><blockquote>\n<ul>\n<li>双引号里可以有变量</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>双引号里可以出现转义字符</li>\n</ul>\n</blockquote>\n<h4 id=\"3-拼接字符串\"><a href=\"#3-拼接字符串\" class=\"headerlink\" title=\"3. 拼接字符串\"></a>3. 拼接字符串</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">country=&quot;China&quot;</span><br><span class=\"line\">echo &quot;hello, $country&quot;</span><br><span class=\"line\">或</span><br><span class=\"line\">echo &quot;hello, &quot;$country&quot; &quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-获取字符串长度\"><a href=\"#4-获取字符串长度\" class=\"headerlink\" title=\"4. 获取字符串长度\"></a>4. 获取字符串长度</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string=&quot;abcd&quot;</span><br><span class=\"line\">echo $&#123;#string&#125; #输出 4</span><br><span class=\"line\">或</span><br><span class=\"line\">echo `expr length abcde` #输出 5</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-提取子字符串\"><a href=\"#5-提取子字符串\" class=\"headerlink\" title=\"5. 提取子字符串\"></a>5. 提取子字符串</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string=&quot;alibaba is a great company&quot;</span><br><span class=\"line\">echo $&#123;string:1:4&#125; #输出 liba</span><br><span class=\"line\">或</span><br><span class=\"line\">echo `expr substr abcde 2 3` #输出 bcd</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-查找字符下标\"><a href=\"#6-查找字符下标\" class=\"headerlink\" title=\"6. 查找字符下标:\"></a>6. 查找字符下标:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string=&quot;alibaba is a great company&quot;</span><br><span class=\"line\">echo `expr index &quot;$string&quot; i` #输出 3</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-处理路径的字符串\"><a href=\"#7-处理路径的字符串\" class=\"headerlink\" title=\"7. 处理路径的字符串\"></a>7. 处理路径的字符串</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basename</span><br><span class=\"line\">basename /home/yin/1.txt #输出 1.txt</span><br><span class=\"line\">basename /home/yin/1.txt .txt #输出 1</span><br><span class=\"line\"></span><br><span class=\"line\">dirname</span><br><span class=\"line\">dirname /usr/bin/ #输出 /usr</span><br><span class=\"line\">dirname /usr/bin/sort #输出 /usr/bin</span><br><span class=\"line\">dirname 1.txt #输出 .</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"六-Shell的数组\"><a href=\"#六-Shell的数组\" class=\"headerlink\" title=\"六. Shell的数组\"></a>六. Shell的数组</h3><blockquote>\n<p>bash支持一维数组,不支持多维数组,它的下标从0开始编号.用下标[n]获取数组元素；</p>\n</blockquote>\n<h4 id=\"1-定义数组\"><a href=\"#1-定义数组\" class=\"headerlink\" title=\"1. 定义数组\"></a>1. 定义数组</h4><blockquote>\n<p>用括号来表示数组，数组元素用”空格”符号分割开。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare -a array_name</span><br><span class=\"line\">或</span><br><span class=\"line\">array_name=(value0 value1 value2 value3)</span><br><span class=\"line\">或</span><br><span class=\"line\">array_name[0]=value0</span><br><span class=\"line\">array_name[1]=value1</span><br><span class=\"line\">array_name[2]=value2</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-读取数组\"><a href=\"#2-读取数组\" class=\"headerlink\" title=\"2. 读取数组\"></a>2. 读取数组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">读取某个下标的元素</span><br><span class=\"line\">$&#123;array_name[index]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">读取数组的全部元素</span><br><span class=\"line\">$&#123;array_name[*]&#125;</span><br><span class=\"line\">$&#123;array_name[@]&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-获取数组信息\"><a href=\"#3-获取数组信息\" class=\"headerlink\" title=\"3. 获取数组信息\"></a>3. 获取数组信息</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr_name=(1 2 3 4)</span><br><span class=\"line\"></span><br><span class=\"line\">取得数组元素的个数</span><br><span class=\"line\">length=$&#123;#array_name[@]&#125;</span><br><span class=\"line\">或</span><br><span class=\"line\">length=$&#123;#array_name[*]&#125;</span><br><span class=\"line\">#输出 4</span><br><span class=\"line\"></span><br><span class=\"line\">获取数组的下标</span><br><span class=\"line\">length=$&#123;!array_name[@]&#125;</span><br><span class=\"line\">或</span><br><span class=\"line\">length=$&#123;!array_name[*]&#125;</span><br><span class=\"line\">#输出 0 1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">取得数组单个元素的长度</span><br><span class=\"line\">lengthn=$&#123;#array_name[n]&#125;</span><br><span class=\"line\">#输出 1</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"七-printf函数\"><a href=\"#七-printf函数\" class=\"headerlink\" title=\"七. printf函数\"></a>七. printf函数</h3><blockquote>\n<ul>\n<li>printf 命令不用加括号</li>\n<li>format-string 可以没有引号，但最好加上，单引号双引号均可。</li>\n<li>参数多于格式控制符(%)时，format-string 可以重用，可以将所有参数都转换。</li>\n<li>arguments 使用空格分隔，不用逗号。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># format-string为双引号</span><br><span class=\"line\">printf &quot;%d %s\\n&quot; 1 &quot;abc&quot;</span><br><span class=\"line\">#输出 1 abc</span><br><span class=\"line\"></span><br><span class=\"line\"># 单引号与双引号效果一样 </span><br><span class=\"line\">printf &apos;%d %s\\n&apos; 1 &quot;abc&quot; </span><br><span class=\"line\">#输出 1 abc</span><br><span class=\"line\"></span><br><span class=\"line\"># 没有引号也可以输出</span><br><span class=\"line\">printf %s abcdef</span><br><span class=\"line\">#输出 abcdef</span><br><span class=\"line\"></span><br><span class=\"line\"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span><br><span class=\"line\">printf %s abc def</span><br><span class=\"line\">#输出 abcdef</span><br><span class=\"line\">printf &quot;%s\\n&quot; abc def</span><br><span class=\"line\">#输出</span><br><span class=\"line\"># abc</span><br><span class=\"line\"># def</span><br><span class=\"line\">printf &quot;%s %s %s\\n&quot; a b c d e f g h i j</span><br><span class=\"line\">#输出</span><br><span class=\"line\"># a b c</span><br><span class=\"line\"># d e f</span><br><span class=\"line\"># g h i</span><br><span class=\"line\"># j</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span><br><span class=\"line\">printf &quot;%s and %d \\n&quot; </span><br><span class=\"line\">#输出 and 0</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果以 %d 的格式来显示字符串，那么会有警告，提示无效的数字，此时默认置为 0</span><br><span class=\"line\">printf &quot;The first program always prints&apos;%s,%d\\n&apos;&quot; Hello Shell</span><br><span class=\"line\">#输出</span><br><span class=\"line\"># -bash: printf: Shell: invalid number</span><br><span class=\"line\"># The first program always prints &apos;Hello,0&apos;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"八-Shell中条件语句\"><a href=\"#八-Shell中条件语句\" class=\"headerlink\" title=\"八. Shell中条件语句\"></a>八. Shell中条件语句</h3><h4 id=\"1-if语句\"><a href=\"#1-if语句\" class=\"headerlink\" title=\"1. if语句\"></a>1. if语句</h4><blockquote>\n<ul>\n<li>if [ 表达式 ] then  语句  fi</li>\n<li>if [ 表达式 ] then 语句 else 语句 fi</li>\n<li>if [ 表达式] then 语句  elif[ 表达式 ] then 语句 elif[ 表达式 ] then 语句   …… fi</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\">if [ $a == $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;a is equal to b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;a is not equal to b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">或</span><br><span class=\"line\">if test $[2*3] -eq $[1+5]; then echo &apos;The two numbers are equal!&apos;; fi;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>test 命令用于检查某个条件是否成立，与方括号([ ])类似</p>\n</blockquote>\n<h4 id=\"2-case语句\"><a href=\"#2-case语句\" class=\"headerlink\" title=\"2. case语句\"></a>2. case语句</h4><blockquote>\n<ul>\n<li>取值后面必须为关键字<strong>in</strong>，每一模式必须以<strong>右括号</strong>结束。</li>\n<li>取值可以为<strong>变量</strong>或<strong>常数</strong>。</li>\n<li>匹配发现取值符合某一模式后，其间所有命令开始<strong>执行至;;处</strong>。</li>\n<li><strong>;;与其他语言中的break类似</strong>，意思是跳到整个<strong>case</strong>语句的最后。</li>\n<li>如果无一匹配模式，使用<strong>星号*捕获</strong>该值，再执行后面的命令。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case 值 in</span><br><span class=\"line\">模式1)</span><br><span class=\"line\">    command1</span><br><span class=\"line\">    command2</span><br><span class=\"line\">    command3</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">模式2）</span><br><span class=\"line\">    command1</span><br><span class=\"line\">    command2</span><br><span class=\"line\">    command3</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">    command1</span><br><span class=\"line\">    command2</span><br><span class=\"line\">    command3</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<hr>\n<h3 id=\"九-Shell中循环语句\"><a href=\"#九-Shell中循环语句\" class=\"headerlink\" title=\"九. Shell中循环语句\"></a>九. Shell中循环语句</h3><h4 id=\"1-for循环\"><a href=\"#1-for循环\" class=\"headerlink\" title=\"1. for循环\"></a>1. for循环</h4><blockquote>\n<ul>\n<li>列表是一组值（数字、字符串等）组成的序列，每个值通过空格分隔。</li>\n<li>每循环一次，就将列表中的下一个值赋给变量。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for 变量 in 列表</span><br><span class=\"line\">do</span><br><span class=\"line\">    command1</span><br><span class=\"line\">    command2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    commandN</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">for loop in 1 2 3 4 5</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot;The value is: $loop&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">for FILE in $HOME/.bash*</span><br><span class=\"line\">do</span><br><span class=\"line\">   echo $FILE</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-while循环\"><a href=\"#2-while循环\" class=\"headerlink\" title=\"2. while循环\"></a>2. while循环</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while command</span><br><span class=\"line\">do</span><br><span class=\"line\">   Statement(s) to be executed if command is true</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">COUNTER=0</span><br><span class=\"line\">while [ $COUNTER -lt 5 ]</span><br><span class=\"line\">do</span><br><span class=\"line\">    COUNTER=&apos;expr $COUNTER+1&apos;</span><br><span class=\"line\">    echo $COUNTER</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-until循环\"><a href=\"#3-until循环\" class=\"headerlink\" title=\"3. until循环\"></a>3. until循环</h4><blockquote>\n<ul>\n<li>until 循环执行一系列命令直至条件为 true 时停止。</li>\n<li>until 循环与 while 循环在处理方式上刚好相反。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">until command</span><br><span class=\"line\">do</span><br><span class=\"line\">   Statement(s) to be executed until command is true</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">command 一般为条件表达式，如果返回值为false，则继续执行循环体内的语句，否则跳出循环。</span><br><span class=\"line\">类似地，在循环中使用 break 与 continue 跳出循环。</span><br><span class=\"line\">另外，break 命令后面还可以跟一个整数，表示跳出第几层循环。</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"十-Shell的函数\"><a href=\"#十-Shell的函数\" class=\"headerlink\" title=\"十. Shell的函数\"></a>十. Shell的函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shell函数必须先定义后使用</span><br><span class=\"line\">function_name () &#123;</span><br><span class=\"line\">    list of commands</span><br><span class=\"line\">    [ return value ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">也可以加上function关键字：</span><br><span class=\"line\">function function_name () &#123;</span><br><span class=\"line\">    list of commands</span><br><span class=\"line\">    [ return value ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>调用函数只需要给出函数名，不需要加括号。</li>\n<li>函数返回值，可以显式增加return语句；如果不加，会将最后一条命令运行结果作为返回值。</li>\n<li>Shell 函数返回值只能是整数，一般用来表示函数执行成功与否，0表示成功，其他值表示失败。</li>\n<li>函数的参数可以通过 $n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">funWithParam()&#123;</span><br><span class=\"line\">    echo &quot;The value of the first parameter is $1 !&quot;</span><br><span class=\"line\">    echo &quot;The value of the second parameter is $2 !&quot;</span><br><span class=\"line\">    echo &quot;The value of the tenth parameter is $&#123;10&#125; !&quot;</span><br><span class=\"line\">    echo &quot;The value of the eleventh parameter is $&#123;11&#125; !&quot;</span><br><span class=\"line\">    echo &quot;The amount of the parameters is $# !&quot;  # 参数个数</span><br><span class=\"line\">    echo &quot;The string of the parameters is $* !&quot;  # 传递给函数的所有参数</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">funWithParam 1 2 3 4 5 6 7 8 9 34 73</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>像删除变量一样，删除函数也可以使用 unset 命令，不过要加上 .f 选项</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unset .f function_name</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"十一-Shell的文件包含\"><a href=\"#十一-Shell的文件包含\" class=\"headerlink\" title=\"十一. Shell的文件包含\"></a>十一. Shell的文件包含</h3><blockquote>\n<ul>\n<li>两种方式的效果相同，简单起见，一般使用点号(.)，但是注意点号(.)和文件名中间有一空格。</li>\n<li>被包含脚本不需要有执行权限.</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#脚本1 s1.sh</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo &quot;脚本1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#脚本2 s2.sh</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo &quot;脚本2&quot;</span><br><span class=\"line\">echo &quot;调用脚本1&quot;</span><br><span class=\"line\">. s1.sh</span><br><span class=\"line\">source s1.sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用脚本2</span><br><span class=\"line\">#输出</span><br><span class=\"line\"># 脚本2</span><br><span class=\"line\"># 调用脚本1</span><br><span class=\"line\"># 脚本1</span><br><span class=\"line\"># 脚本1</span><br></pre></td></tr></table></figure>\n<h3 id=\"补充-内置命令-一些常用的命令\"><a href=\"#补充-内置命令-一些常用的命令\" class=\"headerlink\" title=\"补充,内置命令,一些常用的命令\"></a>补充,内置命令,一些常用的命令</h3><h4 id=\"1-awk-amp-amp-sed\"><a href=\"#1-awk-amp-amp-sed\" class=\"headerlink\" title=\"1.awk&amp;&amp;sed\"></a>1.awk&amp;&amp;sed</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将你找的字符串下一行,替换成指定字符串</span><br><span class=\"line\">sed -i &apos;/你找的字符串/ &#123; N; s/\\n.*$/\\n你要写的字符串/&#125;&apos; 你的文件</span><br><span class=\"line\"></span><br><span class=\"line\"># 将文件大小大于0的打印出来</span><br><span class=\"line\">ll ./*.log| awk -F &quot; &quot; &apos;&#123;if($5&gt;0)&#123;print $9&#125;&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># 可以去除文本中多打的分割符</span><br><span class=\"line\">awk -v OFS=&quot;\\t&quot; &apos;&#123;print $1,$2,$3,$4,$5,$6&#125;&apos; test.txt &gt; test.bak</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出第一行</span><br><span class=\"line\">awk &apos;NR==1&apos; test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出奇数行</span><br><span class=\"line\">awk &apos;NR%2&apos; test.txt</span><br><span class=\"line\">awk &apos;++i%2&apos; test.txt</span><br><span class=\"line\">sed -n &apos;1~2p&apos; test1.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出偶数行</span><br><span class=\"line\">awk &apos;!(NR%2)&apos; test.txt</span><br><span class=\"line\">awk &apos;i++%2&apos; test.txt</span><br><span class=\"line\">sed -n &apos;2~2p&apos; test1.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 行数对3取余,余数为1的输出</span><br><span class=\"line\">awk &apos;NR%3==1&apos; test1.txt</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-date\"><a href=\"#2-date\" class=\"headerlink\" title=\"2. date\"></a>2. date</h4><blockquote>\n<p>如果带时分秒,指定时间应放在日期操作后面</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将输入日期转换成时间戳</span><br><span class=\"line\">START_DAY=$(date -d &quot;2018-10-27&quot; +%s)</span><br><span class=\"line\"></span><br><span class=\"line\"># 指定日期两个月前的日期</span><br><span class=\"line\">date -d &quot;2018-08-17 -2 month&quot; +&quot;%Y-%m-%d&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取当前时间</span><br><span class=\"line\">date &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 将时间戳转成字符串</span><br><span class=\"line\">date -d @1287331200  &quot;+%Y-%m-%d&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果要得到指定日期的前后的日期</span><br><span class=\"line\"># 1.得到时间戳</span><br><span class=\"line\">seconds=`date -d &quot;2010-10-18 00:00:00&quot; +%s`       </span><br><span class=\"line\"># 2.加上一天的秒数86400</span><br><span class=\"line\">seconds_new=`expr $seconds + 86400`</span><br><span class=\"line\"># 3.获得指定日前加上一天的日期</span><br><span class=\"line\">date_new=`date -d @$seconds_new &quot;+%Y-%m-%d&quot;`   </span><br><span class=\"line\"></span><br><span class=\"line\"># 获取前一秒时间</span><br><span class=\"line\">date -d &quot;1 seconds ago&quot; &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\">date -d &quot;1 seconds ago 2010-01-11 13:24:59&quot; &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取前一分钟时间</span><br><span class=\"line\">date -d &quot;1 minutes ago&quot; &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\">date -d &quot;1 minutes ago 2010-01-11 13:24:59&quot; &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取前一小时时间</span><br><span class=\"line\">date -d &quot;1 hours ago&quot; &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\">date -d &quot;1 hours ago 2010-01-11 13:24:59&quot; &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取前一天的日期</span><br><span class=\"line\">date -d &quot;1 days ago&quot; +%Y-%m-%d</span><br><span class=\"line\">date -d &quot;yesterday&quot; +%Y-%m-%d</span><br><span class=\"line\">date -d &quot;2018-12-17 -1 day&quot; +%Y-%m-%d</span><br><span class=\"line\">date -d &quot;-1 day 2018-12-17 13:24:59&quot; &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取前一周的日期</span><br><span class=\"line\">date -d &quot;1 weeks ago&quot; +%Y-%m-%d</span><br><span class=\"line\">date -d &quot;2018-12-18 -1 week&quot; +%Y-%m-%d</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-截取字符串\"><a href=\"#3-截取字符串\" class=\"headerlink\" title=\"3. 截取字符串\"></a>3. 截取字符串</h4><blockquote>\n<p>从0开始计算下标<br>左边的第一个字符是用<strong>0</strong>表示，右边的第一个字符用<strong>0-1</strong>表示</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># #号截取,删除左边字符,保留右边字符</span><br><span class=\"line\"># var 是变量名,# 号是运算符,*// 表示从左边开始删除第一个 // 号及左边的所有字符</span><br><span class=\"line\">var=&quot;http://www.aaa.com/123.html&quot;</span><br><span class=\"line\">echo $&#123;var#*//&#125;</span><br><span class=\"line\">#输出 www.aaa.com/123.html</span><br><span class=\"line\"></span><br><span class=\"line\"># ##号截取,删除左边字符,保留右边字符</span><br><span class=\"line\"># ##*/ 表示从左边开始删除最后（最右边）一个 / 号及左边的所有字符</span><br><span class=\"line\">echo $&#123;var##*/&#125;</span><br><span class=\"line\">#输出 123.html</span><br><span class=\"line\"></span><br><span class=\"line\"># %号截取,删除右边字符,保留左边字符</span><br><span class=\"line\"># %/* 表示从右边开始,删除第一个 / 号及右边的字符</span><br><span class=\"line\">echo $&#123;var%/*&#125;</span><br><span class=\"line\">#输出 http://www.aaa.com</span><br><span class=\"line\"></span><br><span class=\"line\"># %%号截取,删除右边字符,保留左边字符</span><br><span class=\"line\"># %%/* 表示从右边开始,删除最后（最左边）一个 / 号及右边的字符</span><br><span class=\"line\">echo $&#123;var%%/*&#125;</span><br><span class=\"line\">#输出 http:</span><br><span class=\"line\"></span><br><span class=\"line\"># 截取从左边第几个字符开始，及字符的个数</span><br><span class=\"line\"># 其中的0表示左边第一个字符开始,5表示字符的总个数</span><br><span class=\"line\">echo $&#123;var:0:5&#125;</span><br><span class=\"line\">#输出 http:</span><br><span class=\"line\"></span><br><span class=\"line\"># 从左边第几个字符开始,一直到结束</span><br><span class=\"line\">echo $&#123;var:7&#125;</span><br><span class=\"line\">#输出 www.aaa.com/123.html</span><br><span class=\"line\"></span><br><span class=\"line\"># 从右边第几个字符开始,及字符的个数</span><br><span class=\"line\"># 其中的 0-8 表示右边算起第八个字符开始,3 表示字符的个数</span><br><span class=\"line\">echo $&#123;var:0-8:3&#125;</span><br><span class=\"line\">#输出 123</span><br><span class=\"line\"></span><br><span class=\"line\"># 从右边第几个字符开始,一直到结束</span><br><span class=\"line\"># 表示从右边第八个字符开始,一直到结束</span><br><span class=\"line\">echo $&#123;var:0-8&#125;</span><br><span class=\"line\">#输出 123.html</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"一-约定标记\"><a href=\"#一-约定标记\" class=\"headerlink\" title=\"一. 约定标记\"></a>一. 约定标记</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br></pre></td></tr></table></figure>","more":"<hr>\n<h3 id=\"二-变量\"><a href=\"#二-变量\" class=\"headerlink\" title=\"二. 变量\"></a>二. 变量</h3><h4 id=\"1-定义变量\"><a href=\"#1-定义变量\" class=\"headerlink\" title=\"1. 定义变量\"></a>1. 定义变量</h4><ul>\n<li>变量名和等号之间<strong>不能有空格</strong></li>\n<li>首个字符必须为字母(a-z,A-Z)</li>\n<li>中间不能有空格,可以使用下划线</li>\n<li>不能使用标点符号</li>\n<li>不能使用bash里的关键字<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">country=&quot;china&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2-使用变量\"><a href=\"#2-使用变量\" class=\"headerlink\" title=\"2. 使用变量\"></a>2. 使用变量</h4><blockquote>\n<p>只需要在一个定义过的变量前面加上美元符号$就可以了,另外,对于变量的{}是可以选择的,它的目的为帮助解释器识别变量的边界</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $country</span><br><span class=\"line\">echo $&#123;country&#125;</span><br><span class=\"line\">echo &quot;I love my $&#123;country&#125;abcd!&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-重定义变量\"><a href=\"#3-重定义变量\" class=\"headerlink\" title=\"3. 重定义变量\"></a>3. 重定义变量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">country=&quot;China&quot;</span><br><span class=\"line\">country=&quot;USA&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-只读变量\"><a href=\"#4-只读变量\" class=\"headerlink\" title=\"4. 只读变量\"></a>4. 只读变量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">readonly country=&quot;China&quot;</span><br><span class=\"line\">或</span><br><span class=\"line\">country=&quot;China&quot;</span><br><span class=\"line\">readonly country</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-删除变量\"><a href=\"#5-删除变量\" class=\"headerlink\" title=\"5. 删除变量\"></a>5. 删除变量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unset country</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-特殊变量\"><a href=\"#6-特殊变量\" class=\"headerlink\" title=\"6. 特殊变量\"></a>6. 特殊变量</h4><table>\n<thead>\n<tr>\n<th><strong>变量</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$0</td>\n<td>当前脚本的文件名</td>\n</tr>\n<tr>\n<td>$n</td>\n<td>传递给脚本或函数的参数.n是一个数字,表示第几个参数</td>\n</tr>\n<tr>\n<td>$#</td>\n<td>传递给脚本或函数的参数个数</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>传递给脚本或函数的所有参数</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>传递给脚本或函数的所有参数</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>上个命令的退出状态,或函数的返回值</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>当前Shell进程ID</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$* 和 $@ 的区别为: </span><br><span class=\"line\">    1. $* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(&quot; &quot;)包含时，都以&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot; 的形式输出所有参数。</span><br><span class=\"line\">    2. 当它们被双引号(&quot; &quot;)包含时，&quot;$*&quot; 会将所有的参数作为一个整体，以&quot;$1 $2 … $n&quot;的形式输出所有参数；&quot;$@&quot; 会将各个参数分开，以&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot; 的形式输出所有参数。</span><br><span class=\"line\">一般直接使用$@</span><br><span class=\"line\"></span><br><span class=\"line\">$? 可以获取上一个命令的退出状态。所谓退出状态，就是上一个命令执行后的返回结果。退出状态是一个数字，一般情况下，大部分命令执行成功会返回 0，失败返回 1。</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"三-Shell的替换\"><a href=\"#三-Shell的替换\" class=\"headerlink\" title=\"三. Shell的替换\"></a>三. Shell的替换</h3><h4 id=\"1-转义符\"><a href=\"#1-转义符\" class=\"headerlink\" title=\"1. 转义符\"></a>1. 转义符</h4><table>\n<thead>\n<tr>\n<th>header 1</th>\n<th>header 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>发出警告声； </td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>删除前一个字符； </td>\n</tr>\n<tr>\n<td>\\c</td>\n<td>最后不加上换行符号； </td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换行但光标仍旧停留在原来的位置； </td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行且光标移至行首； </td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>光标移至行首，但不换行； </td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>插入tab； </td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>与\\f相同； </td>\n</tr>\n<tr>\n<td>\\</td>\n<td>插入\\字符； </td>\n</tr>\n<tr>\n<td>\\nnn</td>\n<td>插入nnn（八进制）所代表的ASCII字符；</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>使用 echo 命令的 –E 选项禁止转义，默认也是不转义的；</p>\n</blockquote>\n<blockquote>\n<p>使用 –n 选项可以禁止插入换行符；</p>\n</blockquote>\n<blockquote>\n<p>使用 echo 命令的 –e 选项可以对转义字符进行替换.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;\\\\&quot;           #得到 \\</span><br><span class=\"line\">echo -e &quot;\\\\&quot;        #得到 \\</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;\\\\\\\\&quot;         #得到 \\\\</span><br><span class=\"line\">echo -e &quot;\\\\&quot;        #得到 \\</span><br><span class=\"line\"></span><br><span class=\"line\">使用-e 如果存在其他转义字符,那么\\\\\\\\等于\\</span><br><span class=\"line\">echo -e &quot;aa\\\\\\\\aa&quot;  #得到 aa\\aa</span><br><span class=\"line\">echo -e &quot;aa\\\\aa&quot;    #得到 aaa</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-命令替换\"><a href=\"#2-命令替换\" class=\"headerlink\" title=\"2. 命令替换\"></a>2. 命令替换</h4><blockquote>\n<p>把一个命令的输出赋值给一个变量,方法为把命令用<strong>反引号</strong>(在Esc下方)引起来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">directory=`pwd`</span><br><span class=\"line\">echo $directory</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"3-变量替换\"><a href=\"#3-变量替换\" class=\"headerlink\" title=\"3. 变量替换\"></a>3. 变量替换</h4><blockquote>\n<p>可以根据变量的状态（是否为空、是否定义等）来改变它的值</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>形式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>${var}</td>\n<td>变量本来的值</td>\n</tr>\n<tr>\n<td>${var:-word}</td>\n<td>如果变量var为空或已被删除(unset),那么返回word,但不改变var的值</td>\n</tr>\n<tr>\n<td>${var:=word}</td>\n<td>如果变量var为空或已被删除(unset),那么返回word,并将var的值设置为word</td>\n</tr>\n<tr>\n<td>${var:?message}</td>\n<td>如果变量var为空或已被删除(unset),那么将消息message送到标准错误输出,可以用来检测变量var是否可以被正常赋值.<strong>若此替换出现在Shell脚本中,那么脚本将停止运行</strong></td>\n</tr>\n<tr>\n<td>${var:+word}</td>\n<td>如果变量var被定义,那么返回word,但不改变var的值</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"四-Shell的运算符\"><a href=\"#四-Shell的运算符\" class=\"headerlink\" title=\"四. Shell的运算符\"></a>四. Shell的运算符</h3><h4 id=\"1-算数运算符\"><a href=\"#1-算数运算符\" class=\"headerlink\" title=\"1. 算数运算符\"></a>1. 算数运算符</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加法</td>\n<td><code>expr $a + $b</code></td>\n</tr>\n<tr>\n<td>-</td>\n<td>减法</td>\n<td><code>expr $a - $b</code></td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘法</td>\n<td><code>expr $a \\* $b</code></td>\n</tr>\n<tr>\n<td>/</td>\n<td>除法</td>\n<td><code>expr $a / $b</code></td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余</td>\n<td><code>expr $a % $b</code></td>\n</tr>\n<tr>\n<td>=</td>\n<td>赋值</td>\n<td>a=$b</td>\n</tr>\n<tr>\n<td>==</td>\n<td>相等</td>\n<td>[ $a == $b ]</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不相等</td>\n<td>[ $a != $b ]</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>在expr中的乖号为：*</p>\n</blockquote>\n<blockquote>\n<p>在expr中的表达式与运算符之间要有空格，否则错误；</p>\n</blockquote>\n<blockquote>\n<p>在[ $a == $b ]与[ $a != $b ]中，要需要在方括号与变量以及变量与运算符之间也需要有括号， 否则为错误的。</p>\n</blockquote>\n<h4 id=\"2-关系运算符\"><a href=\"#2-关系运算符\" class=\"headerlink\" title=\"2. 关系运算符\"></a>2. 关系运算符</h4><blockquote>\n<p>只支持数字，不支持字符串，除非字符串的值是数字。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-eq</td>\n<td>相等返回true</td>\n<td>[ $a -eq $b ]</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>不相等返回true</td>\n<td>[ $a -ne $b ]</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>大于返回true</td>\n<td>[ $a -gt $b ]</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>小于返回true</td>\n<td>[ $a -lt $b ]</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>大于等于返回true</td>\n<td>[ $a -ge $b ]</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>小于等于返回true</td>\n<td>[ $a -le $b ]</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-布尔运算符\"><a href=\"#3-布尔运算符\" class=\"headerlink\" title=\"3. 布尔运算符\"></a>3. 布尔运算符</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>!</td>\n<td>非运算,表达式为true则返回false,否则返回true</td>\n<td>[ !false ]返回true</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>或运算,有true返回true</td>\n<td>[ $a -lt 20 -o $b -gt 100 ]</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>与运算,有false返回false</td>\n<td>[ $a -lt 20 -a $b -gt 100 ]</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"4-字符串运算符\"><a href=\"#4-字符串运算符\" class=\"headerlink\" title=\"4. 字符串运算符\"></a>4. 字符串运算符</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>相等返回true</td>\n<td>[ $a = $b ]</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不相等返回true</td>\n<td>[ $a != $b ]</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>检测字符串长度是否为0,为0返回true</td>\n<td>[ -z $a ]</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>检测字符串长度是否为0,不为0返回true</td>\n<td>[ -n $a ]</td>\n</tr>\n<tr>\n<td>str</td>\n<td>检测字符串是否为空,不为空返回true</td>\n<td>[ $a ]</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"5-文件测试运算符\"><a href=\"#5-文件测试运算符\" class=\"headerlink\" title=\"5. 文件测试运算符\"></a>5. 文件测试运算符</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-b file</td>\n<td>检测文件是否是块设备文件</td>\n<td>[ -b $file ]</td>\n</tr>\n<tr>\n<td>-c file</td>\n<td>检测文件是否是字符设备文件</td>\n<td>[ -c $file ]</td>\n</tr>\n<tr>\n<td>-d file</td>\n<td>检测文件是否是目录</td>\n<td>[ -d $file ]</td>\n</tr>\n<tr>\n<td>-f file</td>\n<td>检测文件是否是普通文件</td>\n<td>[ -f $file ]</td>\n</tr>\n<tr>\n<td>-g file</td>\n<td>检测文件是否设置了SGID位</td>\n<td>[ -g $file ]</td>\n</tr>\n<tr>\n<td>-k file</td>\n<td>检测文件是否设置了黏着位</td>\n<td>[ -k $file ]</td>\n</tr>\n<tr>\n<td>-p file</td>\n<td>检测文件是否是具名管道</td>\n<td>[ -p $file ]</td>\n</tr>\n<tr>\n<td>-u file</td>\n<td>检测文件是否设置了SUID位</td>\n<td>[ -u $file ]</td>\n</tr>\n<tr>\n<td>-r file</td>\n<td>检测文件是否可读</td>\n<td>[ -r $file ]</td>\n</tr>\n<tr>\n<td>-w file</td>\n<td>检测文件是否可写</td>\n<td>[ -w $file ]</td>\n</tr>\n<tr>\n<td>-x file</td>\n<td>检测文件是否可执行</td>\n<td>[ -x $file ]</td>\n</tr>\n<tr>\n<td>-s file</td>\n<td>检测文件是否为空(文件大小是否大于0)</td>\n<td>[ -s $file ]</td>\n</tr>\n<tr>\n<td>-e file</td>\n<td>检测文件(目录)是否存在</td>\n<td>[ -e $file ]</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"五-Shell的字符串\"><a href=\"#五-Shell的字符串\" class=\"headerlink\" title=\"五. Shell的字符串\"></a>五. Shell的字符串</h3><h4 id=\"1-单引号\"><a href=\"#1-单引号\" class=\"headerlink\" title=\"1. 单引号\"></a>1. 单引号</h4><blockquote>\n<ul>\n<li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）。</li>\n</ul>\n</blockquote>\n<h4 id=\"2-双引号\"><a href=\"#2-双引号\" class=\"headerlink\" title=\"2. 双引号\"></a>2. 双引号</h4><blockquote>\n<ul>\n<li>双引号里可以有变量</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>双引号里可以出现转义字符</li>\n</ul>\n</blockquote>\n<h4 id=\"3-拼接字符串\"><a href=\"#3-拼接字符串\" class=\"headerlink\" title=\"3. 拼接字符串\"></a>3. 拼接字符串</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">country=&quot;China&quot;</span><br><span class=\"line\">echo &quot;hello, $country&quot;</span><br><span class=\"line\">或</span><br><span class=\"line\">echo &quot;hello, &quot;$country&quot; &quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-获取字符串长度\"><a href=\"#4-获取字符串长度\" class=\"headerlink\" title=\"4. 获取字符串长度\"></a>4. 获取字符串长度</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string=&quot;abcd&quot;</span><br><span class=\"line\">echo $&#123;#string&#125; #输出 4</span><br><span class=\"line\">或</span><br><span class=\"line\">echo `expr length abcde` #输出 5</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-提取子字符串\"><a href=\"#5-提取子字符串\" class=\"headerlink\" title=\"5. 提取子字符串\"></a>5. 提取子字符串</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string=&quot;alibaba is a great company&quot;</span><br><span class=\"line\">echo $&#123;string:1:4&#125; #输出 liba</span><br><span class=\"line\">或</span><br><span class=\"line\">echo `expr substr abcde 2 3` #输出 bcd</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-查找字符下标\"><a href=\"#6-查找字符下标\" class=\"headerlink\" title=\"6. 查找字符下标:\"></a>6. 查找字符下标:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string=&quot;alibaba is a great company&quot;</span><br><span class=\"line\">echo `expr index &quot;$string&quot; i` #输出 3</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-处理路径的字符串\"><a href=\"#7-处理路径的字符串\" class=\"headerlink\" title=\"7. 处理路径的字符串\"></a>7. 处理路径的字符串</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basename</span><br><span class=\"line\">basename /home/yin/1.txt #输出 1.txt</span><br><span class=\"line\">basename /home/yin/1.txt .txt #输出 1</span><br><span class=\"line\"></span><br><span class=\"line\">dirname</span><br><span class=\"line\">dirname /usr/bin/ #输出 /usr</span><br><span class=\"line\">dirname /usr/bin/sort #输出 /usr/bin</span><br><span class=\"line\">dirname 1.txt #输出 .</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"六-Shell的数组\"><a href=\"#六-Shell的数组\" class=\"headerlink\" title=\"六. Shell的数组\"></a>六. Shell的数组</h3><blockquote>\n<p>bash支持一维数组,不支持多维数组,它的下标从0开始编号.用下标[n]获取数组元素；</p>\n</blockquote>\n<h4 id=\"1-定义数组\"><a href=\"#1-定义数组\" class=\"headerlink\" title=\"1. 定义数组\"></a>1. 定义数组</h4><blockquote>\n<p>用括号来表示数组，数组元素用”空格”符号分割开。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare -a array_name</span><br><span class=\"line\">或</span><br><span class=\"line\">array_name=(value0 value1 value2 value3)</span><br><span class=\"line\">或</span><br><span class=\"line\">array_name[0]=value0</span><br><span class=\"line\">array_name[1]=value1</span><br><span class=\"line\">array_name[2]=value2</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-读取数组\"><a href=\"#2-读取数组\" class=\"headerlink\" title=\"2. 读取数组\"></a>2. 读取数组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">读取某个下标的元素</span><br><span class=\"line\">$&#123;array_name[index]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">读取数组的全部元素</span><br><span class=\"line\">$&#123;array_name[*]&#125;</span><br><span class=\"line\">$&#123;array_name[@]&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-获取数组信息\"><a href=\"#3-获取数组信息\" class=\"headerlink\" title=\"3. 获取数组信息\"></a>3. 获取数组信息</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr_name=(1 2 3 4)</span><br><span class=\"line\"></span><br><span class=\"line\">取得数组元素的个数</span><br><span class=\"line\">length=$&#123;#array_name[@]&#125;</span><br><span class=\"line\">或</span><br><span class=\"line\">length=$&#123;#array_name[*]&#125;</span><br><span class=\"line\">#输出 4</span><br><span class=\"line\"></span><br><span class=\"line\">获取数组的下标</span><br><span class=\"line\">length=$&#123;!array_name[@]&#125;</span><br><span class=\"line\">或</span><br><span class=\"line\">length=$&#123;!array_name[*]&#125;</span><br><span class=\"line\">#输出 0 1 2 3</span><br><span class=\"line\"></span><br><span class=\"line\">取得数组单个元素的长度</span><br><span class=\"line\">lengthn=$&#123;#array_name[n]&#125;</span><br><span class=\"line\">#输出 1</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"七-printf函数\"><a href=\"#七-printf函数\" class=\"headerlink\" title=\"七. printf函数\"></a>七. printf函数</h3><blockquote>\n<ul>\n<li>printf 命令不用加括号</li>\n<li>format-string 可以没有引号，但最好加上，单引号双引号均可。</li>\n<li>参数多于格式控制符(%)时，format-string 可以重用，可以将所有参数都转换。</li>\n<li>arguments 使用空格分隔，不用逗号。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># format-string为双引号</span><br><span class=\"line\">printf &quot;%d %s\\n&quot; 1 &quot;abc&quot;</span><br><span class=\"line\">#输出 1 abc</span><br><span class=\"line\"></span><br><span class=\"line\"># 单引号与双引号效果一样 </span><br><span class=\"line\">printf &apos;%d %s\\n&apos; 1 &quot;abc&quot; </span><br><span class=\"line\">#输出 1 abc</span><br><span class=\"line\"></span><br><span class=\"line\"># 没有引号也可以输出</span><br><span class=\"line\">printf %s abcdef</span><br><span class=\"line\">#输出 abcdef</span><br><span class=\"line\"></span><br><span class=\"line\"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span><br><span class=\"line\">printf %s abc def</span><br><span class=\"line\">#输出 abcdef</span><br><span class=\"line\">printf &quot;%s\\n&quot; abc def</span><br><span class=\"line\">#输出</span><br><span class=\"line\"># abc</span><br><span class=\"line\"># def</span><br><span class=\"line\">printf &quot;%s %s %s\\n&quot; a b c d e f g h i j</span><br><span class=\"line\">#输出</span><br><span class=\"line\"># a b c</span><br><span class=\"line\"># d e f</span><br><span class=\"line\"># g h i</span><br><span class=\"line\"># j</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span><br><span class=\"line\">printf &quot;%s and %d \\n&quot; </span><br><span class=\"line\">#输出 and 0</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果以 %d 的格式来显示字符串，那么会有警告，提示无效的数字，此时默认置为 0</span><br><span class=\"line\">printf &quot;The first program always prints&apos;%s,%d\\n&apos;&quot; Hello Shell</span><br><span class=\"line\">#输出</span><br><span class=\"line\"># -bash: printf: Shell: invalid number</span><br><span class=\"line\"># The first program always prints &apos;Hello,0&apos;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"八-Shell中条件语句\"><a href=\"#八-Shell中条件语句\" class=\"headerlink\" title=\"八. Shell中条件语句\"></a>八. Shell中条件语句</h3><h4 id=\"1-if语句\"><a href=\"#1-if语句\" class=\"headerlink\" title=\"1. if语句\"></a>1. if语句</h4><blockquote>\n<ul>\n<li>if [ 表达式 ] then  语句  fi</li>\n<li>if [ 表达式 ] then 语句 else 语句 fi</li>\n<li>if [ 表达式] then 语句  elif[ 表达式 ] then 语句 elif[ 表达式 ] then 语句   …… fi</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\">if [ $a == $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">   echo &quot;a is equal to b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">   echo &quot;a is not equal to b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">或</span><br><span class=\"line\">if test $[2*3] -eq $[1+5]; then echo &apos;The two numbers are equal!&apos;; fi;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>test 命令用于检查某个条件是否成立，与方括号([ ])类似</p>\n</blockquote>\n<h4 id=\"2-case语句\"><a href=\"#2-case语句\" class=\"headerlink\" title=\"2. case语句\"></a>2. case语句</h4><blockquote>\n<ul>\n<li>取值后面必须为关键字<strong>in</strong>，每一模式必须以<strong>右括号</strong>结束。</li>\n<li>取值可以为<strong>变量</strong>或<strong>常数</strong>。</li>\n<li>匹配发现取值符合某一模式后，其间所有命令开始<strong>执行至;;处</strong>。</li>\n<li><strong>;;与其他语言中的break类似</strong>，意思是跳到整个<strong>case</strong>语句的最后。</li>\n<li>如果无一匹配模式，使用<strong>星号*捕获</strong>该值，再执行后面的命令。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case 值 in</span><br><span class=\"line\">模式1)</span><br><span class=\"line\">    command1</span><br><span class=\"line\">    command2</span><br><span class=\"line\">    command3</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">模式2）</span><br><span class=\"line\">    command1</span><br><span class=\"line\">    command2</span><br><span class=\"line\">    command3</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">    command1</span><br><span class=\"line\">    command2</span><br><span class=\"line\">    command3</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<hr>\n<h3 id=\"九-Shell中循环语句\"><a href=\"#九-Shell中循环语句\" class=\"headerlink\" title=\"九. Shell中循环语句\"></a>九. Shell中循环语句</h3><h4 id=\"1-for循环\"><a href=\"#1-for循环\" class=\"headerlink\" title=\"1. for循环\"></a>1. for循环</h4><blockquote>\n<ul>\n<li>列表是一组值（数字、字符串等）组成的序列，每个值通过空格分隔。</li>\n<li>每循环一次，就将列表中的下一个值赋给变量。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for 变量 in 列表</span><br><span class=\"line\">do</span><br><span class=\"line\">    command1</span><br><span class=\"line\">    command2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    commandN</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">for loop in 1 2 3 4 5</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot;The value is: $loop&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">for FILE in $HOME/.bash*</span><br><span class=\"line\">do</span><br><span class=\"line\">   echo $FILE</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-while循环\"><a href=\"#2-while循环\" class=\"headerlink\" title=\"2. while循环\"></a>2. while循环</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while command</span><br><span class=\"line\">do</span><br><span class=\"line\">   Statement(s) to be executed if command is true</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">COUNTER=0</span><br><span class=\"line\">while [ $COUNTER -lt 5 ]</span><br><span class=\"line\">do</span><br><span class=\"line\">    COUNTER=&apos;expr $COUNTER+1&apos;</span><br><span class=\"line\">    echo $COUNTER</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-until循环\"><a href=\"#3-until循环\" class=\"headerlink\" title=\"3. until循环\"></a>3. until循环</h4><blockquote>\n<ul>\n<li>until 循环执行一系列命令直至条件为 true 时停止。</li>\n<li>until 循环与 while 循环在处理方式上刚好相反。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">until command</span><br><span class=\"line\">do</span><br><span class=\"line\">   Statement(s) to be executed until command is true</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">command 一般为条件表达式，如果返回值为false，则继续执行循环体内的语句，否则跳出循环。</span><br><span class=\"line\">类似地，在循环中使用 break 与 continue 跳出循环。</span><br><span class=\"line\">另外，break 命令后面还可以跟一个整数，表示跳出第几层循环。</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"十-Shell的函数\"><a href=\"#十-Shell的函数\" class=\"headerlink\" title=\"十. Shell的函数\"></a>十. Shell的函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shell函数必须先定义后使用</span><br><span class=\"line\">function_name () &#123;</span><br><span class=\"line\">    list of commands</span><br><span class=\"line\">    [ return value ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">也可以加上function关键字：</span><br><span class=\"line\">function function_name () &#123;</span><br><span class=\"line\">    list of commands</span><br><span class=\"line\">    [ return value ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>调用函数只需要给出函数名，不需要加括号。</li>\n<li>函数返回值，可以显式增加return语句；如果不加，会将最后一条命令运行结果作为返回值。</li>\n<li>Shell 函数返回值只能是整数，一般用来表示函数执行成功与否，0表示成功，其他值表示失败。</li>\n<li>函数的参数可以通过 $n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">funWithParam()&#123;</span><br><span class=\"line\">    echo &quot;The value of the first parameter is $1 !&quot;</span><br><span class=\"line\">    echo &quot;The value of the second parameter is $2 !&quot;</span><br><span class=\"line\">    echo &quot;The value of the tenth parameter is $&#123;10&#125; !&quot;</span><br><span class=\"line\">    echo &quot;The value of the eleventh parameter is $&#123;11&#125; !&quot;</span><br><span class=\"line\">    echo &quot;The amount of the parameters is $# !&quot;  # 参数个数</span><br><span class=\"line\">    echo &quot;The string of the parameters is $* !&quot;  # 传递给函数的所有参数</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">funWithParam 1 2 3 4 5 6 7 8 9 34 73</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>像删除变量一样，删除函数也可以使用 unset 命令，不过要加上 .f 选项</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unset .f function_name</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"十一-Shell的文件包含\"><a href=\"#十一-Shell的文件包含\" class=\"headerlink\" title=\"十一. Shell的文件包含\"></a>十一. Shell的文件包含</h3><blockquote>\n<ul>\n<li>两种方式的效果相同，简单起见，一般使用点号(.)，但是注意点号(.)和文件名中间有一空格。</li>\n<li>被包含脚本不需要有执行权限.</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#脚本1 s1.sh</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo &quot;脚本1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#脚本2 s2.sh</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo &quot;脚本2&quot;</span><br><span class=\"line\">echo &quot;调用脚本1&quot;</span><br><span class=\"line\">. s1.sh</span><br><span class=\"line\">source s1.sh</span><br><span class=\"line\"></span><br><span class=\"line\"># 调用脚本2</span><br><span class=\"line\">#输出</span><br><span class=\"line\"># 脚本2</span><br><span class=\"line\"># 调用脚本1</span><br><span class=\"line\"># 脚本1</span><br><span class=\"line\"># 脚本1</span><br></pre></td></tr></table></figure>\n<h3 id=\"补充-内置命令-一些常用的命令\"><a href=\"#补充-内置命令-一些常用的命令\" class=\"headerlink\" title=\"补充,内置命令,一些常用的命令\"></a>补充,内置命令,一些常用的命令</h3><h4 id=\"1-awk-amp-amp-sed\"><a href=\"#1-awk-amp-amp-sed\" class=\"headerlink\" title=\"1.awk&amp;&amp;sed\"></a>1.awk&amp;&amp;sed</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将你找的字符串下一行,替换成指定字符串</span><br><span class=\"line\">sed -i &apos;/你找的字符串/ &#123; N; s/\\n.*$/\\n你要写的字符串/&#125;&apos; 你的文件</span><br><span class=\"line\"></span><br><span class=\"line\"># 将文件大小大于0的打印出来</span><br><span class=\"line\">ll ./*.log| awk -F &quot; &quot; &apos;&#123;if($5&gt;0)&#123;print $9&#125;&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># 可以去除文本中多打的分割符</span><br><span class=\"line\">awk -v OFS=&quot;\\t&quot; &apos;&#123;print $1,$2,$3,$4,$5,$6&#125;&apos; test.txt &gt; test.bak</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出第一行</span><br><span class=\"line\">awk &apos;NR==1&apos; test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出奇数行</span><br><span class=\"line\">awk &apos;NR%2&apos; test.txt</span><br><span class=\"line\">awk &apos;++i%2&apos; test.txt</span><br><span class=\"line\">sed -n &apos;1~2p&apos; test1.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出偶数行</span><br><span class=\"line\">awk &apos;!(NR%2)&apos; test.txt</span><br><span class=\"line\">awk &apos;i++%2&apos; test.txt</span><br><span class=\"line\">sed -n &apos;2~2p&apos; test1.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 行数对3取余,余数为1的输出</span><br><span class=\"line\">awk &apos;NR%3==1&apos; test1.txt</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-date\"><a href=\"#2-date\" class=\"headerlink\" title=\"2. date\"></a>2. date</h4><blockquote>\n<p>如果带时分秒,指定时间应放在日期操作后面</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将输入日期转换成时间戳</span><br><span class=\"line\">START_DAY=$(date -d &quot;2018-10-27&quot; +%s)</span><br><span class=\"line\"></span><br><span class=\"line\"># 指定日期两个月前的日期</span><br><span class=\"line\">date -d &quot;2018-08-17 -2 month&quot; +&quot;%Y-%m-%d&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取当前时间</span><br><span class=\"line\">date &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 将时间戳转成字符串</span><br><span class=\"line\">date -d @1287331200  &quot;+%Y-%m-%d&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果要得到指定日期的前后的日期</span><br><span class=\"line\"># 1.得到时间戳</span><br><span class=\"line\">seconds=`date -d &quot;2010-10-18 00:00:00&quot; +%s`       </span><br><span class=\"line\"># 2.加上一天的秒数86400</span><br><span class=\"line\">seconds_new=`expr $seconds + 86400`</span><br><span class=\"line\"># 3.获得指定日前加上一天的日期</span><br><span class=\"line\">date_new=`date -d @$seconds_new &quot;+%Y-%m-%d&quot;`   </span><br><span class=\"line\"></span><br><span class=\"line\"># 获取前一秒时间</span><br><span class=\"line\">date -d &quot;1 seconds ago&quot; &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\">date -d &quot;1 seconds ago 2010-01-11 13:24:59&quot; &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取前一分钟时间</span><br><span class=\"line\">date -d &quot;1 minutes ago&quot; &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\">date -d &quot;1 minutes ago 2010-01-11 13:24:59&quot; &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取前一小时时间</span><br><span class=\"line\">date -d &quot;1 hours ago&quot; &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\">date -d &quot;1 hours ago 2010-01-11 13:24:59&quot; &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取前一天的日期</span><br><span class=\"line\">date -d &quot;1 days ago&quot; +%Y-%m-%d</span><br><span class=\"line\">date -d &quot;yesterday&quot; +%Y-%m-%d</span><br><span class=\"line\">date -d &quot;2018-12-17 -1 day&quot; +%Y-%m-%d</span><br><span class=\"line\">date -d &quot;-1 day 2018-12-17 13:24:59&quot; &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取前一周的日期</span><br><span class=\"line\">date -d &quot;1 weeks ago&quot; +%Y-%m-%d</span><br><span class=\"line\">date -d &quot;2018-12-18 -1 week&quot; +%Y-%m-%d</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-截取字符串\"><a href=\"#3-截取字符串\" class=\"headerlink\" title=\"3. 截取字符串\"></a>3. 截取字符串</h4><blockquote>\n<p>从0开始计算下标<br>左边的第一个字符是用<strong>0</strong>表示，右边的第一个字符用<strong>0-1</strong>表示</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># #号截取,删除左边字符,保留右边字符</span><br><span class=\"line\"># var 是变量名,# 号是运算符,*// 表示从左边开始删除第一个 // 号及左边的所有字符</span><br><span class=\"line\">var=&quot;http://www.aaa.com/123.html&quot;</span><br><span class=\"line\">echo $&#123;var#*//&#125;</span><br><span class=\"line\">#输出 www.aaa.com/123.html</span><br><span class=\"line\"></span><br><span class=\"line\"># ##号截取,删除左边字符,保留右边字符</span><br><span class=\"line\"># ##*/ 表示从左边开始删除最后（最右边）一个 / 号及左边的所有字符</span><br><span class=\"line\">echo $&#123;var##*/&#125;</span><br><span class=\"line\">#输出 123.html</span><br><span class=\"line\"></span><br><span class=\"line\"># %号截取,删除右边字符,保留左边字符</span><br><span class=\"line\"># %/* 表示从右边开始,删除第一个 / 号及右边的字符</span><br><span class=\"line\">echo $&#123;var%/*&#125;</span><br><span class=\"line\">#输出 http://www.aaa.com</span><br><span class=\"line\"></span><br><span class=\"line\"># %%号截取,删除右边字符,保留左边字符</span><br><span class=\"line\"># %%/* 表示从右边开始,删除最后（最左边）一个 / 号及右边的字符</span><br><span class=\"line\">echo $&#123;var%%/*&#125;</span><br><span class=\"line\">#输出 http:</span><br><span class=\"line\"></span><br><span class=\"line\"># 截取从左边第几个字符开始，及字符的个数</span><br><span class=\"line\"># 其中的0表示左边第一个字符开始,5表示字符的总个数</span><br><span class=\"line\">echo $&#123;var:0:5&#125;</span><br><span class=\"line\">#输出 http:</span><br><span class=\"line\"></span><br><span class=\"line\"># 从左边第几个字符开始,一直到结束</span><br><span class=\"line\">echo $&#123;var:7&#125;</span><br><span class=\"line\">#输出 www.aaa.com/123.html</span><br><span class=\"line\"></span><br><span class=\"line\"># 从右边第几个字符开始,及字符的个数</span><br><span class=\"line\"># 其中的 0-8 表示右边算起第八个字符开始,3 表示字符的个数</span><br><span class=\"line\">echo $&#123;var:0-8:3&#125;</span><br><span class=\"line\">#输出 123</span><br><span class=\"line\"></span><br><span class=\"line\"># 从右边第几个字符开始,一直到结束</span><br><span class=\"line\"># 表示从右边第八个字符开始,一直到结束</span><br><span class=\"line\">echo $&#123;var:0-8&#125;</span><br><span class=\"line\">#输出 123.html</span><br></pre></td></tr></table></figure>"},{"title":"数据库存储过程及触发器","date":"2019-05-31T13:20:29.000Z","_content":"### 一.关键语法\n- **DELIMITER** 声明语句结束符\n- **CREATE PROCEDURE** 声明存储过程\n- **BEGIN ... END** 储存过程开始和结束符号\n- **SET** 变量赋值\n- **DECLARE** 变量定义\n- **DEFINER** 存储过程的权限\n---\n\n<!-- more -->\n\n### 二.入门实例\n```\nDELIMITER $$\nUSE `test`$$\nDROP PROCEDURE IF EXISTS `test`$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `test`()\nBEGIN\nSELECT COUNT(*) FROM `test`.`info`;\nEND$$\nDELIMITER ;\n```\n\n---\n\n### 三.存储过程使用\n```\nCALL test(); 调用存储过程\nSET @ip=1; 存储过程外定义变量\n```\n\n---\n\n### 四.参数\n- **IN** 输入参数,表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值\n- **OUT** 输出参数,该值可在存储过程内部被改变，并可返回\n- **INOUT** 输入输出参数,调用时指定，并且可被改变和返回\n\n#### 1.IN参数实例\n```\nset @ip=1;\n\nDELIMITER $$\nUSE `test`$$\nDROP PROCEDURE IF EXISTS `test`$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `test`(IN ip INT)\nBEGIN\nSELECT ip; // 1\nSET ip=10;\nSELECT ip; // 10\nEND$$\n\nDELIMITER ;\n\nCALL test(@ip);\n\nselect @ip; // 1\n```\n外影响内,内并不影响外的值\n\n#### 2.OUT参数实例\n```\nset @ip=1;\n\nDELIMITER $$\nUSE `test`$$\nDROP PROCEDURE IF EXISTS `test`$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `test`(OUT ip INT)\nBEGIN\nSELECT ip; // NULL\nSET ip=10;\nSELECT ip; // 10\nEND$$\n\nDELIMITER ;\n\nCALL test(@ip);\n\nselect @ip; // 10\n```\n存储过程内的会影响外部的变量,但是外部的不会影响存储过程内的变量\n\n#### 3.INOUT参数实例\n```\nset @ip=1;\n\nDELIMITER $$\nUSE `test`$$\nDROP PROCEDURE IF EXISTS `test`$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `test`(INOUT ip INT)\nBEGIN\nSELECT ip; // 1\nSET ip=10;\nSELECT ip; // 10\nEND$$\n\nDELIMITER ;\n\nCALL test(@ip);\n\nselect @ip; // 10\n```\n内外都能影响\n\n---\n\n### 五.变量\n#### 1.变量定义\n```\n局部变量声明一定要放在存储过程体的开始\nDECLARE l_int int unsigned default 4000000;\nDECLARE l_numeric number(8,2) DEFAULT 9.95;\nDECLARE l_date date DEFAULT '1999-12-31';  \nDECLARE l_datetime datetime DEFAULT '1999-12-31 23:59:59';  \nDECLARE l_varchar varchar(255) DEFAULT 'This will not be padded';\n```\n\n#### 2.变量赋值\n```\nset ip = value;\n```\n\n#### 3.用户变量\n```\nSELECT 'Hello World' into @x;\nSELECT @x;\nSET @y='Goodbye Cruel World';\nSELECT @y;\nSET @z=1+2+3;\nSELECT @z;\n// 存储过程中使用用户变量\nCREATE PROCEDURE GreetWorld() SELECT CONCAT(@greeting,' World');\nSET @greeting='Hello';\nCALL GreetWorld();  \n// 存储过程间传递全局范围的用户变量\nCREATE PROCEDURE p1() SET @last_procedure='p1';\nCREATE PROCEDURE p2() SELECT CONCAT('Last procedure was ',@last_procedure);\nCALL p1();\nCALL p2();\n```\n注意:\n- 用户变量名一般以@开头\n- 滥用用户变量会导致程序难以理解及管理\n\n---\n\n### 六.注释\n```\nDELIMITER $$\nUSE `test`$$\nDROP PROCEDURE IF EXISTS `test`$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `test`(INOUT ip INT) -- 创建存储过程\nBEGIN\nSELECT ip; -- 输出 1\n/*\nSET ip=10;\nSELECT ip; -- 输出 10\n*/\nEND$$\n\nDELIMITER ;\n```\n\n---\n\n### 七.存储过程的增删改查\n#### 1.创建\n```\nCREATE DEFINER=`root`@`localhost` PROCEDURE 存储过程名;\n```\n#### 2.删除\n```\nDROP PROCEDURE 存储过程名;\n```\n#### 3.修改\n```\nALTER PROCEDURE 存储过程名\n```\n#### 4.查看\n```\nSELECT NAME FROM mysql.proc WHERE db='数据库名';\nSELECT routine_name FROM information_schema.routines WHERE routine_schema='数据库名';\nSHOW PROCEDURE STATUS WHERE db='数据库名';\nSHOW CREATE PROCEDURE 数据库.存储过程名;\n```\n\n### 八.存储过程的控制语句\n#### 1.变量的作用域\n```\nDELIMITER //  \nCREATE PROCEDURE proc3(OUT x1 VARCHAR(5))  \nBEGIN \nDECLARE x1 VARCHAR(5) DEFAULT 'outer';  \nBEGIN \nDECLARE x1 VARCHAR(5) DEFAULT 'inner';  \nSELECT x1; -- inner\nEND;  \nSELECT x1; -- outer\nEND;  \n//\nDELIMITER ;  \n```\n只在自已的定义域中有效,出了定义域无效,可以通过out参数或者将其值指派给会话变量来保存其值。\n#### 2.if -then -else语句\n```\nDELIMITER //  \nCREATE PROCEDURE proc2(IN parameter INT)  \nBEGIN \nDECLARE var INT;  \nSET var=parameter+1;  \n\nIF var=0 THEN \n    INSERT INTO t VALUES(17);  \nEND IF;  \n\nIF parameter=0 THEN \n    UPDATE t SET s1=s1+1;  \nELSE \n    UPDATE t SET s1=s1+2;  \nEND IF;  \nEND;\n//  \nDELIMITER ;\n```\n#### 3.case语句\n```\nDELIMITER //  \nCREATE PROCEDURE proc3 (IN parameter INT)  \nBEGIN \nDECLARE var INT;  \nSET var=parameter+1;  \nCASE var  \nWHEN 0 THEN   \n    INSERT INTO t VALUES(17);  \nWHEN 1 THEN   \n    INSERT INTO t VALUES(18);  \nELSE   \n    INSERT INTO t VALUES(19);  \nEND CASE;  \nEND;  \n//  \nDELIMITER ; \n```\n#### 4.while 条件 DO ... end while;语句\n```\nDELIMITER //  \nCREATE PROCEDURE proc4()  \nBEGIN \nDECLARE var INT;  \nSET var=0;  \nWHILE var<6 DO  \n    INSERT INTO t VALUES(var);  \n    SET var=var+1;  \nEND WHILE;\nEND;  \n//  \nDELIMITER ; \n```\n在执行循环体之前进行判断\n#### 5.repeat ...until 条件 end repeat;语句\n```\nDELIMITER //  \nCREATE PROCEDURE proc5 ()  \nBEGIN   \nDECLARE v INT;  \nSET v=0;  \nREPEAT  \n    INSERT INTO t VALUES(v);  \n    SET v=v+1;  \nUNTIL v>=5\nEND REPEAT;  \nEND;  \n//  \nDELIMITER ;  \n```\n在执行循环体之后进行判断\n#### 6.loop ... leave end loop;语句\n```\nDELIMITER //  \nCREATE PROCEDURE proc6 ()  \nBEGIN \nDECLARE v INT;  \nSET v=0;  \nLOOP_LABLE:LOOP  \n    INSERT INTO t VALUES(v);  \n    SET v=v+1;  \n    IF v >=5 THEN \n        LEAVE LOOP_LABLE;  \n    END IF;  \nEND LOOP;  \nEND;  \n//  \nDELIMITER ;\n```\nleave语句的意义是离开循环,LOOP_LABEL是自定义的标号\n#### 7.LABLES 标号:\n在使用loop的时候，使用到的labels标号，对于labels可以用到while，loop，rrepeat等循环控制语句中。\n```\ncreate procedure pro13()\nlabel_1:begin\nlabel_2:while 0=1 do leave label_2;end while;\nlabel_3:repeat leave label_3;until 0=0 end repeat;\nlabel_4:loop leave label_4;end loop;\nend;\n\n-- 加了结束标号的语句,功能相同\ncreate procedure pro14()\nlabel_1:begin\nlabel_2:while 0=1 do leave label_2;end while label_2;\nlabel_3:repeat leave label_3;until 0=0 end repeat label_3;\nlabel_4:loop leave label_4;end loop label_4;\nend label_1;\n```\n\n#### 8.ITERATE迭代\nITERATE只能出现在LOOP，REPEAT和WHILE语句中，它的意思是“再次循环”,类似于continue\n```\nDELIMITER //  \nCREATE PROCEDURE proc11()  \nBEGIN \nDECLARE v INT;  \nSET v=0;  \nLOOP_LABLE:LOOP  \n    IF v=3 THEN   \n        SET v=v+1;  \n\t    ITERATE LOOP_LABLE;  \n\tEND IF;  \n    INSERT INTO t VALUES(v);  \n    SET v=v+1;  \n\tIF v>=5 THEN \n\t    LEAVE LOOP_LABLE;  \n    END IF;  \nEND LOOP;  \nEND;  \n//  \nDELIMITER ; \n```\n首先i的值为0，条件判断语句if i=3 then判断为假，跳过if语段，向数据库中插入0，然后i+1，同样后面的if i>=5 then判断也为假，也跳过；继续循环，同样插入1和2；在i=3的时候条件判断语句if i=3 then判断为真，执行i=i+1，i值为4，然后执行迭代iterate loop_label;，即语句执行到iterate loop_label;后直接跳到if i=3 then判断语句，执行判断，这个时候由于i=4，if i=3 then判断为假，跳过IF语段，将4添加到表中，i变为5，条件判断if i>=5 then判断为真，执行leave loop_label;跳出loop循环，然后执行end;//，结束整个存储过程。\n\n### 九.存储过程中的基本函数\n#### 1.字符串类\n```\nCHARSET(str) //返回字串字符集\nCONCAT (string2 [,... ]) //连接字串\nINSTR (string ,substring ) //返回substring首次在string中出现的位置,不存在返回0\nLCASE (string2 ) //转换成小写\nLEFT (string2 ,length ) //从string2中的左边起取length个字符\nLENGTH (string ) //string长度\nLOAD_FILE (file_name ) //从文件读取内容\nLOCATE (substring , string [,start_position ] ) 同INSTR,但可指定开始位置\nLPAD (string2 ,length ,pad ) //重复用pad加在string开头,直到字串长度为length\nLTRIM (string2 ) //去除前端空格\nREPEAT (string2 ,count ) //重复count次\nREPLACE (str ,search_str ,replace_str ) //在str中用replace_str替换search_str\nRPAD (string2 ,length ,pad) //在str后用pad补充,直到长度为length\nRTRIM (string2 ) //去除后端空格\nSTRCMP (string1 ,string2 ) //逐字符比较两字串大小,str1比str2小返回-1,大返回1,相同返回0\nSUBSTRING (str , position [,length ]) //从str的position开始,取length个字符\n注：mysql中处理字符串时，默认第一个字符下标为1，即参数position必须大于等于1\nTRIM([[BOTH|LEADING|TRAILING][padding] FROM]string2) //去除指定位置的指定字符\nUCASE (string2 ) //转换成大写\nRIGHT(string2,length) //取string2最后length个字符\nSPACE(count) //生成count个空格\n```\n#### 2.数学类\n```\nABS (number2 ) //绝对值\nBIN (decimal_number ) //十进制转二进制\nCEILING (number2 ) //向上取整\nCONV(number2,from_base,to_base) //进制转换\nFLOOR (number2 ) //向下取整\nFORMAT (number,decimal_places ) //保留小数位数\nHEX (DecimalNumber ) //转十六进制\n注：HEX()中可传入字符串，则返回其ASC-11码，如HEX('DEF')返回4142143\n也可以传入十进制整数，返回其十六进制编码，如HEX(25)返回19\nLEAST (number , number2 [,..]) //求最小值\nMOD (numerator ,denominator ) //求余\nPOWER (number ,power ) //求指数\nRAND([seed]) //随机数\nROUND (number [,decimals ]) //四舍五入,decimals为小数位数]\n注：返回类型并非均为整数,默认为整数\nSQRT(number2) //开平方\n```\n#### 3.日期时间类\n```\nADDTIME (date2 ,time_interval)//将time_interval加到date2\nCONVERT_TZ (datetime2 ,fromTZ ,toTZ) //转换时区\nCURRENT_DATE () //当前日期\nCURRENT_TIME () //当前时间\nCURRENT_TIMESTAMP () //当前时间戳\nDATE (datetime) //返回datetime的日期部分\nDATE_ADD (date2 , INTERVAL d_value d_type) //在date2中加上日期或时间\nDATE_FORMAT (datetime ,FormatCodes) //使用formatcodes格式显示datetime\nDATE_SUB (date2 , INTERVAL d_value d_type) //在date2上减去一个时间\nDATEDIFF (date1 ,date2) //两个日期差\nDAY (date) //返回日期的天\nDAYNAME (date) //英文星期\nDAYOFWEEK (date) //星期(1-7) ,1为星期天\nDAYOFYEAR (date) //一年中的第几天\nEXTRACT (interval_name FROM date) //从date中提取日期的指定部分\nMAKEDATE (year ,day) //给出年及年中的第几天,生成日期串\nMAKETIME (hour ,minute ,second) //生成时间串\nMONTHNAME (date ) //英文月份名\nNOW () //当前时间\nSEC_TO_TIME (seconds) //秒数转成时间\nSTR_TO_DATE (string ,format) //字串转成时间,以format格式显示\nTIMEDIFF (datetime1 ,datetime2) //两个时间差\nTIME_TO_SEC (time) //时间转秒数]\nWEEK (date_time [,start_of_week ]) //第几周\nYEAR (datetime) //年份\nDAYOFMONTH(datetime) //月的第几天\nHOUR(datetime) //小时\nLAST_DAY(date) //date的月的最后日期\nMICROSECOND(datetime) //微秒\nMONTH(datetime) //月\nMINUTE(datetime) //分返回符号,正负或0\n```\n\n--- \n\n### 十.分页存储过程\n```\nDELIMITER //  \nDROP PROCEDURE IF EXISTS pr_pager;\nCREATE PROCEDURE pr_pager(\n    IN p_table_name VARCHAR(1024),      -- 表名      \n    IN p_fields VARCHAR(1024),          -- 列名\n    IN p_page_size INT,                 -- 一页的大小\n    IN p_page_now INT,                  -- 页码\n    IN p_order_string VARCHAR(128),     -- 排序语句\n    IN p_where_string VARCHAR(1024),    -- where条件\n    OUT p_out_rows INT                    \n)\nNOT DETERMINISTIC\nSQL SECURITY DEFINER\nCOMMENT '分页存储过程'\n\nBEGIN\n  \nDECLARE m_begin_row INT DEFAULT 0;\nDECLARE m_limit_string CHAR(64);\n\nSET m_begin_row = (p_page_now - 1) * p_page_size;   -- 开始行=(页面-1)*一页的大小\nSET m_limit_string = CONCAT(' LIMIT ', m_begin_row, ', ', p_page_size);   -- 分页拼接 LIMIT 开始行,一页的大小\n\n-- SELECT COUNT(*) INTO @ROWS_TOTAL FROM 表名 where条件); 将总行数赋值给ROWS_TOTAL,作为返回值\nSET @COUNT_STRING = CONCAT('SELECT COUNT(*) INTO @ROWS_TOTAL FROM ', p_table_name, ' ', p_where_string);\n-- SELECT 列名 FROM 表名 where条件 order排序 limit语句; 最后的输出页数据\nSET @MAIN_STRING = CONCAT('SELECT ', p_fields, ' FROM ', p_table_name, ' ', p_where_string, ' ', p_order_string,m_limit_string);\n\nPREPARE count_stmt FROM @COUNT_STRING;  -- 预定义sql\nEXECUTE count_stmt;                     -- 执行sql    \nDEALLOCATE PREPARE count_stmt;          -- 释放掉连接\nSET p_out_rows = @ROWS_TOTAL;\n\nPREPARE main_stmt FROM @MAIN_STRING;\nEXECUTE main_stmt;\nDEALLOCATE PREPARE main_stmt;\n    \nEND;\n//\nDELIMITER ;\n\ncall pr_pager(\"t\",\"var\",3,3,\"\",\"\",@result);\ncall pr_pager(\"t\",\"var\",3,2,\"\",\"\",@result);\n```\n\n---\n\n### 十一.存储过程的优点\n```\n1.存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般 SQL 语句每执行一次就编译一次,所以使用存储过程可提高数据库执行速度。\n2.当对数据库进行复杂操作时(如对多个表进行 Update,Insert,Query,Delete 时），可将此复杂操作用存储过程封装起来与数据库提供的事务处理结合一起使用。这些操作，如果用程序来完成，就变成了一条条的 SQL 语句，可能要多次连接数据库。而换成存储，只需要连接一次数据库就可以了。\n3.存储过程可以重复使用,可减少数据库开发人员的工作量。\n4.安全性高,可设定只有某此用户才具有对指定存储过程的使用权。\n```\n\n---\n\n### 补充:触发器\n#### 1.语法\n```\nCREATE TRIGGER 触发器名\n触发时机(BEFORE,AFTER)\n触发事件(INSERT,UPDATE,DELETE) ON 被触发的表名\nFOR EACH ROW\n触发器程序体\n\n由此可见，可以建立6种触发器，即：BEFORE INSERT、BEFORE UPDATE、BEFORE DELETE、AFTER INSERT、AFTER UPDATE、AFTER DELETE。\n\n另外有一个限制是不能同时在一个表上建立2个相同类型的触发器，因此在一个表上最多建立6个触发器。\n```\n\n### 2.触发事件\n> - MySQL除了对**INSERT**、**UPDATE**、**DELETE**基本操作进行定义外，还定义了**LOAD DATA**和**REPLACE**语句，这两种语句也能引起上述6中类型的触发器的触发。\n> - **LOAD DATA**语句用于将一个文件装入到一个数据表中，相当与一系列的 INSERT 操作。\n> - **REPLACE**语句一般来说和 INSERT 语句很像，只是在表中有**primary key **或**unique**索引时，如果插入的数据和原来**primary key**或**unique**索引一致时，会先删除原来的数据，然后增加一条新数据，也就是说，一条 REPLACE 语句有时候等价于一条。\n> - **INSERT**语句，有时候等价于一条**DELETE**语句加上一条**INSERT**语句。\n> - **INSERT型触发器**：插入某一行时激活触发器，可能通过**INSERT**、**LOAD DATA**、**REPLACE**语句触发；\n> - **UPDATE型触发器**：更改某一行时激活触发器，可能通过**UPDATE**语句触发；\n> - **DELETE型触发器**：删除某一行时激活触发器，可能通过**DELETE**、**REPLACE**语句触发。\n\n### 3.触发器程序体\n> statement_list代表一个或多个语句的列表，列表内的每条语句都必须用分号（;）来结尾。\n```\nBEGIN\n[statement_list]\nEND\n```\n\n### 4.触发器实例\n```\nDELIMITER $\n-- 创建一个在对student表进行INSERT事件之后进行一系列操作的触发器\ncreate trigger tri_stuInsert after insert\non student for each row\nbegin\ndeclare c int;\n-- 查询原来class表的stuCount\nset c = (select stuCount from class where classID=new.classID);\n-- 将stuCount+1\nupdate class set stuCount = c + 1 where classID = new.classID;\nend\n$\nDELIMITER ;\n```\n\n### 5.NEW和OLD详解\n> MySQL中定义了**NEW**和**OLD**，用来表示触发器的所在表中，触发了触发器的那一行数据。\n> - 在**INSERT**型触发器中，**NEW**用来表示将要（**BEFORE**）或已经（**AFTER**）插入的新数据；\n> - 在**UPDATE**型触发器中，**OLD**用来表示将要或已经被修改的原数据，**NEW**用来表示将要或已经修改为的新数据；\n> - 在**DELETE**型触发器中，**OLD**用来表示将要或已经被删除的原数据；\n> \n> **使用方法**： **NEW.columnName**（columnName为相应数据表某一列名）\n>\n> 另外，**OLD**是只读的，而**NEW**则可以在触发器中使用SET赋值，这样不会再次触发触发器，造成循环调用（如每插入一个学生前，都在其学号前加“2013”）。\n\n### 6.触发器的查找与删除\n```\n-- 查找\nSHOW TRIGGERS [FROM schema_name]\nSELETE TRIGGER_SCHEMA,TRIGGER_NAME,DEFINER,ACTION_STATEMENT FROM TRIGGERS WHERE TRIGGER_SCHEMA='course';\n\n-- 删除\nDROP TRIGGER [IF EXISTS] [schema_name.]trigger_name\n```\n\n### 7.触发器的执行顺序\n> 建立的数据库一般都是**InnoDB**数据库，其上建立的表是事务性表，也就是事务安全的。这时，若SQL语句或触发器执行失败，MySQL会回滚事务，有：\n> - 如果**BEFORE**触发器执行失败，SQL无法正确执行。\n> - SQL执行失败时，**AFTER**型触发器不会触发。\n> - **AFTER**类型的触发器执行失败，SQL会回滚。\n\n","source":"_posts/数据库存储过程及触发器.md","raw":"---\ntitle: 数据库存储过程及触发器\ndate: 2019-05-31 21:20:29\ncategories: 数据库\ntags: mysql\n---\n### 一.关键语法\n- **DELIMITER** 声明语句结束符\n- **CREATE PROCEDURE** 声明存储过程\n- **BEGIN ... END** 储存过程开始和结束符号\n- **SET** 变量赋值\n- **DECLARE** 变量定义\n- **DEFINER** 存储过程的权限\n---\n\n<!-- more -->\n\n### 二.入门实例\n```\nDELIMITER $$\nUSE `test`$$\nDROP PROCEDURE IF EXISTS `test`$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `test`()\nBEGIN\nSELECT COUNT(*) FROM `test`.`info`;\nEND$$\nDELIMITER ;\n```\n\n---\n\n### 三.存储过程使用\n```\nCALL test(); 调用存储过程\nSET @ip=1; 存储过程外定义变量\n```\n\n---\n\n### 四.参数\n- **IN** 输入参数,表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值\n- **OUT** 输出参数,该值可在存储过程内部被改变，并可返回\n- **INOUT** 输入输出参数,调用时指定，并且可被改变和返回\n\n#### 1.IN参数实例\n```\nset @ip=1;\n\nDELIMITER $$\nUSE `test`$$\nDROP PROCEDURE IF EXISTS `test`$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `test`(IN ip INT)\nBEGIN\nSELECT ip; // 1\nSET ip=10;\nSELECT ip; // 10\nEND$$\n\nDELIMITER ;\n\nCALL test(@ip);\n\nselect @ip; // 1\n```\n外影响内,内并不影响外的值\n\n#### 2.OUT参数实例\n```\nset @ip=1;\n\nDELIMITER $$\nUSE `test`$$\nDROP PROCEDURE IF EXISTS `test`$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `test`(OUT ip INT)\nBEGIN\nSELECT ip; // NULL\nSET ip=10;\nSELECT ip; // 10\nEND$$\n\nDELIMITER ;\n\nCALL test(@ip);\n\nselect @ip; // 10\n```\n存储过程内的会影响外部的变量,但是外部的不会影响存储过程内的变量\n\n#### 3.INOUT参数实例\n```\nset @ip=1;\n\nDELIMITER $$\nUSE `test`$$\nDROP PROCEDURE IF EXISTS `test`$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `test`(INOUT ip INT)\nBEGIN\nSELECT ip; // 1\nSET ip=10;\nSELECT ip; // 10\nEND$$\n\nDELIMITER ;\n\nCALL test(@ip);\n\nselect @ip; // 10\n```\n内外都能影响\n\n---\n\n### 五.变量\n#### 1.变量定义\n```\n局部变量声明一定要放在存储过程体的开始\nDECLARE l_int int unsigned default 4000000;\nDECLARE l_numeric number(8,2) DEFAULT 9.95;\nDECLARE l_date date DEFAULT '1999-12-31';  \nDECLARE l_datetime datetime DEFAULT '1999-12-31 23:59:59';  \nDECLARE l_varchar varchar(255) DEFAULT 'This will not be padded';\n```\n\n#### 2.变量赋值\n```\nset ip = value;\n```\n\n#### 3.用户变量\n```\nSELECT 'Hello World' into @x;\nSELECT @x;\nSET @y='Goodbye Cruel World';\nSELECT @y;\nSET @z=1+2+3;\nSELECT @z;\n// 存储过程中使用用户变量\nCREATE PROCEDURE GreetWorld() SELECT CONCAT(@greeting,' World');\nSET @greeting='Hello';\nCALL GreetWorld();  \n// 存储过程间传递全局范围的用户变量\nCREATE PROCEDURE p1() SET @last_procedure='p1';\nCREATE PROCEDURE p2() SELECT CONCAT('Last procedure was ',@last_procedure);\nCALL p1();\nCALL p2();\n```\n注意:\n- 用户变量名一般以@开头\n- 滥用用户变量会导致程序难以理解及管理\n\n---\n\n### 六.注释\n```\nDELIMITER $$\nUSE `test`$$\nDROP PROCEDURE IF EXISTS `test`$$\n\nCREATE DEFINER=`root`@`localhost` PROCEDURE `test`(INOUT ip INT) -- 创建存储过程\nBEGIN\nSELECT ip; -- 输出 1\n/*\nSET ip=10;\nSELECT ip; -- 输出 10\n*/\nEND$$\n\nDELIMITER ;\n```\n\n---\n\n### 七.存储过程的增删改查\n#### 1.创建\n```\nCREATE DEFINER=`root`@`localhost` PROCEDURE 存储过程名;\n```\n#### 2.删除\n```\nDROP PROCEDURE 存储过程名;\n```\n#### 3.修改\n```\nALTER PROCEDURE 存储过程名\n```\n#### 4.查看\n```\nSELECT NAME FROM mysql.proc WHERE db='数据库名';\nSELECT routine_name FROM information_schema.routines WHERE routine_schema='数据库名';\nSHOW PROCEDURE STATUS WHERE db='数据库名';\nSHOW CREATE PROCEDURE 数据库.存储过程名;\n```\n\n### 八.存储过程的控制语句\n#### 1.变量的作用域\n```\nDELIMITER //  \nCREATE PROCEDURE proc3(OUT x1 VARCHAR(5))  \nBEGIN \nDECLARE x1 VARCHAR(5) DEFAULT 'outer';  \nBEGIN \nDECLARE x1 VARCHAR(5) DEFAULT 'inner';  \nSELECT x1; -- inner\nEND;  \nSELECT x1; -- outer\nEND;  \n//\nDELIMITER ;  \n```\n只在自已的定义域中有效,出了定义域无效,可以通过out参数或者将其值指派给会话变量来保存其值。\n#### 2.if -then -else语句\n```\nDELIMITER //  \nCREATE PROCEDURE proc2(IN parameter INT)  \nBEGIN \nDECLARE var INT;  \nSET var=parameter+1;  \n\nIF var=0 THEN \n    INSERT INTO t VALUES(17);  \nEND IF;  \n\nIF parameter=0 THEN \n    UPDATE t SET s1=s1+1;  \nELSE \n    UPDATE t SET s1=s1+2;  \nEND IF;  \nEND;\n//  \nDELIMITER ;\n```\n#### 3.case语句\n```\nDELIMITER //  \nCREATE PROCEDURE proc3 (IN parameter INT)  \nBEGIN \nDECLARE var INT;  \nSET var=parameter+1;  \nCASE var  \nWHEN 0 THEN   \n    INSERT INTO t VALUES(17);  \nWHEN 1 THEN   \n    INSERT INTO t VALUES(18);  \nELSE   \n    INSERT INTO t VALUES(19);  \nEND CASE;  \nEND;  \n//  \nDELIMITER ; \n```\n#### 4.while 条件 DO ... end while;语句\n```\nDELIMITER //  \nCREATE PROCEDURE proc4()  \nBEGIN \nDECLARE var INT;  \nSET var=0;  \nWHILE var<6 DO  \n    INSERT INTO t VALUES(var);  \n    SET var=var+1;  \nEND WHILE;\nEND;  \n//  \nDELIMITER ; \n```\n在执行循环体之前进行判断\n#### 5.repeat ...until 条件 end repeat;语句\n```\nDELIMITER //  \nCREATE PROCEDURE proc5 ()  \nBEGIN   \nDECLARE v INT;  \nSET v=0;  \nREPEAT  \n    INSERT INTO t VALUES(v);  \n    SET v=v+1;  \nUNTIL v>=5\nEND REPEAT;  \nEND;  \n//  \nDELIMITER ;  \n```\n在执行循环体之后进行判断\n#### 6.loop ... leave end loop;语句\n```\nDELIMITER //  \nCREATE PROCEDURE proc6 ()  \nBEGIN \nDECLARE v INT;  \nSET v=0;  \nLOOP_LABLE:LOOP  \n    INSERT INTO t VALUES(v);  \n    SET v=v+1;  \n    IF v >=5 THEN \n        LEAVE LOOP_LABLE;  \n    END IF;  \nEND LOOP;  \nEND;  \n//  \nDELIMITER ;\n```\nleave语句的意义是离开循环,LOOP_LABEL是自定义的标号\n#### 7.LABLES 标号:\n在使用loop的时候，使用到的labels标号，对于labels可以用到while，loop，rrepeat等循环控制语句中。\n```\ncreate procedure pro13()\nlabel_1:begin\nlabel_2:while 0=1 do leave label_2;end while;\nlabel_3:repeat leave label_3;until 0=0 end repeat;\nlabel_4:loop leave label_4;end loop;\nend;\n\n-- 加了结束标号的语句,功能相同\ncreate procedure pro14()\nlabel_1:begin\nlabel_2:while 0=1 do leave label_2;end while label_2;\nlabel_3:repeat leave label_3;until 0=0 end repeat label_3;\nlabel_4:loop leave label_4;end loop label_4;\nend label_1;\n```\n\n#### 8.ITERATE迭代\nITERATE只能出现在LOOP，REPEAT和WHILE语句中，它的意思是“再次循环”,类似于continue\n```\nDELIMITER //  \nCREATE PROCEDURE proc11()  \nBEGIN \nDECLARE v INT;  \nSET v=0;  \nLOOP_LABLE:LOOP  \n    IF v=3 THEN   \n        SET v=v+1;  \n\t    ITERATE LOOP_LABLE;  \n\tEND IF;  \n    INSERT INTO t VALUES(v);  \n    SET v=v+1;  \n\tIF v>=5 THEN \n\t    LEAVE LOOP_LABLE;  \n    END IF;  \nEND LOOP;  \nEND;  \n//  \nDELIMITER ; \n```\n首先i的值为0，条件判断语句if i=3 then判断为假，跳过if语段，向数据库中插入0，然后i+1，同样后面的if i>=5 then判断也为假，也跳过；继续循环，同样插入1和2；在i=3的时候条件判断语句if i=3 then判断为真，执行i=i+1，i值为4，然后执行迭代iterate loop_label;，即语句执行到iterate loop_label;后直接跳到if i=3 then判断语句，执行判断，这个时候由于i=4，if i=3 then判断为假，跳过IF语段，将4添加到表中，i变为5，条件判断if i>=5 then判断为真，执行leave loop_label;跳出loop循环，然后执行end;//，结束整个存储过程。\n\n### 九.存储过程中的基本函数\n#### 1.字符串类\n```\nCHARSET(str) //返回字串字符集\nCONCAT (string2 [,... ]) //连接字串\nINSTR (string ,substring ) //返回substring首次在string中出现的位置,不存在返回0\nLCASE (string2 ) //转换成小写\nLEFT (string2 ,length ) //从string2中的左边起取length个字符\nLENGTH (string ) //string长度\nLOAD_FILE (file_name ) //从文件读取内容\nLOCATE (substring , string [,start_position ] ) 同INSTR,但可指定开始位置\nLPAD (string2 ,length ,pad ) //重复用pad加在string开头,直到字串长度为length\nLTRIM (string2 ) //去除前端空格\nREPEAT (string2 ,count ) //重复count次\nREPLACE (str ,search_str ,replace_str ) //在str中用replace_str替换search_str\nRPAD (string2 ,length ,pad) //在str后用pad补充,直到长度为length\nRTRIM (string2 ) //去除后端空格\nSTRCMP (string1 ,string2 ) //逐字符比较两字串大小,str1比str2小返回-1,大返回1,相同返回0\nSUBSTRING (str , position [,length ]) //从str的position开始,取length个字符\n注：mysql中处理字符串时，默认第一个字符下标为1，即参数position必须大于等于1\nTRIM([[BOTH|LEADING|TRAILING][padding] FROM]string2) //去除指定位置的指定字符\nUCASE (string2 ) //转换成大写\nRIGHT(string2,length) //取string2最后length个字符\nSPACE(count) //生成count个空格\n```\n#### 2.数学类\n```\nABS (number2 ) //绝对值\nBIN (decimal_number ) //十进制转二进制\nCEILING (number2 ) //向上取整\nCONV(number2,from_base,to_base) //进制转换\nFLOOR (number2 ) //向下取整\nFORMAT (number,decimal_places ) //保留小数位数\nHEX (DecimalNumber ) //转十六进制\n注：HEX()中可传入字符串，则返回其ASC-11码，如HEX('DEF')返回4142143\n也可以传入十进制整数，返回其十六进制编码，如HEX(25)返回19\nLEAST (number , number2 [,..]) //求最小值\nMOD (numerator ,denominator ) //求余\nPOWER (number ,power ) //求指数\nRAND([seed]) //随机数\nROUND (number [,decimals ]) //四舍五入,decimals为小数位数]\n注：返回类型并非均为整数,默认为整数\nSQRT(number2) //开平方\n```\n#### 3.日期时间类\n```\nADDTIME (date2 ,time_interval)//将time_interval加到date2\nCONVERT_TZ (datetime2 ,fromTZ ,toTZ) //转换时区\nCURRENT_DATE () //当前日期\nCURRENT_TIME () //当前时间\nCURRENT_TIMESTAMP () //当前时间戳\nDATE (datetime) //返回datetime的日期部分\nDATE_ADD (date2 , INTERVAL d_value d_type) //在date2中加上日期或时间\nDATE_FORMAT (datetime ,FormatCodes) //使用formatcodes格式显示datetime\nDATE_SUB (date2 , INTERVAL d_value d_type) //在date2上减去一个时间\nDATEDIFF (date1 ,date2) //两个日期差\nDAY (date) //返回日期的天\nDAYNAME (date) //英文星期\nDAYOFWEEK (date) //星期(1-7) ,1为星期天\nDAYOFYEAR (date) //一年中的第几天\nEXTRACT (interval_name FROM date) //从date中提取日期的指定部分\nMAKEDATE (year ,day) //给出年及年中的第几天,生成日期串\nMAKETIME (hour ,minute ,second) //生成时间串\nMONTHNAME (date ) //英文月份名\nNOW () //当前时间\nSEC_TO_TIME (seconds) //秒数转成时间\nSTR_TO_DATE (string ,format) //字串转成时间,以format格式显示\nTIMEDIFF (datetime1 ,datetime2) //两个时间差\nTIME_TO_SEC (time) //时间转秒数]\nWEEK (date_time [,start_of_week ]) //第几周\nYEAR (datetime) //年份\nDAYOFMONTH(datetime) //月的第几天\nHOUR(datetime) //小时\nLAST_DAY(date) //date的月的最后日期\nMICROSECOND(datetime) //微秒\nMONTH(datetime) //月\nMINUTE(datetime) //分返回符号,正负或0\n```\n\n--- \n\n### 十.分页存储过程\n```\nDELIMITER //  \nDROP PROCEDURE IF EXISTS pr_pager;\nCREATE PROCEDURE pr_pager(\n    IN p_table_name VARCHAR(1024),      -- 表名      \n    IN p_fields VARCHAR(1024),          -- 列名\n    IN p_page_size INT,                 -- 一页的大小\n    IN p_page_now INT,                  -- 页码\n    IN p_order_string VARCHAR(128),     -- 排序语句\n    IN p_where_string VARCHAR(1024),    -- where条件\n    OUT p_out_rows INT                    \n)\nNOT DETERMINISTIC\nSQL SECURITY DEFINER\nCOMMENT '分页存储过程'\n\nBEGIN\n  \nDECLARE m_begin_row INT DEFAULT 0;\nDECLARE m_limit_string CHAR(64);\n\nSET m_begin_row = (p_page_now - 1) * p_page_size;   -- 开始行=(页面-1)*一页的大小\nSET m_limit_string = CONCAT(' LIMIT ', m_begin_row, ', ', p_page_size);   -- 分页拼接 LIMIT 开始行,一页的大小\n\n-- SELECT COUNT(*) INTO @ROWS_TOTAL FROM 表名 where条件); 将总行数赋值给ROWS_TOTAL,作为返回值\nSET @COUNT_STRING = CONCAT('SELECT COUNT(*) INTO @ROWS_TOTAL FROM ', p_table_name, ' ', p_where_string);\n-- SELECT 列名 FROM 表名 where条件 order排序 limit语句; 最后的输出页数据\nSET @MAIN_STRING = CONCAT('SELECT ', p_fields, ' FROM ', p_table_name, ' ', p_where_string, ' ', p_order_string,m_limit_string);\n\nPREPARE count_stmt FROM @COUNT_STRING;  -- 预定义sql\nEXECUTE count_stmt;                     -- 执行sql    \nDEALLOCATE PREPARE count_stmt;          -- 释放掉连接\nSET p_out_rows = @ROWS_TOTAL;\n\nPREPARE main_stmt FROM @MAIN_STRING;\nEXECUTE main_stmt;\nDEALLOCATE PREPARE main_stmt;\n    \nEND;\n//\nDELIMITER ;\n\ncall pr_pager(\"t\",\"var\",3,3,\"\",\"\",@result);\ncall pr_pager(\"t\",\"var\",3,2,\"\",\"\",@result);\n```\n\n---\n\n### 十一.存储过程的优点\n```\n1.存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般 SQL 语句每执行一次就编译一次,所以使用存储过程可提高数据库执行速度。\n2.当对数据库进行复杂操作时(如对多个表进行 Update,Insert,Query,Delete 时），可将此复杂操作用存储过程封装起来与数据库提供的事务处理结合一起使用。这些操作，如果用程序来完成，就变成了一条条的 SQL 语句，可能要多次连接数据库。而换成存储，只需要连接一次数据库就可以了。\n3.存储过程可以重复使用,可减少数据库开发人员的工作量。\n4.安全性高,可设定只有某此用户才具有对指定存储过程的使用权。\n```\n\n---\n\n### 补充:触发器\n#### 1.语法\n```\nCREATE TRIGGER 触发器名\n触发时机(BEFORE,AFTER)\n触发事件(INSERT,UPDATE,DELETE) ON 被触发的表名\nFOR EACH ROW\n触发器程序体\n\n由此可见，可以建立6种触发器，即：BEFORE INSERT、BEFORE UPDATE、BEFORE DELETE、AFTER INSERT、AFTER UPDATE、AFTER DELETE。\n\n另外有一个限制是不能同时在一个表上建立2个相同类型的触发器，因此在一个表上最多建立6个触发器。\n```\n\n### 2.触发事件\n> - MySQL除了对**INSERT**、**UPDATE**、**DELETE**基本操作进行定义外，还定义了**LOAD DATA**和**REPLACE**语句，这两种语句也能引起上述6中类型的触发器的触发。\n> - **LOAD DATA**语句用于将一个文件装入到一个数据表中，相当与一系列的 INSERT 操作。\n> - **REPLACE**语句一般来说和 INSERT 语句很像，只是在表中有**primary key **或**unique**索引时，如果插入的数据和原来**primary key**或**unique**索引一致时，会先删除原来的数据，然后增加一条新数据，也就是说，一条 REPLACE 语句有时候等价于一条。\n> - **INSERT**语句，有时候等价于一条**DELETE**语句加上一条**INSERT**语句。\n> - **INSERT型触发器**：插入某一行时激活触发器，可能通过**INSERT**、**LOAD DATA**、**REPLACE**语句触发；\n> - **UPDATE型触发器**：更改某一行时激活触发器，可能通过**UPDATE**语句触发；\n> - **DELETE型触发器**：删除某一行时激活触发器，可能通过**DELETE**、**REPLACE**语句触发。\n\n### 3.触发器程序体\n> statement_list代表一个或多个语句的列表，列表内的每条语句都必须用分号（;）来结尾。\n```\nBEGIN\n[statement_list]\nEND\n```\n\n### 4.触发器实例\n```\nDELIMITER $\n-- 创建一个在对student表进行INSERT事件之后进行一系列操作的触发器\ncreate trigger tri_stuInsert after insert\non student for each row\nbegin\ndeclare c int;\n-- 查询原来class表的stuCount\nset c = (select stuCount from class where classID=new.classID);\n-- 将stuCount+1\nupdate class set stuCount = c + 1 where classID = new.classID;\nend\n$\nDELIMITER ;\n```\n\n### 5.NEW和OLD详解\n> MySQL中定义了**NEW**和**OLD**，用来表示触发器的所在表中，触发了触发器的那一行数据。\n> - 在**INSERT**型触发器中，**NEW**用来表示将要（**BEFORE**）或已经（**AFTER**）插入的新数据；\n> - 在**UPDATE**型触发器中，**OLD**用来表示将要或已经被修改的原数据，**NEW**用来表示将要或已经修改为的新数据；\n> - 在**DELETE**型触发器中，**OLD**用来表示将要或已经被删除的原数据；\n> \n> **使用方法**： **NEW.columnName**（columnName为相应数据表某一列名）\n>\n> 另外，**OLD**是只读的，而**NEW**则可以在触发器中使用SET赋值，这样不会再次触发触发器，造成循环调用（如每插入一个学生前，都在其学号前加“2013”）。\n\n### 6.触发器的查找与删除\n```\n-- 查找\nSHOW TRIGGERS [FROM schema_name]\nSELETE TRIGGER_SCHEMA,TRIGGER_NAME,DEFINER,ACTION_STATEMENT FROM TRIGGERS WHERE TRIGGER_SCHEMA='course';\n\n-- 删除\nDROP TRIGGER [IF EXISTS] [schema_name.]trigger_name\n```\n\n### 7.触发器的执行顺序\n> 建立的数据库一般都是**InnoDB**数据库，其上建立的表是事务性表，也就是事务安全的。这时，若SQL语句或触发器执行失败，MySQL会回滚事务，有：\n> - 如果**BEFORE**触发器执行失败，SQL无法正确执行。\n> - SQL执行失败时，**AFTER**型触发器不会触发。\n> - **AFTER**类型的触发器执行失败，SQL会回滚。\n\n","slug":"数据库存储过程及触发器","published":1,"updated":"2019-05-31T13:22:03.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwc5ctil0019skw7dr9hw7co","content":"<h3 id=\"一-关键语法\"><a href=\"#一-关键语法\" class=\"headerlink\" title=\"一.关键语法\"></a>一.关键语法</h3><ul>\n<li><strong>DELIMITER</strong> 声明语句结束符</li>\n<li><strong>CREATE PROCEDURE</strong> 声明存储过程</li>\n<li><strong>BEGIN … END</strong> 储存过程开始和结束符号</li>\n<li><strong>SET</strong> 变量赋值</li>\n<li><strong>DECLARE</strong> 变量定义</li>\n<li><strong>DEFINER</strong> 存储过程的权限</li>\n</ul>\n<hr>\n<a id=\"more\"></a>\n<h3 id=\"二-入门实例\"><a href=\"#二-入门实例\" class=\"headerlink\" title=\"二.入门实例\"></a>二.入门实例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">USE `test`$$</span><br><span class=\"line\">DROP PROCEDURE IF EXISTS `test`$$</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE DEFINER=`root`@`localhost` PROCEDURE `test`()</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">SELECT COUNT(*) FROM `test`.`info`;</span><br><span class=\"line\">END$$</span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"三-存储过程使用\"><a href=\"#三-存储过程使用\" class=\"headerlink\" title=\"三.存储过程使用\"></a>三.存储过程使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CALL test(); 调用存储过程</span><br><span class=\"line\">SET @ip=1; 存储过程外定义变量</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"四-参数\"><a href=\"#四-参数\" class=\"headerlink\" title=\"四.参数\"></a>四.参数</h3><ul>\n<li><strong>IN</strong> 输入参数,表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值</li>\n<li><strong>OUT</strong> 输出参数,该值可在存储过程内部被改变，并可返回</li>\n<li><strong>INOUT</strong> 输入输出参数,调用时指定，并且可被改变和返回</li>\n</ul>\n<h4 id=\"1-IN参数实例\"><a href=\"#1-IN参数实例\" class=\"headerlink\" title=\"1.IN参数实例\"></a>1.IN参数实例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set @ip=1;</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">USE `test`$$</span><br><span class=\"line\">DROP PROCEDURE IF EXISTS `test`$$</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE DEFINER=`root`@`localhost` PROCEDURE `test`(IN ip INT)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">SELECT ip; // 1</span><br><span class=\"line\">SET ip=10;</span><br><span class=\"line\">SELECT ip; // 10</span><br><span class=\"line\">END$$</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\">CALL test(@ip);</span><br><span class=\"line\"></span><br><span class=\"line\">select @ip; // 1</span><br></pre></td></tr></table></figure>\n<p>外影响内,内并不影响外的值</p>\n<h4 id=\"2-OUT参数实例\"><a href=\"#2-OUT参数实例\" class=\"headerlink\" title=\"2.OUT参数实例\"></a>2.OUT参数实例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set @ip=1;</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">USE `test`$$</span><br><span class=\"line\">DROP PROCEDURE IF EXISTS `test`$$</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE DEFINER=`root`@`localhost` PROCEDURE `test`(OUT ip INT)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">SELECT ip; // NULL</span><br><span class=\"line\">SET ip=10;</span><br><span class=\"line\">SELECT ip; // 10</span><br><span class=\"line\">END$$</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\">CALL test(@ip);</span><br><span class=\"line\"></span><br><span class=\"line\">select @ip; // 10</span><br></pre></td></tr></table></figure>\n<p>存储过程内的会影响外部的变量,但是外部的不会影响存储过程内的变量</p>\n<h4 id=\"3-INOUT参数实例\"><a href=\"#3-INOUT参数实例\" class=\"headerlink\" title=\"3.INOUT参数实例\"></a>3.INOUT参数实例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set @ip=1;</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">USE `test`$$</span><br><span class=\"line\">DROP PROCEDURE IF EXISTS `test`$$</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE DEFINER=`root`@`localhost` PROCEDURE `test`(INOUT ip INT)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">SELECT ip; // 1</span><br><span class=\"line\">SET ip=10;</span><br><span class=\"line\">SELECT ip; // 10</span><br><span class=\"line\">END$$</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\">CALL test(@ip);</span><br><span class=\"line\"></span><br><span class=\"line\">select @ip; // 10</span><br></pre></td></tr></table></figure>\n<p>内外都能影响</p>\n<hr>\n<h3 id=\"五-变量\"><a href=\"#五-变量\" class=\"headerlink\" title=\"五.变量\"></a>五.变量</h3><h4 id=\"1-变量定义\"><a href=\"#1-变量定义\" class=\"headerlink\" title=\"1.变量定义\"></a>1.变量定义</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">局部变量声明一定要放在存储过程体的开始</span><br><span class=\"line\">DECLARE l_int int unsigned default 4000000;</span><br><span class=\"line\">DECLARE l_numeric number(8,2) DEFAULT 9.95;</span><br><span class=\"line\">DECLARE l_date date DEFAULT &apos;1999-12-31&apos;;  </span><br><span class=\"line\">DECLARE l_datetime datetime DEFAULT &apos;1999-12-31 23:59:59&apos;;  </span><br><span class=\"line\">DECLARE l_varchar varchar(255) DEFAULT &apos;This will not be padded&apos;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-变量赋值\"><a href=\"#2-变量赋值\" class=\"headerlink\" title=\"2.变量赋值\"></a>2.变量赋值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set ip = value;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-用户变量\"><a href=\"#3-用户变量\" class=\"headerlink\" title=\"3.用户变量\"></a>3.用户变量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT &apos;Hello World&apos; into @x;</span><br><span class=\"line\">SELECT @x;</span><br><span class=\"line\">SET @y=&apos;Goodbye Cruel World&apos;;</span><br><span class=\"line\">SELECT @y;</span><br><span class=\"line\">SET @z=1+2+3;</span><br><span class=\"line\">SELECT @z;</span><br><span class=\"line\">// 存储过程中使用用户变量</span><br><span class=\"line\">CREATE PROCEDURE GreetWorld() SELECT CONCAT(@greeting,&apos; World&apos;);</span><br><span class=\"line\">SET @greeting=&apos;Hello&apos;;</span><br><span class=\"line\">CALL GreetWorld();  </span><br><span class=\"line\">// 存储过程间传递全局范围的用户变量</span><br><span class=\"line\">CREATE PROCEDURE p1() SET @last_procedure=&apos;p1&apos;;</span><br><span class=\"line\">CREATE PROCEDURE p2() SELECT CONCAT(&apos;Last procedure was &apos;,@last_procedure);</span><br><span class=\"line\">CALL p1();</span><br><span class=\"line\">CALL p2();</span><br></pre></td></tr></table></figure>\n<p>注意:</p>\n<ul>\n<li>用户变量名一般以@开头</li>\n<li>滥用用户变量会导致程序难以理解及管理</li>\n</ul>\n<hr>\n<h3 id=\"六-注释\"><a href=\"#六-注释\" class=\"headerlink\" title=\"六.注释\"></a>六.注释</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">USE `test`$$</span><br><span class=\"line\">DROP PROCEDURE IF EXISTS `test`$$</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE DEFINER=`root`@`localhost` PROCEDURE `test`(INOUT ip INT) -- 创建存储过程</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">SELECT ip; -- 输出 1</span><br><span class=\"line\">/*</span><br><span class=\"line\">SET ip=10;</span><br><span class=\"line\">SELECT ip; -- 输出 10</span><br><span class=\"line\">*/</span><br><span class=\"line\">END$$</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"七-存储过程的增删改查\"><a href=\"#七-存储过程的增删改查\" class=\"headerlink\" title=\"七.存储过程的增删改查\"></a>七.存储过程的增删改查</h3><h4 id=\"1-创建\"><a href=\"#1-创建\" class=\"headerlink\" title=\"1.创建\"></a>1.创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DEFINER=`root`@`localhost` PROCEDURE 存储过程名;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-删除\"><a href=\"#2-删除\" class=\"headerlink\" title=\"2.删除\"></a>2.删除</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE 存储过程名;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-修改\"><a href=\"#3-修改\" class=\"headerlink\" title=\"3.修改\"></a>3.修改</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER PROCEDURE 存储过程名</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-查看\"><a href=\"#4-查看\" class=\"headerlink\" title=\"4.查看\"></a>4.查看</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT NAME FROM mysql.proc WHERE db=&apos;数据库名&apos;;</span><br><span class=\"line\">SELECT routine_name FROM information_schema.routines WHERE routine_schema=&apos;数据库名&apos;;</span><br><span class=\"line\">SHOW PROCEDURE STATUS WHERE db=&apos;数据库名&apos;;</span><br><span class=\"line\">SHOW CREATE PROCEDURE 数据库.存储过程名;</span><br></pre></td></tr></table></figure>\n<h3 id=\"八-存储过程的控制语句\"><a href=\"#八-存储过程的控制语句\" class=\"headerlink\" title=\"八.存储过程的控制语句\"></a>八.存储过程的控制语句</h3><h4 id=\"1-变量的作用域\"><a href=\"#1-变量的作用域\" class=\"headerlink\" title=\"1.变量的作用域\"></a>1.变量的作用域</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //  </span><br><span class=\"line\">CREATE PROCEDURE proc3(OUT x1 VARCHAR(5))  </span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">DECLARE x1 VARCHAR(5) DEFAULT &apos;outer&apos;;  </span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">DECLARE x1 VARCHAR(5) DEFAULT &apos;inner&apos;;  </span><br><span class=\"line\">SELECT x1; -- inner</span><br><span class=\"line\">END;  </span><br><span class=\"line\">SELECT x1; -- outer</span><br><span class=\"line\">END;  </span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<p>只在自已的定义域中有效,出了定义域无效,可以通过out参数或者将其值指派给会话变量来保存其值。</p>\n<h4 id=\"2-if-then-else语句\"><a href=\"#2-if-then-else语句\" class=\"headerlink\" title=\"2.if -then -else语句\"></a>2.if -then -else语句</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //  </span><br><span class=\"line\">CREATE PROCEDURE proc2(IN parameter INT)  </span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">DECLARE var INT;  </span><br><span class=\"line\">SET var=parameter+1;  </span><br><span class=\"line\"></span><br><span class=\"line\">IF var=0 THEN </span><br><span class=\"line\">    INSERT INTO t VALUES(17);  </span><br><span class=\"line\">END IF;  </span><br><span class=\"line\"></span><br><span class=\"line\">IF parameter=0 THEN </span><br><span class=\"line\">    UPDATE t SET s1=s1+1;  </span><br><span class=\"line\">ELSE </span><br><span class=\"line\">    UPDATE t SET s1=s1+2;  </span><br><span class=\"line\">END IF;  </span><br><span class=\"line\">END;</span><br><span class=\"line\">//  </span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-case语句\"><a href=\"#3-case语句\" class=\"headerlink\" title=\"3.case语句\"></a>3.case语句</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //  </span><br><span class=\"line\">CREATE PROCEDURE proc3 (IN parameter INT)  </span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">DECLARE var INT;  </span><br><span class=\"line\">SET var=parameter+1;  </span><br><span class=\"line\">CASE var  </span><br><span class=\"line\">WHEN 0 THEN   </span><br><span class=\"line\">    INSERT INTO t VALUES(17);  </span><br><span class=\"line\">WHEN 1 THEN   </span><br><span class=\"line\">    INSERT INTO t VALUES(18);  </span><br><span class=\"line\">ELSE   </span><br><span class=\"line\">    INSERT INTO t VALUES(19);  </span><br><span class=\"line\">END CASE;  </span><br><span class=\"line\">END;  </span><br><span class=\"line\">//  </span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-while-条件-DO-…-end-while-语句\"><a href=\"#4-while-条件-DO-…-end-while-语句\" class=\"headerlink\" title=\"4.while 条件 DO … end while;语句\"></a>4.while 条件 DO … end while;语句</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //  </span><br><span class=\"line\">CREATE PROCEDURE proc4()  </span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">DECLARE var INT;  </span><br><span class=\"line\">SET var=0;  </span><br><span class=\"line\">WHILE var&lt;6 DO  </span><br><span class=\"line\">    INSERT INTO t VALUES(var);  </span><br><span class=\"line\">    SET var=var+1;  </span><br><span class=\"line\">END WHILE;</span><br><span class=\"line\">END;  </span><br><span class=\"line\">//  </span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<p>在执行循环体之前进行判断</p>\n<h4 id=\"5-repeat-…until-条件-end-repeat-语句\"><a href=\"#5-repeat-…until-条件-end-repeat-语句\" class=\"headerlink\" title=\"5.repeat …until 条件 end repeat;语句\"></a>5.repeat …until 条件 end repeat;语句</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //  </span><br><span class=\"line\">CREATE PROCEDURE proc5 ()  </span><br><span class=\"line\">BEGIN   </span><br><span class=\"line\">DECLARE v INT;  </span><br><span class=\"line\">SET v=0;  </span><br><span class=\"line\">REPEAT  </span><br><span class=\"line\">    INSERT INTO t VALUES(v);  </span><br><span class=\"line\">    SET v=v+1;  </span><br><span class=\"line\">UNTIL v&gt;=5</span><br><span class=\"line\">END REPEAT;  </span><br><span class=\"line\">END;  </span><br><span class=\"line\">//  </span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<p>在执行循环体之后进行判断</p>\n<h4 id=\"6-loop-…-leave-end-loop-语句\"><a href=\"#6-loop-…-leave-end-loop-语句\" class=\"headerlink\" title=\"6.loop … leave end loop;语句\"></a>6.loop … leave end loop;语句</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //  </span><br><span class=\"line\">CREATE PROCEDURE proc6 ()  </span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">DECLARE v INT;  </span><br><span class=\"line\">SET v=0;  </span><br><span class=\"line\">LOOP_LABLE:LOOP  </span><br><span class=\"line\">    INSERT INTO t VALUES(v);  </span><br><span class=\"line\">    SET v=v+1;  </span><br><span class=\"line\">    IF v &gt;=5 THEN </span><br><span class=\"line\">        LEAVE LOOP_LABLE;  </span><br><span class=\"line\">    END IF;  </span><br><span class=\"line\">END LOOP;  </span><br><span class=\"line\">END;  </span><br><span class=\"line\">//  </span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<p>leave语句的意义是离开循环,LOOP_LABEL是自定义的标号</p>\n<h4 id=\"7-LABLES-标号\"><a href=\"#7-LABLES-标号\" class=\"headerlink\" title=\"7.LABLES 标号:\"></a>7.LABLES 标号:</h4><p>在使用loop的时候，使用到的labels标号，对于labels可以用到while，loop，rrepeat等循环控制语句中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create procedure pro13()</span><br><span class=\"line\">label_1:begin</span><br><span class=\"line\">label_2:while 0=1 do leave label_2;end while;</span><br><span class=\"line\">label_3:repeat leave label_3;until 0=0 end repeat;</span><br><span class=\"line\">label_4:loop leave label_4;end loop;</span><br><span class=\"line\">end;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 加了结束标号的语句,功能相同</span><br><span class=\"line\">create procedure pro14()</span><br><span class=\"line\">label_1:begin</span><br><span class=\"line\">label_2:while 0=1 do leave label_2;end while label_2;</span><br><span class=\"line\">label_3:repeat leave label_3;until 0=0 end repeat label_3;</span><br><span class=\"line\">label_4:loop leave label_4;end loop label_4;</span><br><span class=\"line\">end label_1;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"8-ITERATE迭代\"><a href=\"#8-ITERATE迭代\" class=\"headerlink\" title=\"8.ITERATE迭代\"></a>8.ITERATE迭代</h4><p>ITERATE只能出现在LOOP，REPEAT和WHILE语句中，它的意思是“再次循环”,类似于continue<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //  </span><br><span class=\"line\">CREATE PROCEDURE proc11()  </span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">DECLARE v INT;  </span><br><span class=\"line\">SET v=0;  </span><br><span class=\"line\">LOOP_LABLE:LOOP  </span><br><span class=\"line\">    IF v=3 THEN   </span><br><span class=\"line\">        SET v=v+1;  </span><br><span class=\"line\">\t    ITERATE LOOP_LABLE;  </span><br><span class=\"line\">\tEND IF;  </span><br><span class=\"line\">    INSERT INTO t VALUES(v);  </span><br><span class=\"line\">    SET v=v+1;  </span><br><span class=\"line\">\tIF v&gt;=5 THEN </span><br><span class=\"line\">\t    LEAVE LOOP_LABLE;  </span><br><span class=\"line\">    END IF;  </span><br><span class=\"line\">END LOOP;  </span><br><span class=\"line\">END;  </span><br><span class=\"line\">//  </span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure></p>\n<p>首先i的值为0，条件判断语句if i=3 then判断为假，跳过if语段，向数据库中插入0，然后i+1，同样后面的if i&gt;=5 then判断也为假，也跳过；继续循环，同样插入1和2；在i=3的时候条件判断语句if i=3 then判断为真，执行i=i+1，i值为4，然后执行迭代iterate loop_label;，即语句执行到iterate loop_label;后直接跳到if i=3 then判断语句，执行判断，这个时候由于i=4，if i=3 then判断为假，跳过IF语段，将4添加到表中，i变为5，条件判断if i&gt;=5 then判断为真，执行leave loop_label;跳出loop循环，然后执行end;//，结束整个存储过程。</p>\n<h3 id=\"九-存储过程中的基本函数\"><a href=\"#九-存储过程中的基本函数\" class=\"headerlink\" title=\"九.存储过程中的基本函数\"></a>九.存储过程中的基本函数</h3><h4 id=\"1-字符串类\"><a href=\"#1-字符串类\" class=\"headerlink\" title=\"1.字符串类\"></a>1.字符串类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CHARSET(str) //返回字串字符集</span><br><span class=\"line\">CONCAT (string2 [,... ]) //连接字串</span><br><span class=\"line\">INSTR (string ,substring ) //返回substring首次在string中出现的位置,不存在返回0</span><br><span class=\"line\">LCASE (string2 ) //转换成小写</span><br><span class=\"line\">LEFT (string2 ,length ) //从string2中的左边起取length个字符</span><br><span class=\"line\">LENGTH (string ) //string长度</span><br><span class=\"line\">LOAD_FILE (file_name ) //从文件读取内容</span><br><span class=\"line\">LOCATE (substring , string [,start_position ] ) 同INSTR,但可指定开始位置</span><br><span class=\"line\">LPAD (string2 ,length ,pad ) //重复用pad加在string开头,直到字串长度为length</span><br><span class=\"line\">LTRIM (string2 ) //去除前端空格</span><br><span class=\"line\">REPEAT (string2 ,count ) //重复count次</span><br><span class=\"line\">REPLACE (str ,search_str ,replace_str ) //在str中用replace_str替换search_str</span><br><span class=\"line\">RPAD (string2 ,length ,pad) //在str后用pad补充,直到长度为length</span><br><span class=\"line\">RTRIM (string2 ) //去除后端空格</span><br><span class=\"line\">STRCMP (string1 ,string2 ) //逐字符比较两字串大小,str1比str2小返回-1,大返回1,相同返回0</span><br><span class=\"line\">SUBSTRING (str , position [,length ]) //从str的position开始,取length个字符</span><br><span class=\"line\">注：mysql中处理字符串时，默认第一个字符下标为1，即参数position必须大于等于1</span><br><span class=\"line\">TRIM([[BOTH|LEADING|TRAILING][padding] FROM]string2) //去除指定位置的指定字符</span><br><span class=\"line\">UCASE (string2 ) //转换成大写</span><br><span class=\"line\">RIGHT(string2,length) //取string2最后length个字符</span><br><span class=\"line\">SPACE(count) //生成count个空格</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-数学类\"><a href=\"#2-数学类\" class=\"headerlink\" title=\"2.数学类\"></a>2.数学类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABS (number2 ) //绝对值</span><br><span class=\"line\">BIN (decimal_number ) //十进制转二进制</span><br><span class=\"line\">CEILING (number2 ) //向上取整</span><br><span class=\"line\">CONV(number2,from_base,to_base) //进制转换</span><br><span class=\"line\">FLOOR (number2 ) //向下取整</span><br><span class=\"line\">FORMAT (number,decimal_places ) //保留小数位数</span><br><span class=\"line\">HEX (DecimalNumber ) //转十六进制</span><br><span class=\"line\">注：HEX()中可传入字符串，则返回其ASC-11码，如HEX(&apos;DEF&apos;)返回4142143</span><br><span class=\"line\">也可以传入十进制整数，返回其十六进制编码，如HEX(25)返回19</span><br><span class=\"line\">LEAST (number , number2 [,..]) //求最小值</span><br><span class=\"line\">MOD (numerator ,denominator ) //求余</span><br><span class=\"line\">POWER (number ,power ) //求指数</span><br><span class=\"line\">RAND([seed]) //随机数</span><br><span class=\"line\">ROUND (number [,decimals ]) //四舍五入,decimals为小数位数]</span><br><span class=\"line\">注：返回类型并非均为整数,默认为整数</span><br><span class=\"line\">SQRT(number2) //开平方</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-日期时间类\"><a href=\"#3-日期时间类\" class=\"headerlink\" title=\"3.日期时间类\"></a>3.日期时间类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADDTIME (date2 ,time_interval)//将time_interval加到date2</span><br><span class=\"line\">CONVERT_TZ (datetime2 ,fromTZ ,toTZ) //转换时区</span><br><span class=\"line\">CURRENT_DATE () //当前日期</span><br><span class=\"line\">CURRENT_TIME () //当前时间</span><br><span class=\"line\">CURRENT_TIMESTAMP () //当前时间戳</span><br><span class=\"line\">DATE (datetime) //返回datetime的日期部分</span><br><span class=\"line\">DATE_ADD (date2 , INTERVAL d_value d_type) //在date2中加上日期或时间</span><br><span class=\"line\">DATE_FORMAT (datetime ,FormatCodes) //使用formatcodes格式显示datetime</span><br><span class=\"line\">DATE_SUB (date2 , INTERVAL d_value d_type) //在date2上减去一个时间</span><br><span class=\"line\">DATEDIFF (date1 ,date2) //两个日期差</span><br><span class=\"line\">DAY (date) //返回日期的天</span><br><span class=\"line\">DAYNAME (date) //英文星期</span><br><span class=\"line\">DAYOFWEEK (date) //星期(1-7) ,1为星期天</span><br><span class=\"line\">DAYOFYEAR (date) //一年中的第几天</span><br><span class=\"line\">EXTRACT (interval_name FROM date) //从date中提取日期的指定部分</span><br><span class=\"line\">MAKEDATE (year ,day) //给出年及年中的第几天,生成日期串</span><br><span class=\"line\">MAKETIME (hour ,minute ,second) //生成时间串</span><br><span class=\"line\">MONTHNAME (date ) //英文月份名</span><br><span class=\"line\">NOW () //当前时间</span><br><span class=\"line\">SEC_TO_TIME (seconds) //秒数转成时间</span><br><span class=\"line\">STR_TO_DATE (string ,format) //字串转成时间,以format格式显示</span><br><span class=\"line\">TIMEDIFF (datetime1 ,datetime2) //两个时间差</span><br><span class=\"line\">TIME_TO_SEC (time) //时间转秒数]</span><br><span class=\"line\">WEEK (date_time [,start_of_week ]) //第几周</span><br><span class=\"line\">YEAR (datetime) //年份</span><br><span class=\"line\">DAYOFMONTH(datetime) //月的第几天</span><br><span class=\"line\">HOUR(datetime) //小时</span><br><span class=\"line\">LAST_DAY(date) //date的月的最后日期</span><br><span class=\"line\">MICROSECOND(datetime) //微秒</span><br><span class=\"line\">MONTH(datetime) //月</span><br><span class=\"line\">MINUTE(datetime) //分返回符号,正负或0</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"十-分页存储过程\"><a href=\"#十-分页存储过程\" class=\"headerlink\" title=\"十.分页存储过程\"></a>十.分页存储过程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //  </span><br><span class=\"line\">DROP PROCEDURE IF EXISTS pr_pager;</span><br><span class=\"line\">CREATE PROCEDURE pr_pager(</span><br><span class=\"line\">    IN p_table_name VARCHAR(1024),      -- 表名      </span><br><span class=\"line\">    IN p_fields VARCHAR(1024),          -- 列名</span><br><span class=\"line\">    IN p_page_size INT,                 -- 一页的大小</span><br><span class=\"line\">    IN p_page_now INT,                  -- 页码</span><br><span class=\"line\">    IN p_order_string VARCHAR(128),     -- 排序语句</span><br><span class=\"line\">    IN p_where_string VARCHAR(1024),    -- where条件</span><br><span class=\"line\">    OUT p_out_rows INT                    </span><br><span class=\"line\">)</span><br><span class=\"line\">NOT DETERMINISTIC</span><br><span class=\"line\">SQL SECURITY DEFINER</span><br><span class=\"line\">COMMENT &apos;分页存储过程&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">  </span><br><span class=\"line\">DECLARE m_begin_row INT DEFAULT 0;</span><br><span class=\"line\">DECLARE m_limit_string CHAR(64);</span><br><span class=\"line\"></span><br><span class=\"line\">SET m_begin_row = (p_page_now - 1) * p_page_size;   -- 开始行=(页面-1)*一页的大小</span><br><span class=\"line\">SET m_limit_string = CONCAT(&apos; LIMIT &apos;, m_begin_row, &apos;, &apos;, p_page_size);   -- 分页拼接 LIMIT 开始行,一页的大小</span><br><span class=\"line\"></span><br><span class=\"line\">-- SELECT COUNT(*) INTO @ROWS_TOTAL FROM 表名 where条件); 将总行数赋值给ROWS_TOTAL,作为返回值</span><br><span class=\"line\">SET @COUNT_STRING = CONCAT(&apos;SELECT COUNT(*) INTO @ROWS_TOTAL FROM &apos;, p_table_name, &apos; &apos;, p_where_string);</span><br><span class=\"line\">-- SELECT 列名 FROM 表名 where条件 order排序 limit语句; 最后的输出页数据</span><br><span class=\"line\">SET @MAIN_STRING = CONCAT(&apos;SELECT &apos;, p_fields, &apos; FROM &apos;, p_table_name, &apos; &apos;, p_where_string, &apos; &apos;, p_order_string,m_limit_string);</span><br><span class=\"line\"></span><br><span class=\"line\">PREPARE count_stmt FROM @COUNT_STRING;  -- 预定义sql</span><br><span class=\"line\">EXECUTE count_stmt;                     -- 执行sql    </span><br><span class=\"line\">DEALLOCATE PREPARE count_stmt;          -- 释放掉连接</span><br><span class=\"line\">SET p_out_rows = @ROWS_TOTAL;</span><br><span class=\"line\"></span><br><span class=\"line\">PREPARE main_stmt FROM @MAIN_STRING;</span><br><span class=\"line\">EXECUTE main_stmt;</span><br><span class=\"line\">DEALLOCATE PREPARE main_stmt;</span><br><span class=\"line\">    </span><br><span class=\"line\">END;</span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\">call pr_pager(&quot;t&quot;,&quot;var&quot;,3,3,&quot;&quot;,&quot;&quot;,@result);</span><br><span class=\"line\">call pr_pager(&quot;t&quot;,&quot;var&quot;,3,2,&quot;&quot;,&quot;&quot;,@result);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"十一-存储过程的优点\"><a href=\"#十一-存储过程的优点\" class=\"headerlink\" title=\"十一.存储过程的优点\"></a>十一.存储过程的优点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般 SQL 语句每执行一次就编译一次,所以使用存储过程可提高数据库执行速度。</span><br><span class=\"line\">2.当对数据库进行复杂操作时(如对多个表进行 Update,Insert,Query,Delete 时），可将此复杂操作用存储过程封装起来与数据库提供的事务处理结合一起使用。这些操作，如果用程序来完成，就变成了一条条的 SQL 语句，可能要多次连接数据库。而换成存储，只需要连接一次数据库就可以了。</span><br><span class=\"line\">3.存储过程可以重复使用,可减少数据库开发人员的工作量。</span><br><span class=\"line\">4.安全性高,可设定只有某此用户才具有对指定存储过程的使用权。</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"补充-触发器\"><a href=\"#补充-触发器\" class=\"headerlink\" title=\"补充:触发器\"></a>补充:触发器</h3><h4 id=\"1-语法\"><a href=\"#1-语法\" class=\"headerlink\" title=\"1.语法\"></a>1.语法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TRIGGER 触发器名</span><br><span class=\"line\">触发时机(BEFORE,AFTER)</span><br><span class=\"line\">触发事件(INSERT,UPDATE,DELETE) ON 被触发的表名</span><br><span class=\"line\">FOR EACH ROW</span><br><span class=\"line\">触发器程序体</span><br><span class=\"line\"></span><br><span class=\"line\">由此可见，可以建立6种触发器，即：BEFORE INSERT、BEFORE UPDATE、BEFORE DELETE、AFTER INSERT、AFTER UPDATE、AFTER DELETE。</span><br><span class=\"line\"></span><br><span class=\"line\">另外有一个限制是不能同时在一个表上建立2个相同类型的触发器，因此在一个表上最多建立6个触发器。</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-触发事件\"><a href=\"#2-触发事件\" class=\"headerlink\" title=\"2.触发事件\"></a>2.触发事件</h3><blockquote>\n<ul>\n<li>MySQL除了对<strong>INSERT</strong>、<strong>UPDATE</strong>、<strong>DELETE</strong>基本操作进行定义外，还定义了<strong>LOAD DATA</strong>和<strong>REPLACE</strong>语句，这两种语句也能引起上述6中类型的触发器的触发。</li>\n<li><strong>LOAD DATA</strong>语句用于将一个文件装入到一个数据表中，相当与一系列的 INSERT 操作。</li>\n<li><strong>REPLACE</strong>语句一般来说和 INSERT 语句很像，只是在表中有<strong>primary key </strong>或<strong>unique</strong>索引时，如果插入的数据和原来<strong>primary key</strong>或<strong>unique</strong>索引一致时，会先删除原来的数据，然后增加一条新数据，也就是说，一条 REPLACE 语句有时候等价于一条。</li>\n<li><strong>INSERT</strong>语句，有时候等价于一条<strong>DELETE</strong>语句加上一条<strong>INSERT</strong>语句。</li>\n<li><strong>INSERT型触发器</strong>：插入某一行时激活触发器，可能通过<strong>INSERT</strong>、<strong>LOAD DATA</strong>、<strong>REPLACE</strong>语句触发；</li>\n<li><strong>UPDATE型触发器</strong>：更改某一行时激活触发器，可能通过<strong>UPDATE</strong>语句触发；</li>\n<li><strong>DELETE型触发器</strong>：删除某一行时激活触发器，可能通过<strong>DELETE</strong>、<strong>REPLACE</strong>语句触发。</li>\n</ul>\n</blockquote>\n<h3 id=\"3-触发器程序体\"><a href=\"#3-触发器程序体\" class=\"headerlink\" title=\"3.触发器程序体\"></a>3.触发器程序体</h3><blockquote>\n<p>statement_list代表一个或多个语句的列表，列表内的每条语句都必须用分号（;）来结尾。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEGIN</span><br><span class=\"line\">[statement_list]</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"4-触发器实例\"><a href=\"#4-触发器实例\" class=\"headerlink\" title=\"4.触发器实例\"></a>4.触发器实例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $</span><br><span class=\"line\">-- 创建一个在对student表进行INSERT事件之后进行一系列操作的触发器</span><br><span class=\"line\">create trigger tri_stuInsert after insert</span><br><span class=\"line\">on student for each row</span><br><span class=\"line\">begin</span><br><span class=\"line\">declare c int;</span><br><span class=\"line\">-- 查询原来class表的stuCount</span><br><span class=\"line\">set c = (select stuCount from class where classID=new.classID);</span><br><span class=\"line\">-- 将stuCount+1</span><br><span class=\"line\">update class set stuCount = c + 1 where classID = new.classID;</span><br><span class=\"line\">end</span><br><span class=\"line\">$</span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-NEW和OLD详解\"><a href=\"#5-NEW和OLD详解\" class=\"headerlink\" title=\"5.NEW和OLD详解\"></a>5.NEW和OLD详解</h3><blockquote>\n<p>MySQL中定义了<strong>NEW</strong>和<strong>OLD</strong>，用来表示触发器的所在表中，触发了触发器的那一行数据。</p>\n<ul>\n<li>在<strong>INSERT</strong>型触发器中，<strong>NEW</strong>用来表示将要（<strong>BEFORE</strong>）或已经（<strong>AFTER</strong>）插入的新数据；</li>\n<li>在<strong>UPDATE</strong>型触发器中，<strong>OLD</strong>用来表示将要或已经被修改的原数据，<strong>NEW</strong>用来表示将要或已经修改为的新数据；</li>\n<li>在<strong>DELETE</strong>型触发器中，<strong>OLD</strong>用来表示将要或已经被删除的原数据；</li>\n</ul>\n<p><strong>使用方法</strong>： <strong>NEW.columnName</strong>（columnName为相应数据表某一列名）</p>\n<p>另外，<strong>OLD</strong>是只读的，而<strong>NEW</strong>则可以在触发器中使用SET赋值，这样不会再次触发触发器，造成循环调用（如每插入一个学生前，都在其学号前加“2013”）。</p>\n</blockquote>\n<h3 id=\"6-触发器的查找与删除\"><a href=\"#6-触发器的查找与删除\" class=\"headerlink\" title=\"6.触发器的查找与删除\"></a>6.触发器的查找与删除</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查找</span><br><span class=\"line\">SHOW TRIGGERS [FROM schema_name]</span><br><span class=\"line\">SELETE TRIGGER_SCHEMA,TRIGGER_NAME,DEFINER,ACTION_STATEMENT FROM TRIGGERS WHERE TRIGGER_SCHEMA=&apos;course&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 删除</span><br><span class=\"line\">DROP TRIGGER [IF EXISTS] [schema_name.]trigger_name</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-触发器的执行顺序\"><a href=\"#7-触发器的执行顺序\" class=\"headerlink\" title=\"7.触发器的执行顺序\"></a>7.触发器的执行顺序</h3><blockquote>\n<p>建立的数据库一般都是<strong>InnoDB</strong>数据库，其上建立的表是事务性表，也就是事务安全的。这时，若SQL语句或触发器执行失败，MySQL会回滚事务，有：</p>\n<ul>\n<li>如果<strong>BEFORE</strong>触发器执行失败，SQL无法正确执行。</li>\n<li>SQL执行失败时，<strong>AFTER</strong>型触发器不会触发。</li>\n<li><strong>AFTER</strong>类型的触发器执行失败，SQL会回滚。</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"一-关键语法\"><a href=\"#一-关键语法\" class=\"headerlink\" title=\"一.关键语法\"></a>一.关键语法</h3><ul>\n<li><strong>DELIMITER</strong> 声明语句结束符</li>\n<li><strong>CREATE PROCEDURE</strong> 声明存储过程</li>\n<li><strong>BEGIN … END</strong> 储存过程开始和结束符号</li>\n<li><strong>SET</strong> 变量赋值</li>\n<li><strong>DECLARE</strong> 变量定义</li>\n<li><strong>DEFINER</strong> 存储过程的权限</li>\n</ul>\n<hr>","more":"<h3 id=\"二-入门实例\"><a href=\"#二-入门实例\" class=\"headerlink\" title=\"二.入门实例\"></a>二.入门实例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">USE `test`$$</span><br><span class=\"line\">DROP PROCEDURE IF EXISTS `test`$$</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE DEFINER=`root`@`localhost` PROCEDURE `test`()</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">SELECT COUNT(*) FROM `test`.`info`;</span><br><span class=\"line\">END$$</span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"三-存储过程使用\"><a href=\"#三-存储过程使用\" class=\"headerlink\" title=\"三.存储过程使用\"></a>三.存储过程使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CALL test(); 调用存储过程</span><br><span class=\"line\">SET @ip=1; 存储过程外定义变量</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"四-参数\"><a href=\"#四-参数\" class=\"headerlink\" title=\"四.参数\"></a>四.参数</h3><ul>\n<li><strong>IN</strong> 输入参数,表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值</li>\n<li><strong>OUT</strong> 输出参数,该值可在存储过程内部被改变，并可返回</li>\n<li><strong>INOUT</strong> 输入输出参数,调用时指定，并且可被改变和返回</li>\n</ul>\n<h4 id=\"1-IN参数实例\"><a href=\"#1-IN参数实例\" class=\"headerlink\" title=\"1.IN参数实例\"></a>1.IN参数实例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set @ip=1;</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">USE `test`$$</span><br><span class=\"line\">DROP PROCEDURE IF EXISTS `test`$$</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE DEFINER=`root`@`localhost` PROCEDURE `test`(IN ip INT)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">SELECT ip; // 1</span><br><span class=\"line\">SET ip=10;</span><br><span class=\"line\">SELECT ip; // 10</span><br><span class=\"line\">END$$</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\">CALL test(@ip);</span><br><span class=\"line\"></span><br><span class=\"line\">select @ip; // 1</span><br></pre></td></tr></table></figure>\n<p>外影响内,内并不影响外的值</p>\n<h4 id=\"2-OUT参数实例\"><a href=\"#2-OUT参数实例\" class=\"headerlink\" title=\"2.OUT参数实例\"></a>2.OUT参数实例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set @ip=1;</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">USE `test`$$</span><br><span class=\"line\">DROP PROCEDURE IF EXISTS `test`$$</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE DEFINER=`root`@`localhost` PROCEDURE `test`(OUT ip INT)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">SELECT ip; // NULL</span><br><span class=\"line\">SET ip=10;</span><br><span class=\"line\">SELECT ip; // 10</span><br><span class=\"line\">END$$</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\">CALL test(@ip);</span><br><span class=\"line\"></span><br><span class=\"line\">select @ip; // 10</span><br></pre></td></tr></table></figure>\n<p>存储过程内的会影响外部的变量,但是外部的不会影响存储过程内的变量</p>\n<h4 id=\"3-INOUT参数实例\"><a href=\"#3-INOUT参数实例\" class=\"headerlink\" title=\"3.INOUT参数实例\"></a>3.INOUT参数实例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set @ip=1;</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">USE `test`$$</span><br><span class=\"line\">DROP PROCEDURE IF EXISTS `test`$$</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE DEFINER=`root`@`localhost` PROCEDURE `test`(INOUT ip INT)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">SELECT ip; // 1</span><br><span class=\"line\">SET ip=10;</span><br><span class=\"line\">SELECT ip; // 10</span><br><span class=\"line\">END$$</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\">CALL test(@ip);</span><br><span class=\"line\"></span><br><span class=\"line\">select @ip; // 10</span><br></pre></td></tr></table></figure>\n<p>内外都能影响</p>\n<hr>\n<h3 id=\"五-变量\"><a href=\"#五-变量\" class=\"headerlink\" title=\"五.变量\"></a>五.变量</h3><h4 id=\"1-变量定义\"><a href=\"#1-变量定义\" class=\"headerlink\" title=\"1.变量定义\"></a>1.变量定义</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">局部变量声明一定要放在存储过程体的开始</span><br><span class=\"line\">DECLARE l_int int unsigned default 4000000;</span><br><span class=\"line\">DECLARE l_numeric number(8,2) DEFAULT 9.95;</span><br><span class=\"line\">DECLARE l_date date DEFAULT &apos;1999-12-31&apos;;  </span><br><span class=\"line\">DECLARE l_datetime datetime DEFAULT &apos;1999-12-31 23:59:59&apos;;  </span><br><span class=\"line\">DECLARE l_varchar varchar(255) DEFAULT &apos;This will not be padded&apos;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-变量赋值\"><a href=\"#2-变量赋值\" class=\"headerlink\" title=\"2.变量赋值\"></a>2.变量赋值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set ip = value;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-用户变量\"><a href=\"#3-用户变量\" class=\"headerlink\" title=\"3.用户变量\"></a>3.用户变量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT &apos;Hello World&apos; into @x;</span><br><span class=\"line\">SELECT @x;</span><br><span class=\"line\">SET @y=&apos;Goodbye Cruel World&apos;;</span><br><span class=\"line\">SELECT @y;</span><br><span class=\"line\">SET @z=1+2+3;</span><br><span class=\"line\">SELECT @z;</span><br><span class=\"line\">// 存储过程中使用用户变量</span><br><span class=\"line\">CREATE PROCEDURE GreetWorld() SELECT CONCAT(@greeting,&apos; World&apos;);</span><br><span class=\"line\">SET @greeting=&apos;Hello&apos;;</span><br><span class=\"line\">CALL GreetWorld();  </span><br><span class=\"line\">// 存储过程间传递全局范围的用户变量</span><br><span class=\"line\">CREATE PROCEDURE p1() SET @last_procedure=&apos;p1&apos;;</span><br><span class=\"line\">CREATE PROCEDURE p2() SELECT CONCAT(&apos;Last procedure was &apos;,@last_procedure);</span><br><span class=\"line\">CALL p1();</span><br><span class=\"line\">CALL p2();</span><br></pre></td></tr></table></figure>\n<p>注意:</p>\n<ul>\n<li>用户变量名一般以@开头</li>\n<li>滥用用户变量会导致程序难以理解及管理</li>\n</ul>\n<hr>\n<h3 id=\"六-注释\"><a href=\"#六-注释\" class=\"headerlink\" title=\"六.注释\"></a>六.注释</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">USE `test`$$</span><br><span class=\"line\">DROP PROCEDURE IF EXISTS `test`$$</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE DEFINER=`root`@`localhost` PROCEDURE `test`(INOUT ip INT) -- 创建存储过程</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">SELECT ip; -- 输出 1</span><br><span class=\"line\">/*</span><br><span class=\"line\">SET ip=10;</span><br><span class=\"line\">SELECT ip; -- 输出 10</span><br><span class=\"line\">*/</span><br><span class=\"line\">END$$</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"七-存储过程的增删改查\"><a href=\"#七-存储过程的增删改查\" class=\"headerlink\" title=\"七.存储过程的增删改查\"></a>七.存储过程的增删改查</h3><h4 id=\"1-创建\"><a href=\"#1-创建\" class=\"headerlink\" title=\"1.创建\"></a>1.创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DEFINER=`root`@`localhost` PROCEDURE 存储过程名;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-删除\"><a href=\"#2-删除\" class=\"headerlink\" title=\"2.删除\"></a>2.删除</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE 存储过程名;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-修改\"><a href=\"#3-修改\" class=\"headerlink\" title=\"3.修改\"></a>3.修改</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER PROCEDURE 存储过程名</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-查看\"><a href=\"#4-查看\" class=\"headerlink\" title=\"4.查看\"></a>4.查看</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT NAME FROM mysql.proc WHERE db=&apos;数据库名&apos;;</span><br><span class=\"line\">SELECT routine_name FROM information_schema.routines WHERE routine_schema=&apos;数据库名&apos;;</span><br><span class=\"line\">SHOW PROCEDURE STATUS WHERE db=&apos;数据库名&apos;;</span><br><span class=\"line\">SHOW CREATE PROCEDURE 数据库.存储过程名;</span><br></pre></td></tr></table></figure>\n<h3 id=\"八-存储过程的控制语句\"><a href=\"#八-存储过程的控制语句\" class=\"headerlink\" title=\"八.存储过程的控制语句\"></a>八.存储过程的控制语句</h3><h4 id=\"1-变量的作用域\"><a href=\"#1-变量的作用域\" class=\"headerlink\" title=\"1.变量的作用域\"></a>1.变量的作用域</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //  </span><br><span class=\"line\">CREATE PROCEDURE proc3(OUT x1 VARCHAR(5))  </span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">DECLARE x1 VARCHAR(5) DEFAULT &apos;outer&apos;;  </span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">DECLARE x1 VARCHAR(5) DEFAULT &apos;inner&apos;;  </span><br><span class=\"line\">SELECT x1; -- inner</span><br><span class=\"line\">END;  </span><br><span class=\"line\">SELECT x1; -- outer</span><br><span class=\"line\">END;  </span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<p>只在自已的定义域中有效,出了定义域无效,可以通过out参数或者将其值指派给会话变量来保存其值。</p>\n<h4 id=\"2-if-then-else语句\"><a href=\"#2-if-then-else语句\" class=\"headerlink\" title=\"2.if -then -else语句\"></a>2.if -then -else语句</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //  </span><br><span class=\"line\">CREATE PROCEDURE proc2(IN parameter INT)  </span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">DECLARE var INT;  </span><br><span class=\"line\">SET var=parameter+1;  </span><br><span class=\"line\"></span><br><span class=\"line\">IF var=0 THEN </span><br><span class=\"line\">    INSERT INTO t VALUES(17);  </span><br><span class=\"line\">END IF;  </span><br><span class=\"line\"></span><br><span class=\"line\">IF parameter=0 THEN </span><br><span class=\"line\">    UPDATE t SET s1=s1+1;  </span><br><span class=\"line\">ELSE </span><br><span class=\"line\">    UPDATE t SET s1=s1+2;  </span><br><span class=\"line\">END IF;  </span><br><span class=\"line\">END;</span><br><span class=\"line\">//  </span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-case语句\"><a href=\"#3-case语句\" class=\"headerlink\" title=\"3.case语句\"></a>3.case语句</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //  </span><br><span class=\"line\">CREATE PROCEDURE proc3 (IN parameter INT)  </span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">DECLARE var INT;  </span><br><span class=\"line\">SET var=parameter+1;  </span><br><span class=\"line\">CASE var  </span><br><span class=\"line\">WHEN 0 THEN   </span><br><span class=\"line\">    INSERT INTO t VALUES(17);  </span><br><span class=\"line\">WHEN 1 THEN   </span><br><span class=\"line\">    INSERT INTO t VALUES(18);  </span><br><span class=\"line\">ELSE   </span><br><span class=\"line\">    INSERT INTO t VALUES(19);  </span><br><span class=\"line\">END CASE;  </span><br><span class=\"line\">END;  </span><br><span class=\"line\">//  </span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-while-条件-DO-…-end-while-语句\"><a href=\"#4-while-条件-DO-…-end-while-语句\" class=\"headerlink\" title=\"4.while 条件 DO … end while;语句\"></a>4.while 条件 DO … end while;语句</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //  </span><br><span class=\"line\">CREATE PROCEDURE proc4()  </span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">DECLARE var INT;  </span><br><span class=\"line\">SET var=0;  </span><br><span class=\"line\">WHILE var&lt;6 DO  </span><br><span class=\"line\">    INSERT INTO t VALUES(var);  </span><br><span class=\"line\">    SET var=var+1;  </span><br><span class=\"line\">END WHILE;</span><br><span class=\"line\">END;  </span><br><span class=\"line\">//  </span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<p>在执行循环体之前进行判断</p>\n<h4 id=\"5-repeat-…until-条件-end-repeat-语句\"><a href=\"#5-repeat-…until-条件-end-repeat-语句\" class=\"headerlink\" title=\"5.repeat …until 条件 end repeat;语句\"></a>5.repeat …until 条件 end repeat;语句</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //  </span><br><span class=\"line\">CREATE PROCEDURE proc5 ()  </span><br><span class=\"line\">BEGIN   </span><br><span class=\"line\">DECLARE v INT;  </span><br><span class=\"line\">SET v=0;  </span><br><span class=\"line\">REPEAT  </span><br><span class=\"line\">    INSERT INTO t VALUES(v);  </span><br><span class=\"line\">    SET v=v+1;  </span><br><span class=\"line\">UNTIL v&gt;=5</span><br><span class=\"line\">END REPEAT;  </span><br><span class=\"line\">END;  </span><br><span class=\"line\">//  </span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<p>在执行循环体之后进行判断</p>\n<h4 id=\"6-loop-…-leave-end-loop-语句\"><a href=\"#6-loop-…-leave-end-loop-语句\" class=\"headerlink\" title=\"6.loop … leave end loop;语句\"></a>6.loop … leave end loop;语句</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //  </span><br><span class=\"line\">CREATE PROCEDURE proc6 ()  </span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">DECLARE v INT;  </span><br><span class=\"line\">SET v=0;  </span><br><span class=\"line\">LOOP_LABLE:LOOP  </span><br><span class=\"line\">    INSERT INTO t VALUES(v);  </span><br><span class=\"line\">    SET v=v+1;  </span><br><span class=\"line\">    IF v &gt;=5 THEN </span><br><span class=\"line\">        LEAVE LOOP_LABLE;  </span><br><span class=\"line\">    END IF;  </span><br><span class=\"line\">END LOOP;  </span><br><span class=\"line\">END;  </span><br><span class=\"line\">//  </span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<p>leave语句的意义是离开循环,LOOP_LABEL是自定义的标号</p>\n<h4 id=\"7-LABLES-标号\"><a href=\"#7-LABLES-标号\" class=\"headerlink\" title=\"7.LABLES 标号:\"></a>7.LABLES 标号:</h4><p>在使用loop的时候，使用到的labels标号，对于labels可以用到while，loop，rrepeat等循环控制语句中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create procedure pro13()</span><br><span class=\"line\">label_1:begin</span><br><span class=\"line\">label_2:while 0=1 do leave label_2;end while;</span><br><span class=\"line\">label_3:repeat leave label_3;until 0=0 end repeat;</span><br><span class=\"line\">label_4:loop leave label_4;end loop;</span><br><span class=\"line\">end;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 加了结束标号的语句,功能相同</span><br><span class=\"line\">create procedure pro14()</span><br><span class=\"line\">label_1:begin</span><br><span class=\"line\">label_2:while 0=1 do leave label_2;end while label_2;</span><br><span class=\"line\">label_3:repeat leave label_3;until 0=0 end repeat label_3;</span><br><span class=\"line\">label_4:loop leave label_4;end loop label_4;</span><br><span class=\"line\">end label_1;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"8-ITERATE迭代\"><a href=\"#8-ITERATE迭代\" class=\"headerlink\" title=\"8.ITERATE迭代\"></a>8.ITERATE迭代</h4><p>ITERATE只能出现在LOOP，REPEAT和WHILE语句中，它的意思是“再次循环”,类似于continue<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //  </span><br><span class=\"line\">CREATE PROCEDURE proc11()  </span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">DECLARE v INT;  </span><br><span class=\"line\">SET v=0;  </span><br><span class=\"line\">LOOP_LABLE:LOOP  </span><br><span class=\"line\">    IF v=3 THEN   </span><br><span class=\"line\">        SET v=v+1;  </span><br><span class=\"line\">\t    ITERATE LOOP_LABLE;  </span><br><span class=\"line\">\tEND IF;  </span><br><span class=\"line\">    INSERT INTO t VALUES(v);  </span><br><span class=\"line\">    SET v=v+1;  </span><br><span class=\"line\">\tIF v&gt;=5 THEN </span><br><span class=\"line\">\t    LEAVE LOOP_LABLE;  </span><br><span class=\"line\">    END IF;  </span><br><span class=\"line\">END LOOP;  </span><br><span class=\"line\">END;  </span><br><span class=\"line\">//  </span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure></p>\n<p>首先i的值为0，条件判断语句if i=3 then判断为假，跳过if语段，向数据库中插入0，然后i+1，同样后面的if i&gt;=5 then判断也为假，也跳过；继续循环，同样插入1和2；在i=3的时候条件判断语句if i=3 then判断为真，执行i=i+1，i值为4，然后执行迭代iterate loop_label;，即语句执行到iterate loop_label;后直接跳到if i=3 then判断语句，执行判断，这个时候由于i=4，if i=3 then判断为假，跳过IF语段，将4添加到表中，i变为5，条件判断if i&gt;=5 then判断为真，执行leave loop_label;跳出loop循环，然后执行end;//，结束整个存储过程。</p>\n<h3 id=\"九-存储过程中的基本函数\"><a href=\"#九-存储过程中的基本函数\" class=\"headerlink\" title=\"九.存储过程中的基本函数\"></a>九.存储过程中的基本函数</h3><h4 id=\"1-字符串类\"><a href=\"#1-字符串类\" class=\"headerlink\" title=\"1.字符串类\"></a>1.字符串类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CHARSET(str) //返回字串字符集</span><br><span class=\"line\">CONCAT (string2 [,... ]) //连接字串</span><br><span class=\"line\">INSTR (string ,substring ) //返回substring首次在string中出现的位置,不存在返回0</span><br><span class=\"line\">LCASE (string2 ) //转换成小写</span><br><span class=\"line\">LEFT (string2 ,length ) //从string2中的左边起取length个字符</span><br><span class=\"line\">LENGTH (string ) //string长度</span><br><span class=\"line\">LOAD_FILE (file_name ) //从文件读取内容</span><br><span class=\"line\">LOCATE (substring , string [,start_position ] ) 同INSTR,但可指定开始位置</span><br><span class=\"line\">LPAD (string2 ,length ,pad ) //重复用pad加在string开头,直到字串长度为length</span><br><span class=\"line\">LTRIM (string2 ) //去除前端空格</span><br><span class=\"line\">REPEAT (string2 ,count ) //重复count次</span><br><span class=\"line\">REPLACE (str ,search_str ,replace_str ) //在str中用replace_str替换search_str</span><br><span class=\"line\">RPAD (string2 ,length ,pad) //在str后用pad补充,直到长度为length</span><br><span class=\"line\">RTRIM (string2 ) //去除后端空格</span><br><span class=\"line\">STRCMP (string1 ,string2 ) //逐字符比较两字串大小,str1比str2小返回-1,大返回1,相同返回0</span><br><span class=\"line\">SUBSTRING (str , position [,length ]) //从str的position开始,取length个字符</span><br><span class=\"line\">注：mysql中处理字符串时，默认第一个字符下标为1，即参数position必须大于等于1</span><br><span class=\"line\">TRIM([[BOTH|LEADING|TRAILING][padding] FROM]string2) //去除指定位置的指定字符</span><br><span class=\"line\">UCASE (string2 ) //转换成大写</span><br><span class=\"line\">RIGHT(string2,length) //取string2最后length个字符</span><br><span class=\"line\">SPACE(count) //生成count个空格</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-数学类\"><a href=\"#2-数学类\" class=\"headerlink\" title=\"2.数学类\"></a>2.数学类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABS (number2 ) //绝对值</span><br><span class=\"line\">BIN (decimal_number ) //十进制转二进制</span><br><span class=\"line\">CEILING (number2 ) //向上取整</span><br><span class=\"line\">CONV(number2,from_base,to_base) //进制转换</span><br><span class=\"line\">FLOOR (number2 ) //向下取整</span><br><span class=\"line\">FORMAT (number,decimal_places ) //保留小数位数</span><br><span class=\"line\">HEX (DecimalNumber ) //转十六进制</span><br><span class=\"line\">注：HEX()中可传入字符串，则返回其ASC-11码，如HEX(&apos;DEF&apos;)返回4142143</span><br><span class=\"line\">也可以传入十进制整数，返回其十六进制编码，如HEX(25)返回19</span><br><span class=\"line\">LEAST (number , number2 [,..]) //求最小值</span><br><span class=\"line\">MOD (numerator ,denominator ) //求余</span><br><span class=\"line\">POWER (number ,power ) //求指数</span><br><span class=\"line\">RAND([seed]) //随机数</span><br><span class=\"line\">ROUND (number [,decimals ]) //四舍五入,decimals为小数位数]</span><br><span class=\"line\">注：返回类型并非均为整数,默认为整数</span><br><span class=\"line\">SQRT(number2) //开平方</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-日期时间类\"><a href=\"#3-日期时间类\" class=\"headerlink\" title=\"3.日期时间类\"></a>3.日期时间类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADDTIME (date2 ,time_interval)//将time_interval加到date2</span><br><span class=\"line\">CONVERT_TZ (datetime2 ,fromTZ ,toTZ) //转换时区</span><br><span class=\"line\">CURRENT_DATE () //当前日期</span><br><span class=\"line\">CURRENT_TIME () //当前时间</span><br><span class=\"line\">CURRENT_TIMESTAMP () //当前时间戳</span><br><span class=\"line\">DATE (datetime) //返回datetime的日期部分</span><br><span class=\"line\">DATE_ADD (date2 , INTERVAL d_value d_type) //在date2中加上日期或时间</span><br><span class=\"line\">DATE_FORMAT (datetime ,FormatCodes) //使用formatcodes格式显示datetime</span><br><span class=\"line\">DATE_SUB (date2 , INTERVAL d_value d_type) //在date2上减去一个时间</span><br><span class=\"line\">DATEDIFF (date1 ,date2) //两个日期差</span><br><span class=\"line\">DAY (date) //返回日期的天</span><br><span class=\"line\">DAYNAME (date) //英文星期</span><br><span class=\"line\">DAYOFWEEK (date) //星期(1-7) ,1为星期天</span><br><span class=\"line\">DAYOFYEAR (date) //一年中的第几天</span><br><span class=\"line\">EXTRACT (interval_name FROM date) //从date中提取日期的指定部分</span><br><span class=\"line\">MAKEDATE (year ,day) //给出年及年中的第几天,生成日期串</span><br><span class=\"line\">MAKETIME (hour ,minute ,second) //生成时间串</span><br><span class=\"line\">MONTHNAME (date ) //英文月份名</span><br><span class=\"line\">NOW () //当前时间</span><br><span class=\"line\">SEC_TO_TIME (seconds) //秒数转成时间</span><br><span class=\"line\">STR_TO_DATE (string ,format) //字串转成时间,以format格式显示</span><br><span class=\"line\">TIMEDIFF (datetime1 ,datetime2) //两个时间差</span><br><span class=\"line\">TIME_TO_SEC (time) //时间转秒数]</span><br><span class=\"line\">WEEK (date_time [,start_of_week ]) //第几周</span><br><span class=\"line\">YEAR (datetime) //年份</span><br><span class=\"line\">DAYOFMONTH(datetime) //月的第几天</span><br><span class=\"line\">HOUR(datetime) //小时</span><br><span class=\"line\">LAST_DAY(date) //date的月的最后日期</span><br><span class=\"line\">MICROSECOND(datetime) //微秒</span><br><span class=\"line\">MONTH(datetime) //月</span><br><span class=\"line\">MINUTE(datetime) //分返回符号,正负或0</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"十-分页存储过程\"><a href=\"#十-分页存储过程\" class=\"headerlink\" title=\"十.分页存储过程\"></a>十.分页存储过程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER //  </span><br><span class=\"line\">DROP PROCEDURE IF EXISTS pr_pager;</span><br><span class=\"line\">CREATE PROCEDURE pr_pager(</span><br><span class=\"line\">    IN p_table_name VARCHAR(1024),      -- 表名      </span><br><span class=\"line\">    IN p_fields VARCHAR(1024),          -- 列名</span><br><span class=\"line\">    IN p_page_size INT,                 -- 一页的大小</span><br><span class=\"line\">    IN p_page_now INT,                  -- 页码</span><br><span class=\"line\">    IN p_order_string VARCHAR(128),     -- 排序语句</span><br><span class=\"line\">    IN p_where_string VARCHAR(1024),    -- where条件</span><br><span class=\"line\">    OUT p_out_rows INT                    </span><br><span class=\"line\">)</span><br><span class=\"line\">NOT DETERMINISTIC</span><br><span class=\"line\">SQL SECURITY DEFINER</span><br><span class=\"line\">COMMENT &apos;分页存储过程&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">  </span><br><span class=\"line\">DECLARE m_begin_row INT DEFAULT 0;</span><br><span class=\"line\">DECLARE m_limit_string CHAR(64);</span><br><span class=\"line\"></span><br><span class=\"line\">SET m_begin_row = (p_page_now - 1) * p_page_size;   -- 开始行=(页面-1)*一页的大小</span><br><span class=\"line\">SET m_limit_string = CONCAT(&apos; LIMIT &apos;, m_begin_row, &apos;, &apos;, p_page_size);   -- 分页拼接 LIMIT 开始行,一页的大小</span><br><span class=\"line\"></span><br><span class=\"line\">-- SELECT COUNT(*) INTO @ROWS_TOTAL FROM 表名 where条件); 将总行数赋值给ROWS_TOTAL,作为返回值</span><br><span class=\"line\">SET @COUNT_STRING = CONCAT(&apos;SELECT COUNT(*) INTO @ROWS_TOTAL FROM &apos;, p_table_name, &apos; &apos;, p_where_string);</span><br><span class=\"line\">-- SELECT 列名 FROM 表名 where条件 order排序 limit语句; 最后的输出页数据</span><br><span class=\"line\">SET @MAIN_STRING = CONCAT(&apos;SELECT &apos;, p_fields, &apos; FROM &apos;, p_table_name, &apos; &apos;, p_where_string, &apos; &apos;, p_order_string,m_limit_string);</span><br><span class=\"line\"></span><br><span class=\"line\">PREPARE count_stmt FROM @COUNT_STRING;  -- 预定义sql</span><br><span class=\"line\">EXECUTE count_stmt;                     -- 执行sql    </span><br><span class=\"line\">DEALLOCATE PREPARE count_stmt;          -- 释放掉连接</span><br><span class=\"line\">SET p_out_rows = @ROWS_TOTAL;</span><br><span class=\"line\"></span><br><span class=\"line\">PREPARE main_stmt FROM @MAIN_STRING;</span><br><span class=\"line\">EXECUTE main_stmt;</span><br><span class=\"line\">DEALLOCATE PREPARE main_stmt;</span><br><span class=\"line\">    </span><br><span class=\"line\">END;</span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\">call pr_pager(&quot;t&quot;,&quot;var&quot;,3,3,&quot;&quot;,&quot;&quot;,@result);</span><br><span class=\"line\">call pr_pager(&quot;t&quot;,&quot;var&quot;,3,2,&quot;&quot;,&quot;&quot;,@result);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"十一-存储过程的优点\"><a href=\"#十一-存储过程的优点\" class=\"headerlink\" title=\"十一.存储过程的优点\"></a>十一.存储过程的优点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般 SQL 语句每执行一次就编译一次,所以使用存储过程可提高数据库执行速度。</span><br><span class=\"line\">2.当对数据库进行复杂操作时(如对多个表进行 Update,Insert,Query,Delete 时），可将此复杂操作用存储过程封装起来与数据库提供的事务处理结合一起使用。这些操作，如果用程序来完成，就变成了一条条的 SQL 语句，可能要多次连接数据库。而换成存储，只需要连接一次数据库就可以了。</span><br><span class=\"line\">3.存储过程可以重复使用,可减少数据库开发人员的工作量。</span><br><span class=\"line\">4.安全性高,可设定只有某此用户才具有对指定存储过程的使用权。</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"补充-触发器\"><a href=\"#补充-触发器\" class=\"headerlink\" title=\"补充:触发器\"></a>补充:触发器</h3><h4 id=\"1-语法\"><a href=\"#1-语法\" class=\"headerlink\" title=\"1.语法\"></a>1.语法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TRIGGER 触发器名</span><br><span class=\"line\">触发时机(BEFORE,AFTER)</span><br><span class=\"line\">触发事件(INSERT,UPDATE,DELETE) ON 被触发的表名</span><br><span class=\"line\">FOR EACH ROW</span><br><span class=\"line\">触发器程序体</span><br><span class=\"line\"></span><br><span class=\"line\">由此可见，可以建立6种触发器，即：BEFORE INSERT、BEFORE UPDATE、BEFORE DELETE、AFTER INSERT、AFTER UPDATE、AFTER DELETE。</span><br><span class=\"line\"></span><br><span class=\"line\">另外有一个限制是不能同时在一个表上建立2个相同类型的触发器，因此在一个表上最多建立6个触发器。</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-触发事件\"><a href=\"#2-触发事件\" class=\"headerlink\" title=\"2.触发事件\"></a>2.触发事件</h3><blockquote>\n<ul>\n<li>MySQL除了对<strong>INSERT</strong>、<strong>UPDATE</strong>、<strong>DELETE</strong>基本操作进行定义外，还定义了<strong>LOAD DATA</strong>和<strong>REPLACE</strong>语句，这两种语句也能引起上述6中类型的触发器的触发。</li>\n<li><strong>LOAD DATA</strong>语句用于将一个文件装入到一个数据表中，相当与一系列的 INSERT 操作。</li>\n<li><strong>REPLACE</strong>语句一般来说和 INSERT 语句很像，只是在表中有<strong>primary key </strong>或<strong>unique</strong>索引时，如果插入的数据和原来<strong>primary key</strong>或<strong>unique</strong>索引一致时，会先删除原来的数据，然后增加一条新数据，也就是说，一条 REPLACE 语句有时候等价于一条。</li>\n<li><strong>INSERT</strong>语句，有时候等价于一条<strong>DELETE</strong>语句加上一条<strong>INSERT</strong>语句。</li>\n<li><strong>INSERT型触发器</strong>：插入某一行时激活触发器，可能通过<strong>INSERT</strong>、<strong>LOAD DATA</strong>、<strong>REPLACE</strong>语句触发；</li>\n<li><strong>UPDATE型触发器</strong>：更改某一行时激活触发器，可能通过<strong>UPDATE</strong>语句触发；</li>\n<li><strong>DELETE型触发器</strong>：删除某一行时激活触发器，可能通过<strong>DELETE</strong>、<strong>REPLACE</strong>语句触发。</li>\n</ul>\n</blockquote>\n<h3 id=\"3-触发器程序体\"><a href=\"#3-触发器程序体\" class=\"headerlink\" title=\"3.触发器程序体\"></a>3.触发器程序体</h3><blockquote>\n<p>statement_list代表一个或多个语句的列表，列表内的每条语句都必须用分号（;）来结尾。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEGIN</span><br><span class=\"line\">[statement_list]</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"4-触发器实例\"><a href=\"#4-触发器实例\" class=\"headerlink\" title=\"4.触发器实例\"></a>4.触发器实例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $</span><br><span class=\"line\">-- 创建一个在对student表进行INSERT事件之后进行一系列操作的触发器</span><br><span class=\"line\">create trigger tri_stuInsert after insert</span><br><span class=\"line\">on student for each row</span><br><span class=\"line\">begin</span><br><span class=\"line\">declare c int;</span><br><span class=\"line\">-- 查询原来class表的stuCount</span><br><span class=\"line\">set c = (select stuCount from class where classID=new.classID);</span><br><span class=\"line\">-- 将stuCount+1</span><br><span class=\"line\">update class set stuCount = c + 1 where classID = new.classID;</span><br><span class=\"line\">end</span><br><span class=\"line\">$</span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-NEW和OLD详解\"><a href=\"#5-NEW和OLD详解\" class=\"headerlink\" title=\"5.NEW和OLD详解\"></a>5.NEW和OLD详解</h3><blockquote>\n<p>MySQL中定义了<strong>NEW</strong>和<strong>OLD</strong>，用来表示触发器的所在表中，触发了触发器的那一行数据。</p>\n<ul>\n<li>在<strong>INSERT</strong>型触发器中，<strong>NEW</strong>用来表示将要（<strong>BEFORE</strong>）或已经（<strong>AFTER</strong>）插入的新数据；</li>\n<li>在<strong>UPDATE</strong>型触发器中，<strong>OLD</strong>用来表示将要或已经被修改的原数据，<strong>NEW</strong>用来表示将要或已经修改为的新数据；</li>\n<li>在<strong>DELETE</strong>型触发器中，<strong>OLD</strong>用来表示将要或已经被删除的原数据；</li>\n</ul>\n<p><strong>使用方法</strong>： <strong>NEW.columnName</strong>（columnName为相应数据表某一列名）</p>\n<p>另外，<strong>OLD</strong>是只读的，而<strong>NEW</strong>则可以在触发器中使用SET赋值，这样不会再次触发触发器，造成循环调用（如每插入一个学生前，都在其学号前加“2013”）。</p>\n</blockquote>\n<h3 id=\"6-触发器的查找与删除\"><a href=\"#6-触发器的查找与删除\" class=\"headerlink\" title=\"6.触发器的查找与删除\"></a>6.触发器的查找与删除</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查找</span><br><span class=\"line\">SHOW TRIGGERS [FROM schema_name]</span><br><span class=\"line\">SELETE TRIGGER_SCHEMA,TRIGGER_NAME,DEFINER,ACTION_STATEMENT FROM TRIGGERS WHERE TRIGGER_SCHEMA=&apos;course&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 删除</span><br><span class=\"line\">DROP TRIGGER [IF EXISTS] [schema_name.]trigger_name</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-触发器的执行顺序\"><a href=\"#7-触发器的执行顺序\" class=\"headerlink\" title=\"7.触发器的执行顺序\"></a>7.触发器的执行顺序</h3><blockquote>\n<p>建立的数据库一般都是<strong>InnoDB</strong>数据库，其上建立的表是事务性表，也就是事务安全的。这时，若SQL语句或触发器执行失败，MySQL会回滚事务，有：</p>\n<ul>\n<li>如果<strong>BEFORE</strong>触发器执行失败，SQL无法正确执行。</li>\n<li>SQL执行失败时，<strong>AFTER</strong>型触发器不会触发。</li>\n<li><strong>AFTER</strong>类型的触发器执行失败，SQL会回滚。</li>\n</ul>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjwc5ctgr0001skw7jyvymt17","category_id":"cjwc5ctgx0004skw7i8ndrxq8","_id":"cjwc5cthc000dskw7v9vnhsnh"},{"post_id":"cjwc5ctgv0003skw7gibimd55","category_id":"cjwc5cth7000askw7sxmdlujs","_id":"cjwc5cthh000iskw76pgrnchn"},{"post_id":"cjwc5ctgy0005skw7w3cpkeyn","category_id":"cjwc5cth7000askw7sxmdlujs","_id":"cjwc5cthj000kskw7b2wewixo"},{"post_id":"cjwc5cth10006skw72fkv7jtm","category_id":"cjwc5cthh000hskw7pbplsqlw","_id":"cjwc5cthm000pskw7r9urq3c3"},{"post_id":"cjwc5cth50009skw7m5ggnwri","category_id":"cjwc5cthk000lskw7tmzjv9nx","_id":"cjwc5ctho000sskw70ezludmi"},{"post_id":"cjwc5cth8000bskw7woj86yuf","category_id":"cjwc5cthn000qskw7wyex80sa","_id":"cjwc5cthq000wskw77zm1q7ca"},{"post_id":"cjwc5cti40014skw7ru48m9s6","category_id":"cjwc5cti70015skw71h0dgmow","_id":"cjwc5ctia0018skw7y9nltq6r"},{"post_id":"cjwc5ctil0019skw7dr9hw7co","category_id":"cjwc5ctin001askw7zp1cnbi1","_id":"cjwc5ctiq001dskw7ix01e23j"}],"PostTag":[{"post_id":"cjwc5ctgl0000skw755bzc4hg","tag_id":"cjwc5ctgt0002skw7mhd5tqq2","_id":"cjwc5cth40008skw7y6q4b0xx"},{"post_id":"cjwc5ctgr0001skw7jyvymt17","tag_id":"cjwc5cth30007skw7ema1g05l","_id":"cjwc5cthc000eskw7jzmz47ky"},{"post_id":"cjwc5ctgv0003skw7gibimd55","tag_id":"cjwc5cthb000cskw7oka7n2p9","_id":"cjwc5cthk000mskw70clrcic6"},{"post_id":"cjwc5ctgv0003skw7gibimd55","tag_id":"cjwc5cthf000gskw7e91mvwre","_id":"cjwc5cthl000nskw770od6pcv"},{"post_id":"cjwc5ctgy0005skw7w3cpkeyn","tag_id":"cjwc5cth30007skw7ema1g05l","_id":"cjwc5ctho000tskw7jhnzouyj"},{"post_id":"cjwc5ctgy0005skw7w3cpkeyn","tag_id":"cjwc5cthl000oskw7sdgjir72","_id":"cjwc5cthp000uskw7ifu8v97n"},{"post_id":"cjwc5cth10006skw72fkv7jtm","tag_id":"cjwc5cthn000rskw7otcde39m","_id":"cjwc5cthq000xskw72a7td59b"},{"post_id":"cjwc5cth50009skw7m5ggnwri","tag_id":"cjwc5cthp000vskw7ihwzl8b4","_id":"cjwc5cths000zskw7h35x1ahl"},{"post_id":"cjwc5cth8000bskw7woj86yuf","tag_id":"cjwc5cthr000yskw72iujdven","_id":"cjwc5cthu0011skw7501503ud"},{"post_id":"cjwc5cth8000bskw7woj86yuf","tag_id":"cjwc5cthf000gskw7e91mvwre","_id":"cjwc5cthu0012skw769gpc287"},{"post_id":"cjwc5cti40014skw7ru48m9s6","tag_id":"cjwc5cti80016skw7god38gzy","_id":"cjwc5cti90017skw7klzhwib7"},{"post_id":"cjwc5ctil0019skw7dr9hw7co","tag_id":"cjwc5ctio001bskw7xdnuxgtr","_id":"cjwc5ctip001cskw7kvrdmp05"}],"Tag":[{"name":"docker","_id":"cjwc5ctgt0002skw7mhd5tqq2"},{"name":"hexo","_id":"cjwc5cth30007skw7ema1g05l"},{"name":"CDH","_id":"cjwc5cthb000cskw7oka7n2p9"},{"name":"大数据","_id":"cjwc5cthf000gskw7e91mvwre"},{"name":"git","_id":"cjwc5cthl000oskw7sdgjir72"},{"name":"mvn","_id":"cjwc5cthn000rskw7otcde39m"},{"name":"Linux","_id":"cjwc5cthp000vskw7ihwzl8b4"},{"name":"spark","_id":"cjwc5cthr000yskw72iujdven"},{"name":"shell","_id":"cjwc5cti80016skw7god38gzy"},{"name":"mysql","_id":"cjwc5ctio001bskw7xdnuxgtr"}]}}